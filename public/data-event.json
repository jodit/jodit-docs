{
  "docs": [
    {
      "comment": "/**\n * Check browser is Internet Explorer\n */",
      "meta": {
        "range": [
          4792,
          4954
        ],
        "filename": "jodit.js",
        "lineno": 127,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100000437",
          "name": "exports.isIE",
          "type": "FunctionExpression",
          "paramnames": []
        }
      },
      "description": "Check browser is Internet Explorer",
      "name": "isIE",
      "longname": "isIE",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000039",
      "___s": true
    },
    {
      "comment": "/**\n * Find all elements by selector and return Array. If it did not find any element it return empty array\n *\n * @example\n * ```javascript\n * Jodit.modules.Helpres.$$('.someselector').forEach(function (elm) {\n *      elm.addEventListener('click', function () {\n *          alert(''Clicked');\n *      });\n * })\n * ```\n * @param selector CSS like selector\n * @param root\n *\n * @return {HTMLElement[]}\n */",
      "meta": {
        "range": [
          5376,
          6012
        ],
        "filename": "jodit.js",
        "lineno": 147,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100000472",
          "name": "exports.$$",
          "type": "FunctionExpression",
          "paramnames": [
            "selector",
            "root"
          ]
        },
        "vars": {
          "result": "$$~result",
          "id": "$$~id",
          "temp_id": "$$~temp_id",
          "selector": "$$~selector"
        }
      },
      "description": "Find all elements by selector and return Array. If it did not find any element it return empty array",
      "examples": [
        "```javascript\nJodit.modules.Helpres.$$('.someselector').forEach(function (elm) {\n     elm.addEventListener('click', function () {\n         alert(''Clicked');\n     });\n})\n```"
      ],
      "params": [
        {
          "description": "CSS like selector",
          "name": "selector"
        },
        {
          "name": "root"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<HTMLElement>"
            ]
          }
        }
      ],
      "name": "$$",
      "longname": "$$",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000041",
      "___s": true
    },
    {
      "comment": "/**\n * Get name object's type\n * @param obj\n */",
      "meta": {
        "range": [
          6148,
          6357
        ],
        "filename": "jodit.js",
        "lineno": 170,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100000607",
          "name": "exports.type",
          "type": "FunctionExpression",
          "paramnames": [
            "obj"
          ]
        }
      },
      "description": "Get name object's type",
      "params": [
        {
          "name": "obj"
        }
      ],
      "name": "type",
      "longname": "type",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000049",
      "___s": true
    },
    {
      "comment": "/**\n * Check if element is simple plaint object\n *\n * @param obj\n */",
      "meta": {
        "range": [
          7367,
          7604
        ],
        "filename": "jodit.js",
        "lineno": 205,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100000806",
          "name": "exports.isPlainObject",
          "type": "FunctionExpression",
          "paramnames": [
            "obj"
          ]
        }
      },
      "description": "Check if element is simple plaint object",
      "params": [
        {
          "name": "obj"
        }
      ],
      "name": "isPlainObject",
      "longname": "isPlainObject",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000062",
      "___s": true
    },
    {
      "comment": "/**\n * It clears the line of all auxiliary invisible characters , from the spaces and line breaks , tabs from the beginning and end of the line\n *\n * @param {string} value input string\n * @return {string}\n */",
      "meta": {
        "range": [
          9586,
          9735
        ],
        "filename": "jodit.js",
        "lineno": 267,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100001132",
          "name": "exports.trim",
          "type": "FunctionExpression",
          "paramnames": [
            "value"
          ]
        }
      },
      "description": "It clears the line of all auxiliary invisible characters , from the spaces and line breaks , tabs from the beginning and end of the line",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "input string",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "name": "trim",
      "longname": "trim",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000099",
      "___s": true
    },
    {
      "comment": "/**\n * Converts rgba text representation of color in hex\n * @param {string} color - string like rgba(red, green, blue, alpha) or rgb(red, green, blue)\n * @return {string | NaN} hex color view, NaN - for transparent color\n * @example\n * ```javascript\n * var p = document.createElement('p');\n * p.style.color = '#ffffff';\n * console.log(p.getAttribute('style')); // color: rgb(255, 255, 255);\n * console.log(colorTohex(p.style.color)); // #ffffff\n * ```\n */",
      "meta": {
        "range": [
          10193,
          10944
        ],
        "filename": "jodit.js",
        "lineno": 284,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100001156",
          "name": "exports.colorToHex",
          "type": "FunctionExpression",
          "paramnames": [
            "color"
          ]
        },
        "vars": {
          "digits": "colorToHex~digits",
          "hex": "colorToHex~hex",
          "red": "colorToHex~red",
          "green": "colorToHex~green",
          "blue": "colorToHex~blue",
          "rgb": "colorToHex~rgb"
        }
      },
      "description": "Converts rgba text representation of color in hex",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "string like rgba(red, green, blue, alpha) or rgb(red, green, blue)",
          "name": "color"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "NaN"
            ]
          },
          "description": "hex color view, NaN - for transparent color"
        }
      ],
      "examples": [
        "```javascript\nvar p = document.createElement('p');\np.style.color = '#ffffff';\nconsole.log(p.getAttribute('style')); // color: rgb(255, 255, 255);\nconsole.log(colorTohex(p.style.color)); // #ffffff\n```"
      ],
      "name": "colorToHex",
      "longname": "colorToHex",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000100",
      "___s": true
    },
    {
      "comment": "/**\n * Convert rgba and short HEX color to Full text color. #fff to #FFFFFF\n *\n * @method normalizeColor\n * @param {string} colorInput - string like rgba(red, green, blue, alpha) or rgb(red, green, blue) or #fff or #ffffff\n * @return {string|boolean} HEX color, false - for transparent color\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 308,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Convert rgba and short HEX color to Full text color. #fff to #FFFFFF",
      "kind": "function",
      "name": "normalizeColor",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "string like rgba(red, green, blue, alpha) or rgb(red, green, blue) or #fff or #ffffff",
          "name": "colorInput"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "boolean"
            ]
          },
          "description": "HEX color, false - for transparent color"
        }
      ],
      "longname": "normalizeColor",
      "scope": "global",
      "___id": "T000002R000113",
      "___s": true
    },
    {
      "comment": "/**\n * Normalize value to CSS meters\n * @method normalizeSize\n * @param {string|int} value Input string\n * @return {string}\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 335,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Normalize value to CSS meters",
      "kind": "function",
      "name": "normalizeSize",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "int"
            ]
          },
          "description": "Input string",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "longname": "normalizeSize",
      "scope": "global",
      "___id": "T000002R000123",
      "___s": true
    },
    {
      "comment": "/**\n *\n * @param element\n * @param win\n */",
      "meta": {
        "range": [
          12106,
          12471
        ],
        "filename": "jodit.js",
        "lineno": 352,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100001429",
          "name": "exports.getContentWidth",
          "type": "FunctionExpression",
          "paramnames": [
            "element",
            "win"
          ]
        },
        "vars": {
          "pi": "getContentWidth~pi",
          "": null,
          "style": "getContentWidth~style",
          "width": "getContentWidth~width",
          "paddingLeft": "getContentWidth~paddingLeft",
          "paddingRight": "getContentWidth~paddingRight"
        }
      },
      "params": [
        {
          "name": "element"
        },
        {
          "name": "win"
        }
      ],
      "name": "getContentWidth",
      "longname": "getContentWidth",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000125",
      "___s": true
    },
    {
      "comment": "/**\n * CTRL pressed\n *\n * @param  {KeyboardEvent} e Event\n * @return {boolean} true ctrl key was pressed\n */",
      "meta": {
        "range": [
          12892,
          13183
        ],
        "filename": "jodit.js",
        "lineno": 368,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100001532",
          "name": "exports.ctrlKey",
          "type": "FunctionExpression",
          "paramnames": [
            "e"
          ]
        }
      },
      "description": "CTRL pressed",
      "params": [
        {
          "type": {
            "names": [
              "KeyboardEvent"
            ]
          },
          "description": "Event",
          "name": "e"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "true ctrl key was pressed"
        }
      ],
      "name": "ctrlKey",
      "longname": "ctrlKey",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000135",
      "___s": true
    },
    {
      "comment": "/**\n * Create DOM element from HTML text\n *\n * @param {string|HTMLElement} html\n * @param {HTMLDocument} [doc=document]\n *\n * @return HTMLElement\n */",
      "meta": {
        "range": [
          13893,
          14252
        ],
        "filename": "jodit.js",
        "lineno": 404,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100001682",
          "name": "exports.dom",
          "type": "FunctionExpression",
          "paramnames": [
            "html",
            "doc"
          ]
        },
        "vars": {
          "div": "dom~div",
          "div.innerHTML": "dom~div.innerHTML",
          "child": "dom~child"
        }
      },
      "description": "Create DOM element from HTML text",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "HTMLElement"
            ]
          },
          "name": "html"
        },
        {
          "type": {
            "names": [
              "HTMLDocument"
            ]
          },
          "optional": true,
          "defaultvalue": "document",
          "name": "doc"
        }
      ],
      "returns": [
        {
          "description": "HTMLElement"
        }
      ],
      "name": "dom",
      "longname": "dom",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000144",
      "___s": true
    },
    {
      "comment": "/**\n * @param {string} hex\n * @method hexToRgb\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 414,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "hex"
        }
      ],
      "kind": "function",
      "name": "hexToRgb",
      "longname": "hexToRgb",
      "scope": "global",
      "___id": "T000002R000148",
      "___s": true
    },
    {
      "comment": "/**\n * Clear HTML\n *\n * @method clear\n * @param {string} value input string\n * @param {boolean} [removeEmptyBlocks] if true remove empty blocks\n * @return {string}\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 430,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Clear HTML",
      "kind": "function",
      "name": "clear",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "input string",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "if true remove empty blocks",
          "name": "removeEmptyBlocks"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "longname": "clear",
      "scope": "global",
      "___id": "T000002R000156",
      "___s": true
    },
    {
      "comment": "/**\n * Check if a string is a url\n *\n * @method isURL\n * @param {string} str\n * @return {boolean}\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 448,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Check if a string is a url",
      "kind": "function",
      "name": "isURL",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "str"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "longname": "isURL",
      "scope": "global",
      "___id": "T000002R000161",
      "___s": true
    },
    {
      "comment": "/**\n * Check if a string is html or not\n *\n * @method isHTML\n * @param {string} str\n * @return {boolean}\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 466,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Check if a string is html or not",
      "kind": "function",
      "name": "isHTML",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "str"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "longname": "isHTML",
      "scope": "global",
      "___id": "T000002R000166",
      "___s": true
    },
    {
      "comment": "/**\n * Detect if string is HTML from MS Word or Excel\n *\n * @param {string} data\n * @return {boolean}\n */",
      "meta": {
        "range": [
          16345,
          16606
        ],
        "filename": "jodit.js",
        "lineno": 480,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100001950",
          "name": "exports.isHTMLFromWord",
          "type": "FunctionExpression",
          "paramnames": [
            "data"
          ]
        }
      },
      "description": "Detect if string is HTML from MS Word or Excel",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "data"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isHTMLFromWord",
      "longname": "isHTMLFromWord",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000168",
      "___s": true
    },
    {
      "comment": "/**\n * Converts from human readable file size (kb,mb,gb,tb) to bytes\n *\n * @method humanSizeToBytes\n * @param {string|int} human readable file size. Example 1gb or 11.2mb\n * @return {int}\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 485,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Converts from human readable file size (kb,mb,gb,tb) to bytes",
      "kind": "function",
      "name": "humanSizeToBytes",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "int"
            ]
          },
          "description": "readable file size. Example 1gb or 11.2mb",
          "name": "human"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "int"
            ]
          }
        }
      ],
      "longname": "humanSizeToBytes",
      "scope": "global",
      "___id": "T000002R000169",
      "___s": true
    },
    {
      "comment": "/**\n * Parse query string\n *\n */",
      "meta": {
        "range": [
          17232,
          17538
        ],
        "filename": "jodit.js",
        "lineno": 503,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002078",
          "name": "exports.parseQuery",
          "type": "FunctionExpression",
          "paramnames": [
            "queryString"
          ]
        },
        "vars": {
          "query": "parseQuery~query",
          "a": "parseQuery~a",
          "i": "parseQuery~i",
          "keyvalue": "parseQuery~keyvalue",
          "query[undefined]": "parseQuery~query.undefined]"
        }
      },
      "description": "Parse query string",
      "name": "parseQuery",
      "longname": "parseQuery",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000174",
      "___s": true
    },
    {
      "comment": "/**\n *  Javascript url pattern converter replace youtube/vimeo url in embed code.\n *\n * @param {string} url\n * @param {int} [width=400]\n * @param {int} [height=345]\n * return {string} embed code\n */",
      "meta": {
        "range": [
          17739,
          18996
        ],
        "filename": "jodit.js",
        "lineno": 519,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002146",
          "name": "exports.convertMediaURLToVideoEmbed",
          "type": "FunctionExpression",
          "paramnames": [
            "url",
            "width",
            "height"
          ]
        },
        "vars": {
          "width": "convertMediaURLToVideoEmbed~width",
          "height": "convertMediaURLToVideoEmbed~height",
          "parser": "convertMediaURLToVideoEmbed~parser",
          "pattern1": "convertMediaURLToVideoEmbed~pattern1",
          "parser.href": "convertMediaURLToVideoEmbed~parser.href",
          "protocol": "convertMediaURLToVideoEmbed~protocol",
          "query": "convertMediaURLToVideoEmbed~query"
        }
      },
      "description": "Javascript url pattern converter replace youtube/vimeo url in embed code.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "url"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "optional": true,
          "defaultvalue": 400,
          "name": "width"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "optional": true,
          "defaultvalue": 345,
          "description": "return {string} embed code",
          "name": "height"
        }
      ],
      "name": "convertMediaURLToVideoEmbed",
      "longname": "convertMediaURLToVideoEmbed",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000183",
      "___s": true
    },
    {
      "comment": "/**\n * Module returns method that is used to determine the browser\n * @params {Object} parent main Jodit object\n * @example\n * ```javascript\n * console.log(editor.helper.browser('mse'));\n * console.log(editor.helper.browser('chrome'));\n * console.log($editor.helper.browser('opera'));\n * console.log(editor.helper.browser('firefox'));\n * console.log(editor.helper.browser('mse') && editor.helper.browser('version') > 10);\n * ```\n */",
      "meta": {
        "range": [
          19431,
          20170
        ],
        "filename": "jodit.js",
        "lineno": 560,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002325",
          "name": "exports.browser",
          "type": "FunctionExpression",
          "paramnames": [
            "browser"
          ]
        },
        "vars": {
          "ua": "browser~ua",
          "match": "browser~match"
        }
      },
      "description": "Module returns method that is used to determine the browser",
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{Object} parent main Jodit object",
          "value": "{Object} parent main Jodit object"
        }
      ],
      "examples": [
        "```javascript\nconsole.log(editor.helper.browser('mse'));\nconsole.log(editor.helper.browser('chrome'));\nconsole.log($editor.helper.browser('opera'));\nconsole.log(editor.helper.browser('firefox'));\nconsole.log(editor.helper.browser('mse') && editor.helper.browser('version') > 10);\n```"
      ],
      "name": "browser",
      "longname": "browser",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000194",
      "___s": true
    },
    {
      "comment": "/**\n * Calc relative offset by start editor field\n *\n * @method offset\n * @param {HTMLElement} elm\n * @param {Jodit} jodit\n * @param {Document} doc\n * @param {boolean} recurse\n * @return {{top: number, left: number}} returns an object containing the properties top and left.\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 576,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Calc relative offset by start editor field",
      "kind": "function",
      "name": "offset",
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "jodit"
        },
        {
          "type": {
            "names": [
              "Document"
            ]
          },
          "name": "doc"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "recurse"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "returns an object containing the properties top and left."
        }
      ],
      "longname": "offset",
      "scope": "global",
      "___id": "T000002R000197",
      "___s": true
    },
    {
      "comment": "/**\n *\n * @param key\n * @return {string}\n */",
      "meta": {
        "range": [
          21635,
          21784
        ],
        "filename": "jodit.js",
        "lineno": 611,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002663",
          "name": "exports.camelCase",
          "type": "FunctionExpression",
          "paramnames": [
            "key"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "name": "camelCase",
      "longname": "camelCase",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000225",
      "___s": true
    },
    {
      "comment": "/**\n *\n * @param key\n * @return {string}\n */",
      "meta": {
        "range": [
          21831,
          21983
        ],
        "filename": "jodit.js",
        "lineno": 621,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002687",
          "name": "exports.fromCamelCase",
          "type": "FunctionExpression",
          "paramnames": [
            "key"
          ]
        },
        "vars": {
          "": null
        }
      },
      "params": [
        {
          "name": "key"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "name": "fromCamelCase",
      "longname": "fromCamelCase",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000226",
      "___s": true
    },
    {
      "comment": "/**\n * Convert special characters to HTML entities\n *\n * @method htmlspecialchars\n * @param {string} html\n * @return {string}\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 626,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Convert special characters to HTML entities",
      "kind": "function",
      "name": "htmlspecialchars",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "html"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "longname": "htmlspecialchars",
      "scope": "global",
      "___id": "T000002R000227",
      "___s": true
    },
    {
      "comment": "/**\n * Extract plain text from HTML text\n *\n * @param html\n */",
      "meta": {
        "range": [
          22323,
          22461
        ],
        "filename": "jodit.js",
        "lineno": 643,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002738",
          "name": "exports.extractText",
          "type": "FunctionExpression",
          "paramnames": [
            "html"
          ]
        },
        "vars": {
          "tmp": "extractText~tmp",
          "tmp.innerHTML": "extractText~tmp.innerHTML"
        }
      },
      "description": "Extract plain text from HTML text",
      "params": [
        {
          "name": "html"
        }
      ],
      "name": "extractText",
      "longname": "extractText",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000231",
      "___s": true
    },
    {
      "comment": "/**\n * Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in \"execute this function only if 100 milliseconds have passed without it being called.\"\n *\n * @method debounce\n * @param {function} fn\n * @param {int} timeout\n * @param {boolean} [invokeAsap] - execute fn on first call without timeout\n * @param {context} [ctx] Context\n * @return {function}\n * @example\n * ```javascript\n * var jodit = new Jodit('.editor');\n * Jodit.modules.Dom(\"input\").on('keydown', jodit.helper.debounce(function() {\n *     // Do expensive things\n * }, 100));\n * ```\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 648,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Debouncing enforces that a function not be called again until a certain amount of time has passed without it being called. As in \"execute this function only if 100 milliseconds have passed without it being called.\"",
      "kind": "function",
      "name": "debounce",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "fn"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "name": "timeout"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "execute fn on first call without timeout",
          "name": "invokeAsap"
        },
        {
          "type": {
            "names": [
              "context"
            ]
          },
          "optional": true,
          "description": "Context",
          "name": "ctx"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          }
        }
      ],
      "examples": [
        "```javascript\nvar jodit = new Jodit('.editor');\nJodit.modules.Dom(\"input\").on('keydown', jodit.helper.debounce(function() {\n    // Do expensive things\n}, 100));\n```"
      ],
      "longname": "debounce",
      "scope": "global",
      "___id": "T000002R000234",
      "___s": true
    },
    {
      "comment": "/**\n * Throttling enforces a maximum number of times a function can be called over time. As in \"execute this function at most once every 100 milliseconds.\"\n *\n * @method throttle\n * @param {function} fn\n * @param {int} timeout\n * @param {context} [ctx] Context\n * @return {function}\n * @example\n * ```javascript\n * var jodit = new Jodit('.editor');\n * jodit.events.on(document.body, 'scroll', jodit.helper.throttle(function() {\n *     // Do expensive things\n * }, 100));\n * ```\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 688,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Throttling enforces a maximum number of times a function can be called over time. As in \"execute this function at most once every 100 milliseconds.\"",
      "kind": "function",
      "name": "throttle",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "fn"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "name": "timeout"
        },
        {
          "type": {
            "names": [
              "context"
            ]
          },
          "optional": true,
          "description": "Context",
          "name": "ctx"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "function"
            ]
          }
        }
      ],
      "examples": [
        "```javascript\nvar jodit = new Jodit('.editor');\njodit.events.on(document.body, 'scroll', jodit.helper.throttle(function() {\n    // Do expensive things\n}, 100));\n```"
      ],
      "longname": "throttle",
      "scope": "global",
      "___id": "T000002R000243",
      "___s": true
    },
    {
      "comment": "/**\n * Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element\n * @param {HTMLElement} element\n * @param {string|object} key An object of property-value pairs to set. A CSS property name.\n * @param {string|int} value A value to set for the property.\n * @param {boolean} onlyStyleMode Get value from style attribute, without calculating\n */",
      "meta": {
        "range": [
          25512,
          27163
        ],
        "filename": "jodit.js",
        "lineno": 743,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100002969",
          "name": "exports.css",
          "type": "FunctionExpression",
          "paramnames": [
            "element",
            "key",
            "value",
            "onlyStyleMode"
          ]
        },
        "vars": {
          "onlyStyleMode": "css~onlyStyleMode",
          "numberFieldsReg": "css~numberFieldsReg",
          "setValue": "css~setValue",
          "": null,
          "keys": "css~keys",
          "j": "css~j",
          "key2": "css~key2",
          "doc": "css~doc",
          "win": "css~win",
          "currentValue": "css~currentValue",
          "result": "css~result"
        }
      },
      "description": "Get the value of a computed style property for the first element in the set of matched elements or set one or more CSS properties for every matched element",
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "name": "element"
        },
        {
          "type": {
            "names": [
              "string",
              "object"
            ]
          },
          "description": "An object of property-value pairs to set. A CSS property name.",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "string",
              "int"
            ]
          },
          "description": "A value to set for the property.",
          "name": "value"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "Get value from style attribute, without calculating",
          "name": "onlyStyleMode"
        }
      ],
      "name": "css",
      "longname": "css",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000257",
      "___s": true
    },
    {
      "comment": "/**\n * Always return Array\n * @param a\n * @return {Array<any>}\n */",
      "meta": {
        "range": [
          27232,
          27303
        ],
        "filename": "jodit.js",
        "lineno": 779,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100003235",
          "name": "exports.asArray",
          "type": "FunctionExpression",
          "paramnames": [
            "a"
          ]
        }
      },
      "description": "Always return Array",
      "params": [
        {
          "name": "a"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<any>"
            ]
          }
        }
      ],
      "name": "asArray",
      "longname": "asArray",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000273",
      "___s": true
    },
    {
      "comment": "/**\n * The method automatically cleans up content from Microsoft Word and other HTML sources to ensure clean, compliant content that matches the look and feel of the site.\n */",
      "meta": {
        "range": [
          34177,
          35807
        ],
        "filename": "jodit.js",
        "lineno": 943,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100004205",
          "name": "exports.cleanFromWord",
          "type": "FunctionExpression",
          "paramnames": [
            "html"
          ]
        },
        "vars": {
          "html": "cleanFromWord~html",
          "convertedString": "cleanFromWord~convertedString",
          "div": "cleanFromWord~div",
          "div.innerHTML": "cleanFromWord~div.innerHTML",
          "marks_1": "cleanFromWord~marks_1",
          "": null
        }
      },
      "description": "The method automatically cleans up content from Microsoft Word and other HTML sources to ensure clean, compliant content that matches the look and feel of the site.",
      "name": "cleanFromWord",
      "longname": "cleanFromWord",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000335",
      "___s": true
    },
    {
      "comment": "/**\n * Normalize keys to some standart name\n *\n * @param keys\n */",
      "meta": {
        "range": [
          41080,
          41512
        ],
        "filename": "jodit.js",
        "lineno": 1133,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005257",
          "name": "exports.normalizeKeyAliases",
          "type": "FunctionExpression",
          "paramnames": [
            "keys"
          ]
        },
        "vars": {
          "memory": "normalizeKeyAliases~memory",
          "": null
        }
      },
      "description": "Normalize keys to some standart name",
      "params": [
        {
          "name": "keys"
        }
      ],
      "name": "normalizeKeyAliases",
      "longname": "normalizeKeyAliases",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000403",
      "___s": true
    },
    {
      "comment": "/**\n * @property {int} MODE_WYSIWYG=1 WYSIWYG editor mode\n */",
      "meta": {
        "range": [
          43237,
          43261
        ],
        "filename": "jodit.js",
        "lineno": 1204,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005570",
          "name": "exports.MODE_WYSIWYG",
          "type": "Literal",
          "value": 1,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "defaultvalue": 1,
          "description": "WYSIWYG editor mode",
          "name": "MODE_WYSIWYG"
        }
      ],
      "name": "MODE_WYSIWYG",
      "longname": "MODE_WYSIWYG",
      "kind": "member",
      "scope": "global",
      "___id": "T000002R000438",
      "___s": true
    },
    {
      "comment": "/**\n * @property {int} MODE_SOURCE=2 html editor mode\n */",
      "meta": {
        "range": [
          43321,
          43344
        ],
        "filename": "jodit.js",
        "lineno": 1208,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005576",
          "name": "exports.MODE_SOURCE",
          "type": "Literal",
          "value": 2,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "defaultvalue": 2,
          "description": "html editor mode",
          "name": "MODE_SOURCE"
        }
      ],
      "name": "MODE_SOURCE",
      "longname": "MODE_SOURCE",
      "kind": "member",
      "scope": "global",
      "___id": "T000002R000439",
      "___s": true
    },
    {
      "comment": "/**\n * @property {int} MODE_SPLIT=3  Source code editor and HTML editor both like {@link http://getuikit.com/docs/htmleditor.html|this}\n */",
      "meta": {
        "range": [
          43486,
          43508
        ],
        "filename": "jodit.js",
        "lineno": 1212,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005582",
          "name": "exports.MODE_SPLIT",
          "type": "Literal",
          "value": 3,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "defaultvalue": 3,
          "description": "Source code editor and HTML editor both like {@link http://getuikit.com/docs/htmleditor.html|this}",
          "name": "MODE_SPLIT"
        }
      ],
      "name": "MODE_SPLIT",
      "longname": "MODE_SPLIT",
      "kind": "member",
      "scope": "global",
      "___id": "T000002R000440",
      "___s": true
    },
    {
      "comment": "/**\n * @property {string} TEXT_PLAIN='text/plain'  For IE11 it will be 'text'. Need for dataTransfer.setData\n */",
      "meta": {
        "range": [
          43623,
          43789
        ],
        "filename": "jodit.js",
        "lineno": 1216,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005588",
          "name": "exports.URL_LIST",
          "type": "ConditionalExpression",
          "value": "",
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "defaultvalue": "'text/plain'",
          "description": "For IE11 it will be 'text'. Need for dataTransfer.setData",
          "name": "TEXT_PLAIN"
        }
      ],
      "name": "URL_LIST",
      "longname": "URL_LIST",
      "kind": "member",
      "scope": "global",
      "___id": "T000002R000441",
      "___s": true
    },
    {
      "comment": "/**\n * Default Editor's Configuration\n **/",
      "meta": {
        "range": [
          45910,
          63304
        ],
        "filename": "jodit.js",
        "lineno": 1281,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005864",
          "name": "Config",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Default Editor's Configuration",
      "name": "Config",
      "longname": "<anonymous>~Config",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R000483",
      "___s": true
    },
    {
      "comment": "/**\n         * z-index For editor\n         */",
      "meta": {
        "range": [
          47159,
          47174
        ],
        "filename": "jodit.js",
        "lineno": 1319,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005950",
          "name": "this.zIndex",
          "type": "Literal",
          "value": 0,
          "paramnames": []
        }
      },
      "description": "z-index For editor",
      "name": "zIndex",
      "longname": "<anonymous>~Config#zIndex",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000500",
      "___s": true
    },
    {
      "comment": "/**\n         * Change the read-only state of the editor\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          47287,
          47308
        ],
        "filename": "jodit.js",
        "lineno": 1324,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005956",
          "name": "this.readonly",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Change the read-only state of the editor",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "readonly",
      "longname": "<anonymous>~Config#readonly",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000501",
      "___s": true
    },
    {
      "comment": "/**\n         * Change the disabled state of the editor\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          47420,
          47441
        ],
        "filename": "jodit.js",
        "lineno": 1329,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005962",
          "name": "this.disabled",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Change the disabled state of the editor",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "disabled",
      "longname": "<anonymous>~Config#disabled",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000502",
      "___s": true
    },
    {
      "comment": "/**\n         * Size of icons in the toolbar (can be \"small\", \"middle\", \"large\")\n         *\n         * @example\n         * ```javascript\n         * var editor  = new  Jodit(\".dark_editor\", {\n         *      toolbarButtonSize: \"small\"\n         * });\n         * ```\n         */",
      "meta": {
        "range": [
          48103,
          48136
        ],
        "filename": "jodit.js",
        "lineno": 1345,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005980",
          "name": "this.toolbarButtonSize",
          "type": "Literal",
          "value": "middle",
          "paramnames": []
        }
      },
      "description": "Size of icons in the toolbar (can be \"small\", \"middle\", \"large\")",
      "examples": [
        "```javascript\nvar editor  = new  Jodit(\".dark_editor\", {\n     toolbarButtonSize: \"small\"\n});\n```"
      ],
      "name": "toolbarButtonSize",
      "longname": "<anonymous>~Config#toolbarButtonSize",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000504",
      "___s": true
    },
    {
      "comment": "/**\n         * Inline editing mode\n         *\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          48239,
          48258
        ],
        "filename": "jodit.js",
        "lineno": 1351,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005986",
          "name": "this.inline",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Inline editing mode",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "inline",
      "longname": "<anonymous>~Config#inline",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000505",
      "___s": true
    },
    {
      "comment": "/**\n         * Theme (can be \"dark\")\n         * @example\n         * ```javascript\n         * var editor  = new  Jodit(\".dark_editor\", {\n         *      theme: \"dark\"\n         * });\n         * ```\n         */",
      "meta": {
        "range": [
          48484,
          48506
        ],
        "filename": "jodit.js",
        "lineno": 1361,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005992",
          "name": "this.theme",
          "type": "Literal",
          "value": "default",
          "paramnames": []
        }
      },
      "description": "Theme (can be \"dark\")",
      "examples": [
        "```javascript\nvar editor  = new  Jodit(\".dark_editor\", {\n     theme: \"dark\"\n});\n```"
      ],
      "name": "theme",
      "longname": "<anonymous>~Config#theme",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000506",
      "___s": true
    },
    {
      "comment": "/**\n         * if set true then the current mode is saved in a cookie , and is restored after a reload of the page\n         */",
      "meta": {
        "range": [
          48651,
          48681
        ],
        "filename": "jodit.js",
        "lineno": 1365,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100005998",
          "name": "this.saveModeInStorage",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "if set true then the current mode is saved in a cookie , and is restored after a reload of the page",
      "name": "saveModeInStorage",
      "longname": "<anonymous>~Config#saveModeInStorage",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000507",
      "___s": true
    },
    {
      "comment": "/**\n         * if set true and height !== auto then after reload editor will be have latest height\n         */",
      "meta": {
        "range": [
          48810,
          48842
        ],
        "filename": "jodit.js",
        "lineno": 1369,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006004",
          "name": "this.saveHeightInStorage",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "if set true and height !== auto then after reload editor will be have latest height",
      "name": "saveHeightInStorage",
      "longname": "<anonymous>~Config#saveHeightInStorage",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000508",
      "___s": true
    },
    {
      "comment": "/**\n         * Options specifies whether the editor is to have its spelling and grammar checked or not\n         * @see {@link http://www.w3schools.com/tags/att_global_spellcheck.asp}\n         */",
      "meta": {
        "range": [
          49055,
          49077
        ],
        "filename": "jodit.js",
        "lineno": 1374,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006010",
          "name": "this.spellcheck",
          "type": "Literal",
          "value": true,
          "paramnames": []
        }
      },
      "description": "Options specifies whether the editor is to have its spelling and grammar checked or not",
      "see": [
        "{@link http://www.w3schools.com/tags/att_global_spellcheck.asp}"
      ],
      "name": "spellcheck",
      "longname": "<anonymous>~Config#spellcheck",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000509",
      "___s": true
    },
    {
      "comment": "/**\n         * Class name that can be appended to the editor\n         *\n         * @see {@link Jodit.defaultOptions.iframeCSSLinks|iframeCSSLinks}\n         * @see {@link Jodit.defaultOptions.iframeStyle|iframeStyle}\n         *\n         * @example\n         * ```javascript\n         * new Jodit('#editor', {\n         *    editorCssClass: 'some_my_class'\n         * });\n         * ```\n         * ```html\n         * <style>\n         * .some_my_class p{\n         *    line-height: 16px;\n         * }\n         * </style>\n         * ```\n         */",
      "meta": {
        "range": [
          49637,
          49664
        ],
        "filename": "jodit.js",
        "lineno": 1395,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006016",
          "name": "this.editorCssClass",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Class name that can be appended to the editor",
      "see": [
        "{@link Jodit.defaultOptions.iframeCSSLinks|iframeCSSLinks}",
        "{@link Jodit.defaultOptions.iframeStyle|iframeStyle}"
      ],
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n   editorCssClass: 'some_my_class'\n});\n```\n```html\n<style>\n.some_my_class p{\n   line-height: 16px;\n}\n</style>\n```"
      ],
      "name": "editorCssClass",
      "longname": "<anonymous>~Config#editorCssClass",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000510",
      "___s": true
    },
    {
      "comment": "/**\n         * After all changes in editors for textarea will call change trigger\n         *\n         * @example\n         *  ```javascript\n         * var editor = new Jodit('#editor');\n         * document.getElementById('editor').addEventListener('change', function () {\n         *      console.log(this.value);\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          50035,
          50065
        ],
        "filename": "jodit.js",
        "lineno": 1407,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006022",
          "name": "this.triggerChangeEvent",
          "type": "Literal",
          "value": true,
          "paramnames": []
        }
      },
      "description": "After all changes in editors for textarea will call change trigger",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor');\ndocument.getElementById('editor').addEventListener('change', function () {\n     console.log(this.value);\n})\n```"
      ],
      "name": "triggerChangeEvent",
      "longname": "<anonymous>~Config#triggerChangeEvent",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000511",
      "___s": true
    },
    {
      "comment": "/**\n         * Editor's width\n         *\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    width: '100%',\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    width: 600, // equivalent for '600px'\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    width: 'auto', // autosize\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          50582,
          50601
        ],
        "filename": "jodit.js",
        "lineno": 1430,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006028",
          "name": "this.width",
          "type": "Literal",
          "value": "auto",
          "paramnames": []
        }
      },
      "description": "Editor's width",
      "examples": [
        "```javascript\nnew Jodit('.editor', {\n   width: '100%',\n})\n```",
        "```javascript\nnew Jodit('.editor', {\n   width: 600, // equivalent for '600px'\n})\n```",
        "```javascript\nnew Jodit('.editor', {\n   width: 'auto', // autosize\n})\n```"
      ],
      "name": "width",
      "longname": "<anonymous>~Config#width",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000512",
      "___s": true
    },
    {
      "comment": "/**\n         * Editor's height\n         *\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    height: '100%',\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    height: 600, // equivalent for '600px'\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    height: 'auto', // default - autosize\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          51197,
          51217
        ],
        "filename": "jodit.js",
        "lineno": 1455,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006046",
          "name": "this.height",
          "type": "Literal",
          "value": "auto",
          "paramnames": []
        }
      },
      "description": "Editor's height",
      "examples": [
        "```javascript\nnew Jodit('.editor', {\n   height: '100%',\n})\n```",
        "```javascript\nnew Jodit('.editor', {\n   height: 600, // equivalent for '600px'\n})\n```",
        "```javascript\nnew Jodit('.editor', {\n   height: 'auto', // default - autosize\n})\n```"
      ],
      "name": "height",
      "longname": "<anonymous>~Config#height",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000515",
      "___s": true
    },
    {
      "comment": "/**\n         * Editor's min-height\n         *\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    minHeight: '30%' //min-height: 30%\n         * })\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    minHeight: 200 //min-height: 200px\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          51607,
          51627
        ],
        "filename": "jodit.js",
        "lineno": 1472,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006052",
          "name": "this.minHeight",
          "type": "Literal",
          "value": 200,
          "paramnames": []
        }
      },
      "description": "Editor's min-height",
      "examples": [
        "```javascript\nnew Jodit('.editor', {\n   minHeight: '30%' //min-height: 30%\n})\n```",
        "```javascript\nnew Jodit('.editor', {\n   minHeight: 200 //min-height: 200px\n})\n```"
      ],
      "name": "minHeight",
      "longname": "<anonymous>~Config#minHeight",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000516",
      "___s": true
    },
    {
      "comment": "/**\n         * The writing direction of the language which is used to create editor content. Allowed values are: '' (an empty string) – Indicates that content direction will be the same as either the editor UI direction or the page element direction. 'ltr' – Indicates a Left-To-Right text direction (like in English). 'rtl' – Indicates a Right-To-Left text direction (like in Arabic).\n         * @example\n         * ```javascript\n         * new Jodit('.editor', {\n         *    direction: 'rtl'\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          52182,
          52201
        ],
        "filename": "jodit.js",
        "lineno": 1482,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006058",
          "name": "this.direction",
          "type": "Literal",
          "value": "",
          "paramnames": []
        }
      },
      "description": "The writing direction of the language which is used to create editor content. Allowed values are: '' (an empty string) – Indicates that content direction will be the same as either the editor UI direction or the page element direction. 'ltr' – Indicates a Left-To-Right text direction (like in English). 'rtl' – Indicates a Right-To-Left text direction (like in Arabic).",
      "examples": [
        "```javascript\nnew Jodit('.editor', {\n   direction: 'rtl'\n})\n```"
      ],
      "name": "direction",
      "longname": "<anonymous>~Config#direction",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000517",
      "___s": true
    },
    {
      "comment": "/**\n         * Language by default. if `auto` language set by document.documentElement.lang || (navigator.language && navigator.language.substr(0, 2)) || (navigator.browserLanguage && navigator.browserLanguage.substr(0, 2)) || 'en'\n    \n         * @example\n         * ```html\n         * <!-- include in you page lang file -->\n         * <script src=\"jodit/lang/de.js\"></script>\n         * <script>\n         * var editor = new Jodit('.editor', {\n         *    language: 'de'\n         * });\n         * </script>\n         * ```\n         */",
      "meta": {
        "range": [
          52756,
          52778
        ],
        "filename": "jodit.js",
        "lineno": 1497,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006064",
          "name": "this.language",
          "type": "Literal",
          "value": "auto",
          "paramnames": []
        }
      },
      "description": "Language by default. if `auto` language set by document.documentElement.lang || (navigator.language && navigator.language.substr(0, 2)) || (navigator.browserLanguage && navigator.browserLanguage.substr(0, 2)) || 'en'",
      "examples": [
        "```html\n<!-- include in you page lang file -->\n<script src=\"jodit/lang/de.js\"></script>\n<script>\nvar editor = new Jodit('.editor', {\n   language: 'de'\n});\n</script>\n```"
      ],
      "name": "language",
      "longname": "<anonymous>~Config#language",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000518",
      "___s": true
    },
    {
      "comment": "/**\n         * if true all Lang.i18n(key) return `{key}`\n         *\n         * @example\n         * ```html\n         * <script>\n         * var editor = new Jodit('.editor', {\n         *    debugLanguage: true\n         * });\n         *\n         * console.log(editor.i18n(\"Test\")); // {Test}\n         * </script>\n         * ```\n         */",
      "meta": {
        "range": [
          53133,
          53159
        ],
        "filename": "jodit.js",
        "lineno": 1512,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006070",
          "name": "this.debugLanguage",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "if true all Lang.i18n(key) return `{key}`",
      "examples": [
        "```html\n<script>\nvar editor = new Jodit('.editor', {\n   debugLanguage: true\n});\n\nconsole.log(editor.i18n(\"Test\")); // {Test}\n</script>\n```"
      ],
      "name": "debugLanguage",
      "longname": "<anonymous>~Config#debugLanguage",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000519",
      "___s": true
    },
    {
      "comment": "/**\n         * Collection of language pack data {en: {'Type something': 'Type something', ...}}\n         *\n         * @example\n         * ```javascript\n         * var editor = new Jodit('#editor', {\n         *     language: 'ru',\n         *     i18n: {\n         *         ru: {\n         *            'Type something': 'Начните что-либо вводить'\n         *         }\n         *     }\n         * });\n         * console.log(editor.i18n('Type something')) //Начните что-либо вводить\n         * ```\n         */",
      "meta": {
        "range": [
          53683,
          53699
        ],
        "filename": "jodit.js",
        "lineno": 1529,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006076",
          "name": "this.i18n",
          "type": "Literal",
          "value": "en",
          "paramnames": []
        }
      },
      "description": "Collection of language pack data {en: {'Type something': 'Type something', ...}}",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor', {\n    language: 'ru',\n    i18n: {\n        ru: {\n           'Type something': 'Начните что-либо вводить'\n        }\n    }\n});\nconsole.log(editor.i18n('Type something')) //Начните что-либо вводить\n```"
      ],
      "name": "i18n",
      "longname": "<anonymous>~Config#i18n",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000520",
      "___s": true
    },
    {
      "comment": "/**\n         * The tabindex global attribute is an integer indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values\n         */",
      "meta": {
        "range": [
          53967,
          53985
        ],
        "filename": "jodit.js",
        "lineno": 1533,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006082",
          "name": "this.tabIndex",
          "type": "UnaryExpression",
          "value": -1,
          "paramnames": []
        }
      },
      "description": "The tabindex global attribute is an integer indicating if the element can take input focus (is focusable), if it should participate to sequential keyboard navigation, and if so, at what position. It can take several values",
      "name": "tabIndex",
      "longname": "<anonymous>~Config#tabIndex",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000521",
      "___s": true
    },
    {
      "comment": "/**\n         * Show toolbar\n         */",
      "meta": {
        "range": [
          54043,
          54062
        ],
        "filename": "jodit.js",
        "lineno": 1537,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006089",
          "name": "this.toolbar",
          "type": "Literal",
          "value": true,
          "paramnames": []
        }
      },
      "description": "Show toolbar",
      "name": "toolbar",
      "longname": "<anonymous>~Config#toolbar",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000522",
      "___s": true
    },
    {
      "comment": "/**\n         * Show tooltip after mouse enter on the button\n         */",
      "meta": {
        "range": [
          54152,
          54175
        ],
        "filename": "jodit.js",
        "lineno": 1541,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006095",
          "name": "this.showTooltip",
          "type": "Literal",
          "value": true,
          "paramnames": []
        }
      },
      "description": "Show tooltip after mouse enter on the button",
      "name": "showTooltip",
      "longname": "<anonymous>~Config#showTooltip",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000523",
      "___s": true
    },
    {
      "comment": "/**\n         * Delay before show tooltip\n         */",
      "meta": {
        "range": [
          54246,
          54273
        ],
        "filename": "jodit.js",
        "lineno": 1545,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006101",
          "name": "this.showTooltipDelay",
          "type": "Literal",
          "value": 500,
          "paramnames": []
        }
      },
      "description": "Delay before show tooltip",
      "name": "showTooltipDelay",
      "longname": "<anonymous>~Config#showTooltipDelay",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000524",
      "___s": true
    },
    {
      "comment": "/**\n         * Instead of create custop tooltip - use native title tooltips\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          54406,
          54435
        ],
        "filename": "jodit.js",
        "lineno": 1550,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006107",
          "name": "this.useNativeTooltip",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Instead of create custop tooltip - use native title tooltips",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "useNativeTooltip",
      "longname": "<anonymous>~Config#useNativeTooltip",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000525",
      "___s": true
    },
    {
      "comment": "/**\n         * Element that will be created when you press Enter\n         */",
      "meta": {
        "range": [
          54690,
          54719
        ],
        "filename": "jodit.js",
        "lineno": 1559,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006113",
          "name": "this.enter",
          "type": "MemberExpression",
          "value": "consts.PARAGRAPH",
          "paramnames": []
        }
      },
      "description": "Element that will be created when you press Enter",
      "name": "enter",
      "longname": "<anonymous>~Config#enter",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000526",
      "___s": true
    },
    {
      "comment": "/**\n         * Jodit.MODE_WYSIWYG The HTML editor allows you to write like MSWord, Jodit.MODE_AREA syntax highlighting source editor\n         * @example\n         * ```javascript\n         * var editor = new Jodit('#editor', {\n         *     defaultMode: Jodit.MODE_SPLIT\n         * });\n         * console.log(editor.getRealMode())\n         * ```\n         */",
      "meta": {
        "range": [
          55094,
          55132
        ],
        "filename": "jodit.js",
        "lineno": 1570,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006121",
          "name": "this.defaultMode",
          "type": "MemberExpression",
          "value": "consts.MODE_WYSIWYG",
          "paramnames": []
        }
      },
      "description": "Jodit.MODE_WYSIWYG The HTML editor allows you to write like MSWord, Jodit.MODE_AREA syntax highlighting source editor",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor', {\n    defaultMode: Jodit.MODE_SPLIT\n});\nconsole.log(editor.getRealMode())\n```"
      ],
      "name": "defaultMode",
      "longname": "<anonymous>~Config#defaultMode",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000527",
      "___s": true
    },
    {
      "comment": "/**\n         * Use split mode\n         *\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          55230,
          55255
        ],
        "filename": "jodit.js",
        "lineno": 1576,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006129",
          "name": "this.useSplitMode",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Use split mode",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "useSplitMode",
      "longname": "<anonymous>~Config#useSplitMode",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000528",
      "___s": true
    },
    {
      "comment": "/**\n         * The colors in HEX representation to select a color for the background and for the text in colorpicker\n         * @example\n         * ```javascript\n         *  new Jodit('#editor', {\n         *     colors: ['#ff0000', '#00ff00', '#0000ff']\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          55568,
          56650
        ],
        "filename": "jodit.js",
        "lineno": 1586,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006135",
          "name": "this.colors",
          "type": "ObjectExpression",
          "value": "{\"greyscale\":\"\",\"palette\":\"\",\"full\":\"\"}",
          "paramnames": []
        }
      },
      "description": "The colors in HEX representation to select a color for the background and for the text in colorpicker",
      "examples": [
        "```javascript\n new Jodit('#editor', {\n    colors: ['#ff0000', '#00ff00', '#0000ff']\n})\n```"
      ],
      "name": "colors",
      "longname": "<anonymous>~Config#colors",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000529",
      "___s": true
    },
    {
      "comment": "/**\n         * The default tab color picker\n         * @example\n         * ```javascript\n         *  new Jodit('#editor2', {\n         *     colorPickerDefaultTab: 'color'\n         * })\n         * ```\n         */",
      "meta": {
        "range": [
          56880,
          56921
        ],
        "filename": "jodit.js",
        "lineno": 1607,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006227",
          "name": "this.colorPickerDefaultTab",
          "type": "Literal",
          "value": "background",
          "paramnames": []
        }
      },
      "description": "The default tab color picker",
      "examples": [
        "```javascript\n new Jodit('#editor2', {\n    colorPickerDefaultTab: 'color'\n})\n```"
      ],
      "name": "colorPickerDefaultTab",
      "longname": "<anonymous>~Config#colorPickerDefaultTab",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000533",
      "___s": true
    },
    {
      "comment": "/**\n         * Image size defaults to a larger image\n         */",
      "meta": {
        "range": [
          57004,
          57032
        ],
        "filename": "jodit.js",
        "lineno": 1611,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006233",
          "name": "this.imageDefaultWidth",
          "type": "Literal",
          "value": 300,
          "paramnames": []
        }
      },
      "description": "Image size defaults to a larger image",
      "name": "imageDefaultWidth",
      "longname": "<anonymous>~Config#imageDefaultWidth",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000534",
      "___s": true
    },
    {
      "comment": "/**\n         * Do not display these buttons that are on the list\n         * @example\n         * ```javascript\n         * new Jodit('#editor2', {\n         *     removeButtons: ['hr', 'source']\n         * });\n         * ```\n         */",
      "meta": {
        "range": [
          57284,
          57307
        ],
        "filename": "jodit.js",
        "lineno": 1621,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006239",
          "name": "this.removeButtons",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "Do not display these buttons that are on the list",
      "examples": [
        "```javascript\nnew Jodit('#editor2', {\n    removeButtons: ['hr', 'source']\n});\n```"
      ],
      "name": "removeButtons",
      "longname": "<anonymous>~Config#removeButtons",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000535",
      "___s": true
    },
    {
      "comment": "/**\n         * Do not init these plugins\n         * @example\n         * ```typescript\n         * var editor = new Jodit('.editor', {\n         *    disablePlugins: 'table,iframe'\n         * });\n         * //or\n         * var editor = new Jodit('.editor', {\n         *    disablePlugins: ['table', 'iframe']\n         * });\n         * ```\n         */",
      "meta": {
        "range": [
          57673,
          57697
        ],
        "filename": "jodit.js",
        "lineno": 1635,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006245",
          "name": "this.disablePlugins",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "Do not init these plugins",
      "examples": [
        "```typescript\nvar editor = new Jodit('.editor', {\n   disablePlugins: 'table,iframe'\n});\n//or\nvar editor = new Jodit('.editor', {\n   disablePlugins: ['table', 'iframe']\n});\n```"
      ],
      "name": "disablePlugins",
      "longname": "<anonymous>~Config#disablePlugins",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000536",
      "___s": true
    },
    {
      "comment": "/**\n         * This buttons list will be added to option.buttons\n         */",
      "meta": {
        "range": [
          57792,
          57814
        ],
        "filename": "jodit.js",
        "lineno": 1639,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006251",
          "name": "this.extraButtons",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "This buttons list will be added to option.buttons",
      "name": "extraButtons",
      "longname": "<anonymous>~Config#extraButtons",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000537",
      "___s": true
    },
    {
      "comment": "/**\n         * The width of the editor, accepted as the biggest. Used to the responsive version of the editor\n         */",
      "meta": {
        "range": [
          57954,
          57971
        ],
        "filename": "jodit.js",
        "lineno": 1643,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006257",
          "name": "this.sizeLG",
          "type": "Literal",
          "value": 900,
          "paramnames": []
        }
      },
      "description": "The width of the editor, accepted as the biggest. Used to the responsive version of the editor",
      "name": "sizeLG",
      "longname": "<anonymous>~Config#sizeLG",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000538",
      "___s": true
    },
    {
      "comment": "/**\n         * The width of the editor, accepted as the medium. Used to the responsive version of the editor\n         */",
      "meta": {
        "range": [
          58110,
          58127
        ],
        "filename": "jodit.js",
        "lineno": 1647,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006263",
          "name": "this.sizeMD",
          "type": "Literal",
          "value": 700,
          "paramnames": []
        }
      },
      "description": "The width of the editor, accepted as the medium. Used to the responsive version of the editor",
      "name": "sizeMD",
      "longname": "<anonymous>~Config#sizeMD",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000539",
      "___s": true
    },
    {
      "comment": "/**\n         * The width of the editor, accepted as the small. Used to the responsive version of the editor\n         */",
      "meta": {
        "range": [
          58265,
          58282
        ],
        "filename": "jodit.js",
        "lineno": 1651,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006269",
          "name": "this.sizeSM",
          "type": "Literal",
          "value": 400,
          "paramnames": []
        }
      },
      "description": "The width of the editor, accepted as the small. Used to the responsive version of the editor",
      "name": "sizeSM",
      "longname": "<anonymous>~Config#sizeSM",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000540",
      "___s": true
    },
    {
      "comment": "/**\n         * The list of buttons that appear in the editor's toolbar on large places (≥ options.sizeLG). Note - this is not the width of the device, the width of the editor\n         * @example\n         * ```javascript\n         * new Jodit('#editor', {\n         *     buttons: ['bold', 'italic', 'source'],\n         *     buttonsMD: ['bold', 'italic'],\n         *     buttonsXS: ['bold', 'fullsize'],\n         * });\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('#editor2', {\n         *     buttons: [{\n         *         name: 'enty',\n         *         icon: 'source',\n         *         exec: function () {\n         *             var dialog = new Jodit.modules.Dialog(this),\n         *                 div = document.createElement('div'),\n         *                 text = document.createElement('textarea');\n         *             div.innerText = this.val();\n         *             dialog.setTitle('Source code');\n         *             dialog.setContent(text);\n         *             dialog.setSize(400, 300);\n         *             dom(text)\n         *                 .css({\n         *                     width: '100%',\n         *                     height: '100%'\n         *                 })\n         *                 .val(div.innerHTML.replace(/<br>/g, '\\n'));\n         *             dialog.{@link module:Dialog~open|open}();\n         *         }\n         *     }]\n         * });\n         * ```\n         * @example\n         * ```javascript\n         * new Jodit('#editor2', {\n         *     buttons: Jodit.defaultOptions.buttons.concat([{\n         *        name: 'listsss',\n         *        iconURL: 'stuf/dummy.png',\n         *        list: {\n         *            h1: 'insert Header 1',\n         *            h2: 'insert Header 2',\n         *            clear: 'Empty editor',\n         *        },\n         *        exec: ({originalEvent, control, btn}) => {\n         *             var key = control.args[0],\n         *                value = control.args[1];\n         *             if (key === 'clear') {\n         *                 this.val('');\n         *                 return;\n         *             }\n         *             this.selection.insertNode(Jodit.modules.Dom.create(key, ''));\n         *             this.events.fire('errorMessage', 'Was inserted ' + value);\n         *        },\n         *        template: function (key, value) {\n         *            return '<div>' + value + '</div>';\n         *        }\n         *  });\n         *  ```\n         */",
      "meta": {
        "range": [
          60820,
          61558
        ],
        "filename": "jodit.js",
        "lineno": 1714,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006275",
          "name": "this.buttons",
          "type": "ArrayExpression",
          "value": "[\"source\",\"|\",\"bold\",\"strikethrough\",\"underline\",\"italic\",\"|\",\"superscript\",\"subscript\",\"|\",\"ul\",\"ol\",\"|\",\"outdent\",\"indent\",\"|\",\"font\",\"fontsize\",\"brush\",\"paragraph\",\"|\",\"image\",\"file\",\"video\",\"table\",\"link\",\"|\",\"align\",\"undo\",\"redo\",\"\\n\",\"cut\",\"hr\",\"eraser\",\"copyformat\",\"|\",\"symbol\",\"fullsize\",\"selectall\",\"print\",\"about\"]",
          "paramnames": []
        }
      },
      "description": "The list of buttons that appear in the editor's toolbar on large places (≥ options.sizeLG). Note - this is not the width of the device, the width of the editor",
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n    buttons: ['bold', 'italic', 'source'],\n    buttonsMD: ['bold', 'italic'],\n    buttonsXS: ['bold', 'fullsize'],\n});\n```",
        "```javascript\nnew Jodit('#editor2', {\n    buttons: [{\n        name: 'enty',\n        icon: 'source',\n        exec: function () {\n            var dialog = new Jodit.modules.Dialog(this),\n                div = document.createElement('div'),\n                text = document.createElement('textarea');\n            div.innerText = this.val();\n            dialog.setTitle('Source code');\n            dialog.setContent(text);\n            dialog.setSize(400, 300);\n            dom(text)\n                .css({\n                    width: '100%',\n                    height: '100%'\n                })\n                .val(div.innerHTML.replace(/<br>/g, '\\n'));\n            dialog.{@link module:Dialog~open|open}();\n        }\n    }]\n});\n```",
        "```javascript\nnew Jodit('#editor2', {\n    buttons: Jodit.defaultOptions.buttons.concat([{\n       name: 'listsss',\n       iconURL: 'stuf/dummy.png',\n       list: {\n           h1: 'insert Header 1',\n           h2: 'insert Header 2',\n           clear: 'Empty editor',\n       },\n       exec: ({originalEvent, control, btn}) => {\n            var key = control.args[0],\n               value = control.args[1];\n            if (key === 'clear') {\n                this.val('');\n                return;\n            }\n            this.selection.insertNode(Jodit.modules.Dom.create(key, ''));\n            this.events.fire('errorMessage', 'Was inserted ' + value);\n       },\n       template: function (key, value) {\n           return '<div>' + value + '</div>';\n       }\n });\n ```"
      ],
      "name": "buttons",
      "longname": "<anonymous>~Config#buttons",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000541",
      "___s": true
    },
    {
      "comment": "/**\n         * The list of buttons that appear in the editor's toolbar on medium places (≥ options.sizeMD).\n         */",
      "meta": {
        "range": [
          61696,
          62169
        ],
        "filename": "jodit.js",
        "lineno": 1748,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006322",
          "name": "this.buttonsMD",
          "type": "ArrayExpression",
          "value": "[\"source\",\"|\",\"bold\",\"italic\",\"|\",\"ul\",\"ol\",\"|\",\"font\",\"fontsize\",\"brush\",\"paragraph\",\"|\",\"image\",\"table\",\"link\",\"|\",\"align\",\"|\",\"undo\",\"redo\",\"|\",\"hr\",\"eraser\",\"copyformat\",\"fullsize\",\"dots\"]",
          "paramnames": []
        }
      },
      "description": "The list of buttons that appear in the editor's toolbar on medium places (≥ options.sizeMD).",
      "name": "buttonsMD",
      "longname": "<anonymous>~Config#buttonsMD",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000542",
      "___s": true
    },
    {
      "comment": "/**\n         * The list of buttons that appear in the editor's toolbar on small places (≥ options.sizeSM).\n         */",
      "meta": {
        "range": [
          62306,
          62741
        ],
        "filename": "jodit.js",
        "lineno": 1772,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006355",
          "name": "this.buttonsSM",
          "type": "ArrayExpression",
          "value": "[\"source\",\"|\",\"bold\",\"italic\",\"|\",\"ul\",\"ol\",\"|\",\"fontsize\",\"brush\",\"paragraph\",\"|\",\"image\",\"table\",\"link\",\"|\",\"align\",\"|\",\"undo\",\"redo\",\"|\",\"eraser\",\"copyformat\",\"fullsize\",\"dots\"]",
          "paramnames": []
        }
      },
      "description": "The list of buttons that appear in the editor's toolbar on small places (≥ options.sizeSM).",
      "name": "buttonsSM",
      "longname": "<anonymous>~Config#buttonsSM",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000543",
      "___s": true
    },
    {
      "comment": "/**\n         * The list of buttons that appear in the editor's toolbar on extra small places (< options.sizeSM).\n         */",
      "meta": {
        "range": [
          62884,
          63109
        ],
        "filename": "jodit.js",
        "lineno": 1794,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006386",
          "name": "this.buttonsXS",
          "type": "ArrayExpression",
          "value": "[\"bold\",\"image\",\"|\",\"brush\",\"paragraph\",\"|\",\"align\",\"|\",\"undo\",\"redo\",\"|\",\"eraser\",\"dots\"]",
          "paramnames": []
        }
      },
      "description": "The list of buttons that appear in the editor's toolbar on extra small places (< options.sizeSM).",
      "name": "buttonsXS",
      "longname": "<anonymous>~Config#buttonsXS",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000544",
      "___s": true
    },
    {
      "comment": "/**\n         * Buttons in toolbat without SVG - only texts\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          63251,
          63273
        ],
        "filename": "jodit.js",
        "lineno": 1809,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100006411",
          "name": "this.textIcons",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Buttons in toolbat without SVG - only texts",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "textIcons",
      "longname": "<anonymous>~Config#textIcons",
      "kind": "member",
      "memberof": "<anonymous>~Config",
      "scope": "instance",
      "___id": "T000002R000546",
      "___s": true
    },
    {
      "comment": "/**\n                     * @event generateDocumentStructure.iframe\n                     * @property {Document} doc Iframe document\n                     * @property {Jodit} editor\n                     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 1844,
        "columnno": 20,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "kind": "event",
      "name": "iframe",
      "properties": [
        {
          "type": {
            "names": [
              "Document"
            ]
          },
          "description": "Iframe document",
          "name": "doc"
        },
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "memberof": "generateDocumentStructure",
      "longname": "generateDocumentStructure.event:iframe",
      "scope": "static",
      "___id": "T000002R000560",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove all connetn form element\n     *\n     * @param {Node} node\n     */",
      "meta": {
        "range": [
          74154,
          74281
        ],
        "filename": "jodit.js",
        "lineno": 2054,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007627",
          "name": "Dom.detach",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Remove all connetn form element",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        }
      ],
      "name": "detach",
      "longname": "<anonymous>~Dom.detach",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000623",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param node\n     */",
      "meta": {
        "range": [
          74329,
          74588
        ],
        "filename": "jodit.js",
        "lineno": 2063,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007648",
          "name": "Dom.unwrap",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        },
        "vars": {
          "parent": "<anonymous>~Dom.unwrap~parent",
          "el": "<anonymous>~Dom.unwrap~el"
        }
      },
      "params": [
        {
          "name": "node"
        }
      ],
      "name": "unwrap",
      "longname": "<anonymous>~Dom.unwrap",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000624",
      "___s": true
    },
    {
      "comment": "/**\n     * It goes through all the internal elements of the node , causing a callback function\n     *\n     * @param  {HTMLElement} elm elements , the internal node is necessary to sort out\n     * @param  {Function} callback It called for each item found\n     * @example\n     * ```javascript\n     * Jodit.modules.Dom.each(parent.selection.current(), function (node) {\n     *  if (node.nodeType === Node.TEXT_NODE) {\n     *      node.nodeValue = node.nodeValue.replace(Jodit.INVISIBLE_SPACE_REG_EX, '') // remove all of the text element codes invisible character\n     *  }\n     * });\n     * ```\n     */",
      "meta": {
        "range": [
          75199,
          75600
        ],
        "filename": "jodit.js",
        "lineno": 2086,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007688",
          "name": "Dom.each",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm",
            "callback"
          ]
        },
        "vars": {
          "node": "<anonymous>~Dom.each~node",
          "": null
        }
      },
      "description": "It goes through all the internal elements of the node , causing a callback function",
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "description": "elements , the internal node is necessary to sort out",
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "It called for each item found",
          "name": "callback"
        }
      ],
      "examples": [
        "```javascript\nJodit.modules.Dom.each(parent.selection.current(), function (node) {\n if (node.nodeType === Node.TEXT_NODE) {\n     node.nodeValue = node.nodeValue.replace(Jodit.INVISIBLE_SPACE_REG_EX, '') // remove all of the text element codes invisible character\n }\n});\n```"
      ],
      "name": "each",
      "longname": "<anonymous>~Dom.each",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000627",
      "___s": true
    },
    {
      "comment": "/**\n     * Create new element\n     *\n     * @method create\n     * @param  {string} nodeName Can be `div`, `span` or `text`\n     * @param  {string} content Content for new element\n     * @param  {Document} doc\n     * @return {HTMLElement|Text}\n     * @example\n     * ```javascript\n     * var textnode = parent.node.create('text', 'Hello world');\n     * var div = parent.node.create('div', '<img src=\"test.jpg\">');\n     * ```\n     * @deprecated\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 2098,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Create new element",
      "kind": "function",
      "name": "create",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Can be `div`, `span` or `text`",
          "name": "nodeName"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Content for new element",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "Document"
            ]
          },
          "name": "doc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HTMLElement",
              "Text"
            ]
          }
        }
      ],
      "examples": [
        "```javascript\nvar textnode = parent.node.create('text', 'Hello world');\nvar div = parent.node.create('div', '<img src=\"test.jpg\">');\n```"
      ],
      "deprecated": true,
      "longname": "create",
      "scope": "global",
      "___id": "T000002R000630",
      "___s": true
    },
    {
      "comment": "/**\n     * Replace one tag to another transfer content\n     *\n     * @param  {Node} elm The element that needs to be replaced by new\n     * @param  {string} newTagName tag name for which will change `elm`\n     * @param  {boolean} withAttributes=false If true move tag's attributes\n     * @param  {boolean} notMoveContent=false false - Move content from elm to newTagName\n     * @param  {Document} [doc=document]\n     * @return {Node} Returns a new tag\n     * @example\n     * ```javascript\n     * Jodit.modules.Dom.replace(parent.editor.getElementsByTagName('span')[0], 'p'); // Replace the first <span> element to the < p >\n     * ```\n     */",
      "meta": {
        "range": [
          77163,
          77910
        ],
        "filename": "jodit.js",
        "lineno": 2141,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007809",
          "name": "Dom.replace",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm",
            "newTagName",
            "withAttributes",
            "notMoveContent",
            "doc"
          ]
        },
        "vars": {
          "withAttributes": "<anonymous>~Dom.replace~withAttributes",
          "notMoveContent": "<anonymous>~Dom.replace~notMoveContent",
          "tag": "<anonymous>~Dom.replace~tag",
          "": null
        }
      },
      "description": "Replace one tag to another transfer content",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "description": "The element that needs to be replaced by new",
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "tag name for which will change `elm`",
          "name": "newTagName"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": false,
          "description": "If true move tag's attributes",
          "name": "withAttributes"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": false,
          "description": "false - Move content from elm to newTagName",
          "name": "notMoveContent"
        },
        {
          "type": {
            "names": [
              "Document"
            ]
          },
          "optional": true,
          "defaultvalue": "document",
          "name": "doc"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "description": "Returns a new tag"
        }
      ],
      "examples": [
        "```javascript\nJodit.modules.Dom.replace(parent.editor.getElementsByTagName('span')[0], 'p'); // Replace the first <span> element to the < p >\n```"
      ],
      "name": "replace",
      "longname": "<anonymous>~Dom.replace",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000637",
      "___s": true
    },
    {
      "comment": "/**\n     *  Check if element is table cell\n     *\n     * @param {Node} elm\n     * @param {Window} win\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          78055,
          78167
        ],
        "filename": "jodit.js",
        "lineno": 2167,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007914",
          "name": "Dom.isCell",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm",
            "win"
          ]
        }
      },
      "description": "Check if element is table cell",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "Window"
            ]
          },
          "name": "win"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isCell",
      "longname": "<anonymous>~Dom.isCell",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000641",
      "___s": true
    },
    {
      "comment": "/**\n     * Check is element is Image element\n     *\n     * @param {Node} elm\n     * @param {Window} win\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          78314,
          78444
        ],
        "filename": "jodit.js",
        "lineno": 2177,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007938",
          "name": "Dom.isImage",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm",
            "win"
          ]
        }
      },
      "description": "Check is element is Image element",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "Window"
            ]
          },
          "name": "win"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isImage",
      "longname": "<anonymous>~Dom.isImage",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000642",
      "___s": true
    },
    {
      "comment": "/**\n     * Check the `node` is a block element\n     *\n     * @param node\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          78560,
          78698
        ],
        "filename": "jodit.js",
        "lineno": 2186,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007962",
          "name": "Dom.isBlock",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Check the `node` is a block element",
      "params": [
        {
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isBlock",
      "longname": "<anonymous>~Dom.isBlock",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000643",
      "___s": true
    },
    {
      "comment": "/**\n     * Check element is inline block\n     *\n     * @param node\n     */",
      "meta": {
        "range": [
          78783,
          78976
        ],
        "filename": "jodit.js",
        "lineno": 2194,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100007991",
          "name": "Dom.isInlineBlock",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Check element is inline block",
      "params": [
        {
          "name": "node"
        }
      ],
      "name": "isInlineBlock",
      "longname": "<anonymous>~Dom.isInlineBlock",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000644",
      "___s": true
    },
    {
      "comment": "/**\n     * It's block and it can be split\n     *\n     */",
      "meta": {
        "range": [
          79043,
          79332
        ],
        "filename": "jodit.js",
        "lineno": 2201,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008030",
          "name": "Dom.canSplitBlock",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "win"
          ]
        }
      },
      "description": "It's block and it can be split",
      "name": "canSplitBlock",
      "longname": "<anonymous>~Dom.canSplitBlock",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000645",
      "___s": true
    },
    {
      "comment": "/**\n     * Find previous node\n     *\n     * @param {Node} node\n     * @param {function} condition\n     * @param {Node} root\n     * @param {boolean} [withChild=true]\n     *\n     * @return {boolean|Node|HTMLElement|HTMLTableCellElement} false if not found\n     */",
      "meta": {
        "range": [
          79604,
          79829
        ],
        "filename": "jodit.js",
        "lineno": 2217,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008080",
          "name": "Dom.prev",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condition",
            "root",
            "withChild"
          ]
        },
        "vars": {
          "withChild": "<anonymous>~Dom.prev~withChild"
        }
      },
      "description": "Find previous node",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "condition"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "root"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "name": "withChild"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean",
              "Node",
              "HTMLElement",
              "HTMLTableCellElement"
            ]
          },
          "description": "false if not found"
        }
      ],
      "name": "prev",
      "longname": "<anonymous>~Dom.prev",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000646",
      "___s": true
    },
    {
      "comment": "/**\n     * Find next node what `condition(next) === true`\n     *\n     * @param {Node} node\n     * @param {function} condition\n     * @param {Node} root\n     * @param {boolean} [withChild=true]\n     * @return {boolean|Node|HTMLElement|HTMLTableCellElement}\n     */",
      "meta": {
        "range": [
          80103,
          80322
        ],
        "filename": "jodit.js",
        "lineno": 2230,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008115",
          "name": "Dom.next",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condition",
            "root",
            "withChild"
          ]
        },
        "vars": {
          "withChild": "<anonymous>~Dom.next~withChild"
        }
      },
      "description": "Find next node what `condition(next) === true`",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "condition"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "root"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "name": "withChild"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean",
              "Node",
              "HTMLElement",
              "HTMLTableCellElement"
            ]
          }
        }
      ],
      "name": "next",
      "longname": "<anonymous>~Dom.next",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000648",
      "___s": true
    },
    {
      "comment": "/**\n     * Find next/prev node what `condition(next) === true`\n     *\n     * @param {Node} node\n     * @param {function} condition\n     * @param {Node} root\n     * @param {boolean} [recurse=false] check first argument\n     * @param {string} [sibling=nextSibling] nextSibling or previousSibling\n     * @param {string|boolean} [child=firstChild] firstChild or lastChild\n     * @return {Node|Boolean}\n     */",
      "meta": {
        "range": [
          80738,
          81644
        ],
        "filename": "jodit.js",
        "lineno": 2245,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008150",
          "name": "Dom.find",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condition",
            "root",
            "recurse",
            "sibling",
            "child"
          ]
        },
        "vars": {
          "recurse": "<anonymous>~Dom.find~recurse",
          "sibling": "<anonymous>~Dom.find~sibling",
          "child": "<anonymous>~Dom.find~child",
          "start": "<anonymous>~Dom.find~start",
          "next": "<anonymous>~Dom.find~next",
          "nextOne": "<anonymous>~Dom.find~nextOne"
        }
      },
      "description": "Find next/prev node what `condition(next) === true`",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "condition"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "root"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "check first argument",
          "name": "recurse"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "nextSibling",
          "description": "nextSibling or previousSibling",
          "name": "sibling"
        },
        {
          "type": {
            "names": [
              "string",
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": "firstChild",
          "description": "firstChild or lastChild",
          "name": "child"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Node",
              "Boolean"
            ]
          }
        }
      ],
      "name": "find",
      "longname": "<anonymous>~Dom.find",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000650",
      "___s": true
    },
    {
      "comment": "/**\n     * Find next/prev node what `condition(next) === true`\n     *\n     * @param {Node} node\n     * @param {function} condition\n     * @param {Node} root\n     * @param {string} [sibling=nextSibling] nextSibling or previousSibling\n     * @param {string|boolean} [child=firstChild] firstChild or lastChild\n     * @return {Node|Boolean}\n     */",
      "meta": {
        "range": [
          81999,
          82858
        ],
        "filename": "jodit.js",
        "lineno": 2281,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008276",
          "name": "Dom.findWithCurrent",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condition",
            "root",
            "sibling",
            "child"
          ]
        },
        "vars": {
          "sibling": "<anonymous>~Dom.findWithCurrent~sibling",
          "child": "<anonymous>~Dom.findWithCurrent~child",
          "next": "<anonymous>~Dom.findWithCurrent~next",
          "nextOne": "<anonymous>~Dom.findWithCurrent~nextOne"
        }
      },
      "description": "Find next/prev node what `condition(next) === true`",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "condition"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "root"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "nextSibling",
          "description": "nextSibling or previousSibling",
          "name": "sibling"
        },
        {
          "type": {
            "names": [
              "string",
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": "firstChild",
          "description": "firstChild or lastChild",
          "name": "child"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Node",
              "Boolean"
            ]
          }
        }
      ],
      "name": "findWithCurrent",
      "longname": "<anonymous>~Dom.findWithCurrent",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000660",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks whether the Node text and blank (in this case it may contain invisible auxiliary characters , it is also empty )\n     *\n     * @param  {Node} node The element of wood to be checked\n     * @return {Boolean} true element is empty\n     */",
      "meta": {
        "range": [
          83122,
          83320
        ],
        "filename": "jodit.js",
        "lineno": 2310,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008394",
          "name": "Dom.isEmptyTextNode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        }
      },
      "description": "Checks whether the Node text and blank (in this case it may contain invisible auxiliary characters , it is also empty )",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "description": "The element of wood to be checked",
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "description": "true element is empty"
        }
      ],
      "name": "isEmptyTextNode",
      "longname": "<anonymous>~Dom.isEmptyTextNode",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000667",
      "___s": true
    },
    {
      "comment": "/**\n     * Check if element is not empty\n     *\n     * @param {Node} node\n     * @param {RegExp} condNoEmptyElement\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          83479,
          84321
        ],
        "filename": "jodit.js",
        "lineno": 2320,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008432",
          "name": "Dom.isEmpty",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condNoEmptyElement"
          ]
        },
        "vars": {
          "condNoEmptyElement": "<anonymous>~Dom.isEmpty~condNoEmptyElement",
          "": null
        }
      },
      "description": "Check if element is not empty",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "RegExp"
            ]
          },
          "name": "condNoEmptyElement"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isEmpty",
      "longname": "<anonymous>~Dom.isEmpty",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000668",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns true if it is a DOM node\n     */",
      "meta": {
        "range": [
          84383,
          84643
        ],
        "filename": "jodit.js",
        "lineno": 2341,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008557",
          "name": "Dom.isNode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "object",
            "win"
          ]
        }
      },
      "description": "Returns true if it is a DOM node",
      "name": "isNode",
      "longname": "<anonymous>~Dom.isNode",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000670",
      "___s": true
    },
    {
      "comment": "/**\n     * It goes through all the elements in ascending order, and checks to see if they meet the predetermined condition\n     *\n     * @param {callback} node\n     * @param {function} condition\n     * @param {Node} root Root element\n     * @return {boolean|Node|HTMLElement|HTMLTableCellElement|HTMLTableElement} Return false if condition not be true\n     */",
      "meta": {
        "range": [
          85013,
          85433
        ],
        "filename": "jodit.js",
        "lineno": 2355,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008597",
          "name": "Dom.up",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condition",
            "root"
          ]
        },
        "vars": {
          "start": "<anonymous>~Dom.up~start"
        }
      },
      "description": "It goes through all the elements in ascending order, and checks to see if they meet the predetermined condition",
      "params": [
        {
          "type": {
            "names": [
              "callback"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "condition"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "description": "Root element",
          "name": "root"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean",
              "Node",
              "HTMLElement",
              "HTMLTableCellElement",
              "HTMLTableElement"
            ]
          },
          "description": "Return false if condition not be true"
        }
      ],
      "name": "up",
      "longname": "<anonymous>~Dom.up",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000671",
      "___s": true
    },
    {
      "comment": "/**\n     * Find parent by tag name\n     *\n     * @param {Node} node\n     * @param {String|Function} tags\n     * @param {HTMLElement} root\n     * @return {Boolean|Node}\n     */",
      "meta": {
        "range": [
          85619,
          86082
        ],
        "filename": "jodit.js",
        "lineno": 2379,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008650",
          "name": "Dom.closest",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "tags",
            "root"
          ]
        },
        "vars": {
          "condition": "<anonymous>~Dom.closest~condition",
          "": null
        }
      },
      "description": "Find parent by tag name",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "String",
              "function"
            ]
          },
          "name": "tags"
        },
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "name": "root"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Boolean",
              "Node"
            ]
          }
        }
      ],
      "name": "closest",
      "longname": "<anonymous>~Dom.closest",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000674",
      "___s": true
    },
    {
      "comment": "/**\n     * Insert newElement after element\n     *\n     * @param elm\n     * @param newElement\n     */",
      "meta": {
        "range": [
          86193,
          86530
        ],
        "filename": "jodit.js",
        "lineno": 2398,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008722",
          "name": "Dom.after",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm",
            "newElement"
          ]
        },
        "vars": {
          "parentNode": "<anonymous>~Dom.after~parentNode"
        }
      },
      "description": "Insert newElement after element",
      "params": [
        {
          "name": "elm"
        },
        {
          "name": "newElement"
        }
      ],
      "name": "after",
      "longname": "<anonymous>~Dom.after",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000679",
      "___s": true
    },
    {
      "comment": "/**\n     * Move all content to another element\n     *\n     * @param {Node} from\n     * @param {Node} to\n     * @param {boolean} inStart\n     */",
      "meta": {
        "range": [
          86684,
          87274
        ],
        "filename": "jodit.js",
        "lineno": 2417,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008765",
          "name": "Dom.moveContent",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "from",
            "to",
            "inStart"
          ]
        },
        "vars": {
          "inStart": "<anonymous>~Dom.moveContent~inStart",
          "fragment": "<anonymous>~Dom.moveContent~fragment",
          "": null
        }
      },
      "description": "Move all content to another element",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "from"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "to"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "inStart"
        }
      ],
      "name": "moveContent",
      "longname": "<anonymous>~Dom.moveContent",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000681",
      "___s": true
    },
    {
      "comment": "/**\n     * Call callback condition function for all elements of node\n     *\n     * @param node\n     * @param condition\n     * @param prev\n     */",
      "meta": {
        "range": [
          87430,
          87846
        ],
        "filename": "jodit.js",
        "lineno": 2439,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008860",
          "name": "Dom.all",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "condition",
            "prev"
          ]
        },
        "vars": {
          "prev": "<anonymous>~Dom.all~prev",
          "nodes": "<anonymous>~Dom.all~nodes",
          "": null
        }
      },
      "description": "Call callback condition function for all elements of node",
      "params": [
        {
          "name": "node"
        },
        {
          "name": "condition"
        },
        {
          "name": "prev"
        }
      ],
      "name": "all",
      "longname": "<anonymous>~Dom.all",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000684",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {Node} current\n     * @param {String | Node} tag\n     * @param {Jodit} editor\n     *\n     * @return {HTMLElement}\n     */",
      "meta": {
        "range": [
          88003,
          89179
        ],
        "filename": "jodit.js",
        "lineno": 2460,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100008932",
          "name": "Dom.wrapInline",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "current",
            "tag",
            "editor"
          ]
        },
        "vars": {
          "tmp": "<anonymous>~Dom.wrapInline~tmp",
          "first": "<anonymous>~Dom.wrapInline~first",
          "last": "<anonymous>~Dom.wrapInline~last",
          "selInfo": "<anonymous>~Dom.wrapInline~selInfo",
          "needFindNext": "<anonymous>~Dom.wrapInline~needFindNext",
          "wrapper": "<anonymous>~Dom.wrapInline~wrapper",
          "next": "<anonymous>~Dom.wrapInline~next"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "current"
        },
        {
          "type": {
            "names": [
              "String",
              "Node"
            ]
          },
          "name": "tag"
        },
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          }
        }
      ],
      "name": "wrapInline",
      "longname": "<anonymous>~Dom.wrapInline",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000688",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {Node} current\n     * @param {String | Node} tag\n     * @param {Jodit} editor\n     *\n     * @return {HTMLElement}\n     */",
      "meta": {
        "range": [
          89336,
          89763
        ],
        "filename": "jodit.js",
        "lineno": 2504,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100009098",
          "name": "Dom.wrap",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "current",
            "tag",
            "editor"
          ]
        },
        "vars": {
          "selInfo": "<anonymous>~Dom.wrap~selInfo",
          "wrapper": "<anonymous>~Dom.wrap~wrapper"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "current"
        },
        {
          "type": {
            "names": [
              "String",
              "Node"
            ]
          },
          "name": "tag"
        },
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          }
        }
      ],
      "name": "wrap",
      "longname": "<anonymous>~Dom.wrap",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000706",
      "___s": true
    },
    {
      "comment": "/**\n     * Find next/previous inline element\n     *\n     * @param node\n     * @param toLeft\n     * @param root\n     */",
      "meta": {
        "range": [
          89892,
          90853
        ],
        "filename": "jodit.js",
        "lineno": 2522,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100009166",
          "name": "Dom.findInline",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "toLeft",
            "root"
          ]
        },
        "vars": {
          "prevElement": "<anonymous>~Dom.findInline~prevElement",
          "nextElement": "<anonymous>~Dom.findInline~nextElement"
        }
      },
      "description": "Find next/previous inline element",
      "params": [
        {
          "name": "node"
        },
        {
          "name": "toLeft"
        },
        {
          "name": "root"
        }
      ],
      "name": "findInline",
      "longname": "<anonymous>~Dom.findInline",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000709",
      "___s": true
    },
    {
      "comment": "/**\n     * Check root contains child\n     *\n     * @param root\n     * @param child\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          90979,
          91217
        ],
        "filename": "jodit.js",
        "lineno": 2550,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100009266",
          "name": "Dom.contains",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "root",
            "child"
          ]
        },
        "vars": {
          "child": "<anonymous>~Dom.contains~child"
        }
      },
      "description": "Check root contains child",
      "params": [
        {
          "name": "root"
        },
        {
          "name": "child"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "contains",
      "longname": "<anonymous>~Dom.contains",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000715",
      "___s": true
    },
    {
      "comment": "/**\n     * Check root contains child or equal child\n     *\n     * @param {Node} root\n     * @param {Node} child\n     * @param {boolean} onlyContains\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          91409,
          91633
        ],
        "filename": "jodit.js",
        "lineno": 2567,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100009297",
          "name": "Dom.isOrContains",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "root",
            "child",
            "onlyContains"
          ]
        },
        "vars": {
          "onlyContains": "<anonymous>~Dom.isOrContains~onlyContains"
        }
      },
      "description": "Check root contains child or equal child",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "root"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "child"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "onlyContains"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isOrContains",
      "longname": "<anonymous>~Dom.isOrContains",
      "kind": "function",
      "memberof": "<anonymous>~Dom",
      "scope": "static",
      "___id": "T000002R000717",
      "___s": true
    },
    {
      "comment": "/**\n         * Editor was destructed\n         *\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          92533,
          92558
        ],
        "filename": "jodit.js",
        "lineno": 2605,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100009424",
          "name": "this.isDestructed",
          "type": "Literal",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Editor was destructed",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "isDestructed",
      "longname": "<anonymous>~Component#isDestructed",
      "kind": "member",
      "memberof": "<anonymous>~Component",
      "scope": "instance",
      "___id": "T000002R000729",
      "___s": true
    },
    {
      "comment": "/** Class Jodit. Main class*/",
      "meta": {
        "range": [
          97178,
          135210
        ],
        "filename": "jodit.js",
        "lineno": 2702,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100010310",
          "name": "Jodit",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Class Jodit. Main class",
      "name": "Jodit",
      "longname": "<anonymous>~Jodit",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R000808",
      "___s": true
    },
    {
      "comment": "/**\n     * Create instance of Jodit\n     * @constructor\n     *\n     * @param {HTMLInputElement | string} element Selector or HTMLElement\n     * @param {object} options Editor's options\n     */",
      "meta": {
        "range": [
          97452,
          103748
        ],
        "filename": "jodit.js",
        "lineno": 2711,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100010321",
          "name": "Jodit",
          "type": "FunctionDeclaration",
          "paramnames": [
            "element",
            "options"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Jodit~_this",
          "_this.version": "<anonymous>~Jodit~_this.version",
          "_this.components": "<anonymous>~Jodit~_this.components",
          "_this.storage": "<anonymous>~Jodit~_this.storage",
          "_this.iframe": "<anonymous>~Jodit~_this.iframe",
          "_this.__plugins": "<anonymous>~Jodit~_this.__plugins",
          "_this.__defaultStyleDisplayKey": "<anonymous>~Jodit~_this.__defaultStyleDisplayKey",
          "_this.__defaultClassesKey": "<anonymous>~Jodit~_this.__defaultClassesKey",
          "_this.commands": "<anonymous>~Jodit~_this.commands",
          "_this.__selectionLocked": "<anonymous>~Jodit~_this.__selectionLocked",
          "_this.isLockedNotBy": "<anonymous>~Jodit~_this.isLockedNotBy",
          "": null,
          "_this.mode": "<anonymous>~Jodit~_this.mode",
          "_this.getVersion": "<anonymous>~Jodit~_this.getVersion",
          "_this.__wasReadOnly": "<anonymous>~Jodit~_this.__wasReadOnly",
          "_this.buffer": "<anonymous>~Jodit~_this.buffer",
          "_this.options": "<anonymous>~Jodit~_this.options",
          "_this.editorDocument": "<anonymous>~Jodit~_this.editorDocument",
          "_this.editorWindow": "<anonymous>~Jodit~_this.editorWindow",
          "_this.ownerDocument": "<anonymous>~Jodit~_this.ownerDocument",
          "_this.ownerWindow": "<anonymous>~Jodit~_this.ownerWindow",
          "_this.events": "<anonymous>~Jodit~_this.events",
          "_this.element": "<anonymous>~Jodit~_this.element",
          "_this.selection": "<anonymous>~Jodit~_this.selection",
          "_this.uploader": "<anonymous>~Jodit~_this.uploader",
          "_this.observer": "<anonymous>~Jodit~_this.observer",
          "_this.container": "<anonymous>~Jodit~_this.container",
          "buffer": "<anonymous>~Jodit~buffer",
          "_this.container.innerHTML": "<anonymous>~Jodit~_this.container.innerHTML",
          "_this.container.style.zIndex": "<anonymous>~Jodit~_this.container.style.zIndex",
          "_this.workplace": "<anonymous>~Jodit~_this.workplace",
          "_this.progress_bar": "<anonymous>~Jodit~_this.progress_bar",
          "_this.toolbar": "<anonymous>~Jodit~_this.toolbar",
          "_this.statusbar": "<anonymous>~Jodit~_this.statusbar",
          "_this.helper": "<anonymous>~Jodit~_this.helper",
          "_this.id": "<anonymous>~Jodit~_this.id"
        }
      },
      "description": "Create instance of Jodit",
      "kind": "class",
      "params": [
        {
          "type": {
            "names": [
              "HTMLInputElement",
              "string"
            ]
          },
          "description": "Selector or HTMLElement",
          "name": "element"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Editor's options",
          "name": "options"
        }
      ],
      "name": "Jodit",
      "longname": "<anonymous>~Jodit",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R000809",
      "___s": true
    },
    {
      "comment": "/**\n         * Container for set/get value\n         * @type {Storage}\n         */",
      "meta": {
        "range": [
          97723,
          97798
        ],
        "filename": "jodit.js",
        "lineno": 2719,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100010349",
          "name": "_this.storage",
          "type": "NewExpression",
          "funcscope": "<anonymous>~Jodit",
          "value": "",
          "paramnames": []
        }
      },
      "description": "Container for set/get value",
      "type": {
        "names": [
          "Storage"
        ]
      },
      "name": "storage",
      "longname": "<anonymous>~Jodit~_this.storage",
      "kind": "member",
      "memberof": "<anonymous>~Jodit~_this",
      "scope": "static",
      "___id": "T000002R000813",
      "___s": true
    },
    {
      "comment": "/**\n         * iframe Iframe for iframe mode\n         */",
      "meta": {
        "range": [
          97873,
          97892
        ],
        "filename": "jodit.js",
        "lineno": 2723,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100010362",
          "name": "_this.iframe",
          "type": "Literal",
          "funcscope": "<anonymous>~Jodit",
          "value": null,
          "paramnames": []
        }
      },
      "description": "iframe Iframe for iframe mode",
      "name": "iframe",
      "longname": "<anonymous>~Jodit~_this.iframe",
      "kind": "member",
      "memberof": "<anonymous>~Jodit~_this",
      "scope": "static",
      "___id": "T000002R000814",
      "___s": true
    },
    {
      "comment": "/**\n         * Return current version\n         *\n         * @method getVersion\n         * @return {string}\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 2733,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Return current version",
      "kind": "function",
      "name": "getVersion",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "longname": "getVersion",
      "scope": "global",
      "___id": "T000002R000822",
      "___s": true
    },
    {
      "comment": "/**\n     * Create main DIV element and replace source textarea\n     *\n     * @private\n     */",
      "meta": {
        "range": [
          106738,
          109889
        ],
        "filename": "jodit.js",
        "lineno": 2915,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100011518",
          "name": "Jodit.prototype.__createEditor",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Create main DIV element and replace source textarea",
      "access": "private",
      "name": "__createEditor",
      "longname": "<anonymous>~Jodit#__createEditor",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000865",
      "___s": true
    },
    {
      "comment": "/**\n     * Jodit's Destructor. Remove editor, and return source input\n     */",
      "meta": {
        "range": [
          109977,
          113345
        ],
        "filename": "jodit.js",
        "lineno": 2975,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100011831",
          "name": "Jodit.prototype.destruct",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "_this": "<anonymous>~Jodit#destruct~_this",
          "this.isDestructed": "<anonymous>~Jodit#isDestructed",
          "buffer": "<anonymous>~Jodit#destruct~buffer",
          "this.element.style.display": "<anonymous>~Jodit#element.style.display",
          "this.element.className": "<anonymous>~Jodit#element.className",
          "": null,
          "this.element.innerHTML": "<anonymous>~Jodit#element.innerHTML"
        }
      },
      "description": "Jodit's Destructor. Remove editor, and return source input",
      "name": "destruct",
      "longname": "<anonymous>~Jodit#destruct",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000872",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered before {@link events:beforeDestruct|beforeDestruct} executed. If returned false method stopped\n         *\n         * @event beforeDestruct\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('beforeDestruct', function (data) {\n         *     return false;\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 2981,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered before {@link events:beforeDestruct|beforeDestruct} executed. If returned false method stopped",
      "kind": "event",
      "name": "beforeDestruct",
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('beforeDestruct', function (data) {\n    return false;\n});\n```"
      ],
      "longname": "event:beforeDestruct",
      "scope": "global",
      "___id": "T000002R000875",
      "___s": true
    },
    {
      "comment": "/**\n     * Return source element value\n     */",
      "meta": {
        "range": [
          113402,
          113550
        ],
        "filename": "jodit.js",
        "lineno": 3062,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100012300",
          "name": "Jodit.prototype.getElementValue",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Return source element value",
      "name": "getElementValue",
      "longname": "<anonymous>~Jodit#getElementValue",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000881",
      "___s": true
    },
    {
      "comment": "/**\n     * Return real HTML value from WYSIWYG editor.\n     *\n     * @return {string}\n     */",
      "meta": {
        "range": [
          113654,
          113830
        ],
        "filename": "jodit.js",
        "lineno": 3070,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100012328",
          "name": "Jodit.prototype.getNativeEditorValue",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Return real HTML value from WYSIWYG editor.",
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "name": "getNativeEditorValue",
      "longname": "<anonymous>~Jodit#getNativeEditorValue",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000882",
      "___s": true
    },
    {
      "comment": "/**\n     * Return editor value\n     */",
      "meta": {
        "range": [
          113879,
          115643
        ],
        "filename": "jodit.js",
        "lineno": 3079,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100012353",
          "name": "Jodit.prototype.getEditorValue",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "removeSelectionMarkers"
          ]
        },
        "vars": {
          "removeSelectionMarkers": "<anonymous>~Jodit#getEditorValue~removeSelectionMarkers",
          "value": "<anonymous>~Jodit#getEditorValue~value",
          "new_value": "<anonymous>~Jodit#getEditorValue~new_value"
        }
      },
      "description": "Return editor value",
      "name": "getEditorValue",
      "longname": "<anonymous>~Jodit#getEditorValue",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000883",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered before {@link Jodit~getEditorValue|getEditorValue} executed. If returned not undefined getEditorValue will return this value\n         *\n         * @event beforeGetValueFromEditor\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('beforeGetValueFromEditor', function () {\n         *     return editor.editor.innerHTML.replace(/a/g, 'b');\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3081,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered before {@link Jodit~getEditorValue|getEditorValue} executed. If returned not undefined getEditorValue will return this value",
      "kind": "event",
      "name": "beforeGetValueFromEditor",
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('beforeGetValueFromEditor', function () {\n    return editor.editor.innerHTML.replace(/a/g, 'b');\n});\n```"
      ],
      "longname": "event:beforeGetValueFromEditor",
      "scope": "global",
      "___id": "T000002R000885",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered after  {@link Jodit~getEditorValue|getEditorValue} got value from wysiwyg. It can change new_value.value\n         *\n         * @event afterGetValueFromEditor\n         * @param string new_value\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('afterGetValueFromEditor', function (new_value) {\n         *     new_value.value = new_value.value.replace('a', 'b');\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3107,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered after  {@link Jodit~getEditorValue|getEditorValue} got value from wysiwyg. It can change new_value.value",
      "kind": "event",
      "name": "afterGetValueFromEditor",
      "params": [
        {
          "description": "new_value",
          "name": "string"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('afterGetValueFromEditor', function (new_value) {\n    new_value.value = new_value.value.replace('a', 'b');\n});\n```"
      ],
      "longname": "event:afterGetValueFromEditor",
      "scope": "global",
      "___id": "T000002R000891",
      "___s": true
    },
    {
      "comment": "/**\n     * Set source element value and if set sync fill editor value\n     * When method was called without arguments - it is simple way to synchronize element to editor\n     *\n     * @param {string} [value]\n     */",
      "meta": {
        "range": [
          116142,
          116818
        ],
        "filename": "jodit.js",
        "lineno": 3138,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100012490",
          "name": "Jodit.prototype.setElementValue",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "value"
          ]
        },
        "vars": {
          "this.element.value": "<anonymous>~Jodit#element.value",
          "this.element.innerHTML": "<anonymous>~Jodit#element.innerHTML",
          "value": "<anonymous>~Jodit#setElementValue~value"
        }
      },
      "description": "Set source element value and if set sync fill editor value\nWhen method was called without arguments - it is simple way to synchronize element to editor",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "value"
        }
      ],
      "name": "setElementValue",
      "longname": "<anonymous>~Jodit#setElementValue",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000897",
      "___s": true
    },
    {
      "comment": "/**\n     * Set editor html value and if set sync fill source element value\n     * When method was called without arguments - it is simple way to synchronize editor to element\n     * @event beforeSetValueToEditor\n     * @param {string} [value]\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3159,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Set editor html value and if set sync fill source element value\nWhen method was called without arguments - it is simple way to synchronize editor to element",
      "kind": "event",
      "name": "beforeSetValueToEditor",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "value"
        }
      ],
      "longname": "event:beforeSetValueToEditor",
      "scope": "global",
      "___id": "T000002R000901",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered before  {@link Jodit~getEditorValue|setEditorValue} set value to wysiwyg.\n         *\n         * @event beforeSetValueToEditor\n         * @param string old_value\n         * @returns string | undefined | false\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('beforeSetValueToEditor', function (old_value) {\n         *     return old_value.value.replace('a', 'b');\n         * });\n         * editor.events.on('beforeSetValueToEditor', function () {\n         *     return false; // disable setEditorValue method\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3166,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered before  {@link Jodit~getEditorValue|setEditorValue} set value to wysiwyg.",
      "kind": "event",
      "name": "beforeSetValueToEditor",
      "params": [
        {
          "description": "old_value",
          "name": "string"
        }
      ],
      "returns": [
        {
          "description": "string | undefined | false"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('beforeSetValueToEditor', function (old_value) {\n    return old_value.value.replace('a', 'b');\n});\neditor.events.on('beforeSetValueToEditor', function () {\n    return false; // disable setEditorValue method\n});\n```"
      ],
      "longname": "event:beforeSetValueToEditor",
      "scope": "global",
      "___id": "T000002R000903",
      "___s": true
    },
    {
      "comment": "/**\n     * Register custom handler for command\n     *\n     * @example\n     * ```javascript\n     * var jodit = new Jodit('#editor);\n     *\n     * jodit.setEditorValue('test test test');\n     *\n     * jodit.registerCommand('replaceString', function (command, needle, replace) {\n     *      var value = this.getEditorValue();\n     *      this.setEditorValue(value.replace(needle, replace));\n     *      return false; // stop execute native command\n     * });\n     *\n     * jodit.execCommand('replaceString', 'test', 'stop');\n     *\n     * console.log(jodit.getEditorValue()); // stop test test\n     *\n     * // and you can add hotkeys for command\n     * jodit.registerCommand('replaceString', {\n     *    hotkeys: 'ctrl+r',\n     *    exec: function (command, needle, replace) {\n     *     var value = this.getEditorValue();\n     *     this.setEditorValue(value.replace(needle, replace));\n     *    }\n     * });\n     *\n     * ```\n     *\n     * @param {string} commandNameOriginal\n     * @param {CommandType | Function} command\n     */",
      "meta": {
        "range": [
          121009,
          121619
        ],
        "filename": "jodit.js",
        "lineno": 3274,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100012843",
          "name": "Jodit.prototype.registerCommand",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "commandNameOriginal",
            "command"
          ]
        },
        "vars": {
          "commandName": "<anonymous>~Jodit#registerCommand~commandName",
          "this.commands[undefined]": "<anonymous>~Jodit#commands[undefined]",
          "hotkeys": "<anonymous>~Jodit#registerCommand~hotkeys"
        }
      },
      "description": "Register custom handler for command",
      "examples": [
        "```javascript\nvar jodit = new Jodit('#editor);\n\njodit.setEditorValue('test test test');\n\njodit.registerCommand('replaceString', function (command, needle, replace) {\n     var value = this.getEditorValue();\n     this.setEditorValue(value.replace(needle, replace));\n     return false; // stop execute native command\n});\n\njodit.execCommand('replaceString', 'test', 'stop');\n\nconsole.log(jodit.getEditorValue()); // stop test test\n\n// and you can add hotkeys for command\njodit.registerCommand('replaceString', {\n   hotkeys: 'ctrl+r',\n   exec: function (command, needle, replace) {\n    var value = this.getEditorValue();\n    this.setEditorValue(value.replace(needle, replace));\n   }\n});\n\n```"
      ],
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "commandNameOriginal"
        },
        {
          "type": {
            "names": [
              "CommandType",
              "function"
            ]
          },
          "name": "command"
        }
      ],
      "name": "registerCommand",
      "longname": "<anonymous>~Jodit#registerCommand",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000924",
      "___s": true
    },
    {
      "comment": "/**\n     * Register hotkey for command\n     *\n     * @param hotkeys\n     * @param commandName\n     */",
      "meta": {
        "range": [
          121731,
          122237
        ],
        "filename": "jodit.js",
        "lineno": 3293,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100012926",
          "name": "Jodit.prototype.registerHotkeyToCommand",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "hotkeys",
            "commandName"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Jodit#registerHotkeyToCommand~_this",
          "shortcuts": "<anonymous>~Jodit#registerHotkeyToCommand~shortcuts",
          "": null
        }
      },
      "description": "Register hotkey for command",
      "params": [
        {
          "name": "hotkeys"
        },
        {
          "name": "commandName"
        }
      ],
      "name": "registerHotkeyToCommand",
      "longname": "<anonymous>~Jodit#registerHotkeyToCommand",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000928",
      "___s": true
    },
    {
      "comment": "/**\n     * Execute command editor\n     *\n     * @method execCommand\n     * @param  {string} command command. It supports all the {@link https://developer.mozilla.org/ru/docs/Web/API/Document/execCommand#commands} and a number of its own\n     * for example applyCSSProperty. Comand fontSize receives the second parameter px, formatBlock and can take several options\n     * @param  {boolean|string|int} second\n     * @param  {boolean|string|int} third\n     * @fires beforeCommand\n     * @fires afterCommand\n     * @example\n     * ```javascript\n     * this.execCommand('fontSize', 12); // sets the size of 12 px\n     * this.execCommand('underline');\n     * this.execCommand('formatBlock', 'p'); // will be inserted paragraph\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3302,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Execute command editor",
      "kind": "function",
      "name": "execCommand",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "command. It supports all the {@link https://developer.mozilla.org/ru/docs/Web/API/Document/execCommand#commands} and a number of its own\nfor example applyCSSProperty. Comand fontSize receives the second parameter px, formatBlock and can take several options",
          "name": "command"
        },
        {
          "type": {
            "names": [
              "boolean",
              "string",
              "int"
            ]
          },
          "name": "second"
        },
        {
          "type": {
            "names": [
              "boolean",
              "string",
              "int"
            ]
          },
          "name": "third"
        }
      ],
      "fires": [
        "event:beforeCommand",
        "event:afterCommand"
      ],
      "examples": [
        "```javascript\nthis.execCommand('fontSize', 12); // sets the size of 12 px\nthis.execCommand('underline');\nthis.execCommand('formatBlock', 'p'); // will be inserted paragraph\n```"
      ],
      "longname": "execCommand",
      "scope": "global",
      "___id": "T000002R000931",
      "___s": true
    },
    {
      "comment": "/**\n         * Called before any command\n         * @event beforeCommand\n         * @param {string} command Command name in lowercase\n         * @param {string} second The second parameter for the command\n         * @param {string} third The third option is for the team\n         * @example\n         * ```javascript\n         * parent.events.on('beforeCommand', function (command) {\n         *  if (command === 'justifyCenter') {\n         *      var p = parent.getDocument().createElement('p')\n         *      parent.selection.insertNode(p)\n         *      parent.selection.setCursorIn(p);\n         *      p.style.textAlign = 'justyfy';\n         *      return false; // break execute native command\n         *  }\n         * })\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3327,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Called before any command",
      "kind": "event",
      "name": "beforeCommand",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Command name in lowercase",
          "name": "command"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The second parameter for the command",
          "name": "second"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The third option is for the team",
          "name": "third"
        }
      ],
      "examples": [
        "```javascript\nparent.events.on('beforeCommand', function (command) {\n if (command === 'justifyCenter') {\n     var p = parent.getDocument().createElement('p')\n     parent.selection.insertNode(p)\n     parent.selection.setCursorIn(p);\n     p.style.textAlign = 'justyfy';\n     return false; // break execute native command\n }\n})\n```"
      ],
      "longname": "event:beforeCommand",
      "scope": "global",
      "___id": "T000002R000937",
      "___s": true
    },
    {
      "comment": "/**\n         * It called after any command\n         * @event afterCommand\n         * @param {string} command name command\n         * @param {*} second The second parameter for the command\n         * @param {*} third The third option is for the team\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3364,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "It called after any command",
      "kind": "event",
      "name": "afterCommand",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "name command",
          "name": "command"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The second parameter for the command",
          "name": "second"
        },
        {
          "type": {
            "names": [
              "*"
            ]
          },
          "description": "The third option is for the team",
          "name": "third"
        }
      ],
      "longname": "event:afterCommand",
      "scope": "global",
      "___id": "T000002R000941",
      "___s": true
    },
    {
      "comment": "/**\n     * Disable selecting\n     */",
      "meta": {
        "range": [
          125174,
          125463
        ],
        "filename": "jodit.js",
        "lineno": 3378,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013147",
          "name": "Jodit.prototype.lock",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "name"
          ]
        },
        "vars": {
          "name": "<anonymous>~Jodit#lock~name",
          "this.__whoLocked": "<anonymous>~Jodit#__whoLocked",
          "this.__selectionLocked": "<anonymous>~Jodit#__selectionLocked"
        }
      },
      "description": "Disable selecting",
      "name": "lock",
      "longname": "<anonymous>~Jodit#lock",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000942",
      "___s": true
    },
    {
      "comment": "/**\n     * Enable selecting\n     */",
      "meta": {
        "range": [
          125509,
          125809
        ],
        "filename": "jodit.js",
        "lineno": 3389,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013201",
          "name": "Jodit.prototype.unlock",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "this.__whoLocked": "<anonymous>~Jodit#__whoLocked"
        }
      },
      "description": "Enable selecting",
      "name": "unlock",
      "longname": "<anonymous>~Jodit#unlock",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000946",
      "___s": true
    },
    {
      "comment": "/**\n     * Return current editor mode: Jodit.MODE_WYSIWYG, Jodit.MODE_SOURCE or Jodit.MODE_SPLIT\n     * @return {number}\n     */",
      "meta": {
        "range": [
          125948,
          126019
        ],
        "filename": "jodit.js",
        "lineno": 3402,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013247",
          "name": "Jodit.prototype.getMode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Return current editor mode: Jodit.MODE_WYSIWYG, Jodit.MODE_SOURCE or Jodit.MODE_SPLIT",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "getMode",
      "longname": "<anonymous>~Jodit#getMode",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000948",
      "___s": true
    },
    {
      "comment": "/**\n     * Return current real work mode. When editor in MODE_SOURCE or MODE_WYSIWYG it will return them, but then editor in MODE_SPLIT it will return MODE_SOURCE if Textarea(CodeMirror) focused or MODE_WYSIWYG otherwise\n     *\n     * @example\n     * ```javascript\n     * var editor = new Jodit('#editor');\n     * console.log(editor.getRealMode());\n     * ```\n     */",
      "meta": {
        "range": [
          126512,
          126927
        ],
        "filename": "jodit.js",
        "lineno": 3417,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013278",
          "name": "Jodit.prototype.getRealMode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "active": "<anonymous>~Jodit#getRealMode~active"
        }
      },
      "description": "Return current real work mode. When editor in MODE_SOURCE or MODE_WYSIWYG it will return them, but then editor in MODE_SPLIT it will return MODE_SOURCE if Textarea(CodeMirror) focused or MODE_WYSIWYG otherwise",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor');\nconsole.log(editor.getRealMode());\n```"
      ],
      "name": "getRealMode",
      "longname": "<anonymous>~Jodit#getRealMode",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000950",
      "___s": true
    },
    {
      "comment": "/**\n     * Set current mode\n     *\n     * @fired beforeSetMode\n     * @fired afterSetMode\n     */",
      "meta": {
        "range": [
          127035,
          128891
        ],
        "filename": "jodit.js",
        "lineno": 3433,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013345",
          "name": "Jodit.prototype.setMode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "mode"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Jodit#setMode~_this",
          "oldmode": "<anonymous>~Jodit#setMode~oldmode",
          "data": "<anonymous>~Jodit#setMode~data",
          "modeClasses": "<anonymous>~Jodit#setMode~modeClasses",
          "this.mode": "<anonymous>~Jodit#mode",
          "": null
        }
      },
      "description": "Set current mode",
      "tags": [
        {
          "originalTitle": "fired",
          "title": "fired",
          "text": "beforeSetMode",
          "value": "beforeSetMode"
        },
        {
          "originalTitle": "fired",
          "title": "fired",
          "text": "afterSetMode",
          "value": "afterSetMode"
        }
      ],
      "name": "setMode",
      "longname": "<anonymous>~Jodit#setMode",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000952",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered before {@link Jodit~setMode|setMode} executed. If returned false method stopped\n         * @event beforeSetMode\n         * @param {Object} data PlainObject {mode: {string}} In handler you can change data.mode\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('beforeSetMode', function (data) {\n         *     data.mode = Jodit.MODE_SOURCE; // not respond to the mode change. Always make the source code mode\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3439,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered before {@link Jodit~setMode|setMode} executed. If returned false method stopped",
      "kind": "event",
      "name": "beforeSetMode",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "PlainObject {mode: {string}} In handler you can change data.mode",
          "name": "data"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('beforeSetMode', function (data) {\n    data.mode = Jodit.MODE_SOURCE; // not respond to the mode change. Always make the source code mode\n});\n```"
      ],
      "longname": "event:beforeSetMode",
      "scope": "global",
      "___id": "T000002R000958",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered after {@link Jodit~setMode|setMode} executed\n         * @event afterSetMode\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('afterSetMode', function () {\n         *     editor.setEditorValue(''); // clear editor's value after change mode\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3462,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered after {@link Jodit~setMode|setMode} executed",
      "kind": "event",
      "name": "afterSetMode",
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('afterSetMode', function () {\n    editor.setEditorValue(''); // clear editor's value after change mode\n});\n```"
      ],
      "longname": "event:afterSetMode",
      "scope": "global",
      "___id": "T000002R000960",
      "___s": true
    },
    {
      "comment": "/**\n     * Toggle editor mode WYSIWYG to TEXTAREA(CodeMirror) to SPLIT(WYSIWYG and TEXTAREA) to again WYSIWYG\n     *\n     * @example\n     * ```javascript\n     * var editor = new Jodit('#editor');\n     * editor.toggleMode();\n     * ```\n     */",
      "meta": {
        "range": [
          129144,
          129490
        ],
        "filename": "jodit.js",
        "lineno": 3486,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013494",
          "name": "Jodit.prototype.toggleMode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "mode": "<anonymous>~Jodit#toggleMode~mode"
        }
      },
      "description": "Toggle editor mode WYSIWYG to TEXTAREA(CodeMirror) to SPLIT(WYSIWYG and TEXTAREA) to again WYSIWYG",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor');\neditor.toggleMode();\n```"
      ],
      "name": "toggleMode",
      "longname": "<anonymous>~Jodit#toggleMode",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000961",
      "___s": true
    },
    {
      "comment": "/**\n     * Internationalization method. Uses Jodit.lang object\n     *\n     * @param {string} key Some text\n     * @param {string[]} params Some text\n     * @return {string}\n     * @example\n     * ```javascript\n     * var editor = new Jodit(\"#redactor\", {\n     *      langusage: 'ru'\n     * });\n     * console.log(editor.i18n('Cancel')) //Отмена;\n     *\n     * Jodit.defaultOptions.language = 'ru';\n     * console.log(Jodit.prototype.i18n('Cancel')) //Отмена\n     *\n     * Jodit.lang.cs = {\n     *    Cancel: 'Zrušit'\n     * };\n     * Jodit.defaultOptions.language = 'cs';\n     * console.log(Jodit.prototype.i18n('Cancel')) //Zrušit\n     *\n     * Jodit.lang.cs = {\n     *    'Hello world': 'Hello \\s Good \\s'\n     * };\n     * Jodit.defaultOptions.language = 'cs';\n     * console.log(Jodit.prototype.i18n('Hello world', 'mr.Perkins', 'day')) //Hello mr.Perkins Good day\n     * ```\n     */",
      "meta": {
        "range": [
          130387,
          132052
        ],
        "filename": "jodit.js",
        "lineno": 3525,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013553",
          "name": "Jodit.prototype.i18n",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "key"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Jodit#i18n~_this",
          "params": "<anonymous>~Jodit#i18n~params",
          "_i": "<anonymous>~Jodit#i18n~_i",
          "params[undefined]": "<anonymous>~Jodit#i18n~params.undefined]",
          "debug": "<anonymous>~Jodit#i18n~debug",
          "store": "<anonymous>~Jodit#i18n~store",
          "parse": "<anonymous>~Jodit#i18n~parse",
          "": null,
          "default_language": "<anonymous>~Jodit#i18n~default_language",
          "language": "<anonymous>~Jodit#i18n~language"
        }
      },
      "description": "Internationalization method. Uses Jodit.lang object",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Some text",
          "name": "key"
        },
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "description": "Some text",
          "name": "params"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\", {\n     langusage: 'ru'\n});\nconsole.log(editor.i18n('Cancel')) //Отмена;\n\nJodit.defaultOptions.language = 'ru';\nconsole.log(Jodit.prototype.i18n('Cancel')) //Отмена\n\nJodit.lang.cs = {\n   Cancel: 'Zrušit'\n};\nJodit.defaultOptions.language = 'cs';\nconsole.log(Jodit.prototype.i18n('Cancel')) //Zrušit\n\nJodit.lang.cs = {\n   'Hello world': 'Hello \\s Good \\s'\n};\nJodit.defaultOptions.language = 'cs';\nconsole.log(Jodit.prototype.i18n('Hello world', 'mr.Perkins', 'day')) //Hello mr.Perkins Good day\n```"
      ],
      "name": "i18n",
      "longname": "<anonymous>~Jodit#i18n",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000965",
      "___s": true
    },
    {
      "comment": "/**\n     * Switch on/off the editor into the disabled state.\n     * When in disabled, the user is not able to change the editor content\n     * This function firing the `disabled` event.\n     *\n     * @param {boolean} isDisabled\n     */",
      "meta": {
        "range": [
          132298,
          132777
        ],
        "filename": "jodit.js",
        "lineno": 3569,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013839",
          "name": "Jodit.prototype.setDisabled",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "isDisabled"
          ]
        },
        "vars": {
          "this.options.disabled": "<anonymous>~Jodit#options.disabled",
          "readOnly": "<anonymous>~Jodit#setDisabled~readOnly",
          "this.__wasReadOnly": "<anonymous>~Jodit#__wasReadOnly"
        }
      },
      "description": "Switch on/off the editor into the disabled state.\nWhen in disabled, the user is not able to change the editor content\nThis function firing the `disabled` event.",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "isDisabled"
        }
      ],
      "name": "setDisabled",
      "longname": "<anonymous>~Jodit#setDisabled",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000978",
      "___s": true
    },
    {
      "comment": "/**\n     * Return true if editor in disabled mode\n     */",
      "meta": {
        "range": [
          132845,
          132932
        ],
        "filename": "jodit.js",
        "lineno": 3583,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013914",
          "name": "Jodit.prototype.getDisabled",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Return true if editor in disabled mode",
      "name": "getDisabled",
      "longname": "<anonymous>~Jodit#getDisabled",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000982",
      "___s": true
    },
    {
      "comment": "/**\n     * Switch on/off the editor into the read-only state.\n     * When in readonly, the user is not able to change the editor content, but can still use some editor functions (show source code, print content, or seach).\n     * This function firing the `readonly` event.\n     *\n     * @param {boolean} isReadOnly\n     */",
      "meta": {
        "range": [
          133265,
          133769
        ],
        "filename": "jodit.js",
        "lineno": 3593,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100013929",
          "name": "Jodit.prototype.setReadOnly",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "isReadOnly"
          ]
        },
        "vars": {
          "this.__wasReadOnly": "<anonymous>~Jodit#__wasReadOnly",
          "this.options.readonly": "<anonymous>~Jodit#options.readonly"
        }
      },
      "description": "Switch on/off the editor into the read-only state.\nWhen in readonly, the user is not able to change the editor content, but can still use some editor functions (show source code, print content, or seach).\nThis function firing the `readonly` event.",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "isReadOnly"
        }
      ],
      "name": "setReadOnly",
      "longname": "<anonymous>~Jodit#setReadOnly",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000983",
      "___s": true
    },
    {
      "comment": "/**\n     * Return true if editor in read-only mode\n     */",
      "meta": {
        "range": [
          133838,
          133925
        ],
        "filename": "jodit.js",
        "lineno": 3610,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100014003",
          "name": "Jodit.prototype.getReadOnly",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Return true if editor in read-only mode",
      "name": "getReadOnly",
      "longname": "<anonymous>~Jodit#getReadOnly",
      "kind": "function",
      "memberof": "<anonymous>~Jodit",
      "scope": "instance",
      "___id": "T000002R000986",
      "___s": true
    },
    {
      "comment": "/**\n         * Return default timeout period in milliseconds for some debounce or throttle functions. By default return {observer.timeout} options\n         *\n         * @return {number}\n         */",
      "meta": {
        "range": [
          134204,
          134364
        ],
        "filename": "jodit.js",
        "lineno": 3619,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100014027",
          "name": "get",
          "type": "FunctionExpression"
        }
      },
      "description": "Return default timeout period in milliseconds for some debounce or throttle functions. By default return {observer.timeout} options",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "get",
      "longname": "get",
      "kind": "function",
      "scope": "global",
      "___id": "T000002R000987",
      "___s": true
    },
    {
      "comment": "/**\n     * Return SVG icon\n     *\n     * @param {string} name icon\n     * @param {string} [defaultValue='<span></span>']\n     * @return {string}\n     */",
      "meta": {
        "range": [
          135907,
          136134
        ],
        "filename": "jodit.js",
        "lineno": 3678,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100014253",
          "name": "ToolbarIcon.getIcon",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "name",
            "defaultValue"
          ]
        },
        "vars": {
          "defaultValue": "<anonymous>~ToolbarIcon.getIcon~defaultValue"
        }
      },
      "description": "Return SVG icon",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "icon",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "defaultvalue": "'<span></span>'",
          "name": "defaultValue"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "name": "getIcon",
      "longname": "<anonymous>~ToolbarIcon.getIcon",
      "kind": "function",
      "memberof": "<anonymous>~ToolbarIcon",
      "scope": "static",
      "___id": "T000002R001008",
      "___s": true
    },
    {
      "comment": "/**\n * Module to generate dialog windows\n *\n * @param {Object} parent Jodit main object\n * @param {Object} [opt] Extend Options\n */",
      "meta": {
        "range": [
          138455,
          156899
        ],
        "filename": "jodit.js",
        "lineno": 3760,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100014621",
          "name": "Dialog",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Module to generate dialog windows",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Jodit main object",
          "name": "parent"
        },
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "optional": true,
          "description": "Extend Options",
          "name": "opt"
        }
      ],
      "name": "Dialog",
      "longname": "<anonymous>~Dialog",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R001051",
      "___s": true
    },
    {
      "comment": "/**\n         * Closes the dialog box , if you want to call the method {@link Dialog~destruct|destruct}\n         *\n         * @see destroy\n         * @method close\n         * @fires beforeClose\n         * @fires afterClose\n         * @example\n         * ```javascript\n         * //You can close dialog two ways\n         * var dialog = new Jodit.modules.Dialog();\n         * dialog.open('Hello world!', 'Title');\n         * var $close = Jodit.modules.helper.dom('<a href=\"javascript:void(0)\" style=\"float:left;\" class=\"jodit_button\"><i class=\"icon icon-check\"></i>&nbsp;' + Jodit.prototype.i18n('Ok') + '</a>');\n         * $close.addEventListener('click', function () {\n         *     dialog.close();\n         * });\n         * dialog.setFooter($close);\n         * // and second way, you can close dialog from content\n         * dialog.open('<a onclick=\"var event = doc.createEvent('HTMLEvents'); event.initEvent('close_dialog', true, true); this.dispatchEvent(event)\">Close</a>', 'Title');\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3783,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Closes the dialog box , if you want to call the method {@link Dialog~destruct|destruct}",
      "see": [
        "destroy"
      ],
      "kind": "function",
      "name": "close",
      "fires": [
        "event:beforeClose",
        "event:afterClose"
      ],
      "examples": [
        "```javascript\n//You can close dialog two ways\nvar dialog = new Jodit.modules.Dialog();\ndialog.open('Hello world!', 'Title');\nvar $close = Jodit.modules.helper.dom('<a href=\"javascript:void(0)\" style=\"float:left;\" class=\"jodit_button\"><i class=\"icon icon-check\"></i>&nbsp;' + Jodit.prototype.i18n('Ok') + '</a>');\n$close.addEventListener('click', function () {\n    dialog.close();\n});\ndialog.setFooter($close);\n// and second way, you can close dialog from content\ndialog.open('<a onclick=\"var event = doc.createEvent('HTMLEvents'); event.initEvent('close_dialog', true, true); this.dispatchEvent(event)\">Close</a>', 'Title');\n```"
      ],
      "longname": "close",
      "scope": "global",
      "___id": "T000002R001073",
      "___s": true
    },
    {
      "comment": "/**\n             * Called up to close the window\n             *\n             * @event beforeClose\n             * @this {Dialog} current dialog\n             */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3812,
        "columnno": 12,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Called up to close the window",
      "kind": "event",
      "name": "beforeClose",
      "this": "{Dialog}",
      "longname": "event:beforeClose",
      "scope": "global",
      "___id": "T000002R001075",
      "___s": true
    },
    {
      "comment": "/**\n             * It called after the window is closed\n             *\n             * @event afterClose\n             * @this {Dialog} current dialog\n             */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 3828,
        "columnno": 12,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "It called after the window is closed",
      "kind": "event",
      "name": "afterClose",
      "this": "{Dialog}",
      "longname": "event:afterClose",
      "scope": "global",
      "___id": "T000002R001076",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies the size of the window\n     *\n     * @param {number} [w] - The width of the window\n     * @param {number} [h] - The height of the window\n     */",
      "meta": {
        "range": [
          144810,
          145019
        ],
        "filename": "jodit.js",
        "lineno": 3901,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015321",
          "name": "Dialog.prototype.setSize",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "w",
            "h"
          ]
        }
      },
      "description": "Specifies the size of the window",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The width of the window",
          "name": "w"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "optional": true,
          "description": "The height of the window",
          "name": "h"
        }
      ],
      "name": "setSize",
      "longname": "<anonymous>~Dialog#setSize",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001092",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies the position of the upper left corner of the window . If x and y are specified, the window is centered on the center of the screen\n     *\n     * @param {Number} [x] - Position px Horizontal\n     * @param {Number} [y] - Position px Vertical\n     */",
      "meta": {
        "range": [
          145298,
          145813
        ],
        "filename": "jodit.js",
        "lineno": 3915,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015358",
          "name": "Dialog.prototype.setPosition",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "x",
            "y"
          ]
        },
        "vars": {
          "w": "<anonymous>~Dialog#setPosition~w",
          "h": "<anonymous>~Dialog#setPosition~h",
          "left": "<anonymous>~Dialog#setPosition~left",
          "top": "<anonymous>~Dialog#setPosition~top",
          "this.offsetX": "<anonymous>~Dialog#setPosition#offsetX",
          "this.offsetY": "<anonymous>~Dialog#setPosition#offsetY",
          "this.moved": "<anonymous>~Dialog#setPosition#moved",
          "this.dialog.style.left": "<anonymous>~Dialog#setPosition#dialog.style.left",
          "this.dialog.style.top": "<anonymous>~Dialog#setPosition#dialog.style.top"
        }
      },
      "description": "Specifies the position of the upper left corner of the window . If x and y are specified, the window is centered on the center of the screen",
      "params": [
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Position px Horizontal",
          "name": "x"
        },
        {
          "type": {
            "names": [
              "Number"
            ]
          },
          "optional": true,
          "description": "Position px Vertical",
          "name": "y"
        }
      ],
      "name": "setPosition",
      "longname": "<anonymous>~Dialog#setPosition",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001093",
      "___s": true
    },
    {
      "comment": "/**\n     * Specifies the dialog box title . It can take a string and an array of objects\n     *\n     * @param {string|string[]|Element|Element[]} content - A string or an HTML element , or an array of strings and elements\n     * @example\n     * ```javascript\n     * var dialog = new Jodi.modules.Dialog(parent);\n     * dialog.setTitle('Hello world');\n     * dialog.setTitle(['Hello world', '<button>OK</button>', $('<div>some</div>')]);\n     * dialog.open();\n     * ```\n     */",
      "meta": {
        "range": [
          146891,
          147003
        ],
        "filename": "jodit.js",
        "lineno": 3953,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015576",
          "name": "Dialog.prototype.setTitle",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "content"
          ]
        }
      },
      "description": "Specifies the dialog box title . It can take a string and an array of objects",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Array.<string>",
              "Element",
              "Array.<Element>"
            ]
          },
          "description": "A string or an HTML element , or an array of strings and elements",
          "name": "content"
        }
      ],
      "examples": [
        "```javascript\nvar dialog = new Jodi.modules.Dialog(parent);\ndialog.setTitle('Hello world');\ndialog.setTitle(['Hello world', '<button>OK</button>', $('<div>some</div>')]);\ndialog.open();\n```"
      ],
      "name": "setTitle",
      "longname": "<anonymous>~Dialog#setTitle",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001107",
      "___s": true
    },
    {
      "comment": "/**\n     * It specifies the contents of the dialog box. It can take a string and an array of objects\n     *\n     * @param {string|string[]|Element|Element[]} content A string or an HTML element , or an array of strings and elements\n     * @example\n     * ```javascript\n     * var dialog = new Jodi.modules.Dialog(parent);\n     * dialog.setTitle('Hello world');\n     * dialog.setContent('<form onsubmit=\"alert(1);\"><input type=\"text\" /></form>');\n     * dialog.open();\n     * ```\n     */",
      "meta": {
        "range": [
          147500,
          147615
        ],
        "filename": "jodit.js",
        "lineno": 3968,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015595",
          "name": "Dialog.prototype.setContent",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "content"
          ]
        }
      },
      "description": "It specifies the contents of the dialog box. It can take a string and an array of objects",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Array.<string>",
              "Element",
              "Array.<Element>"
            ]
          },
          "description": "A string or an HTML element , or an array of strings and elements",
          "name": "content"
        }
      ],
      "examples": [
        "```javascript\nvar dialog = new Jodi.modules.Dialog(parent);\ndialog.setTitle('Hello world');\ndialog.setContent('<form onsubmit=\"alert(1);\"><input type=\"text\" /></form>');\ndialog.open();\n```"
      ],
      "name": "setContent",
      "longname": "<anonymous>~Dialog#setContent",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001108",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the bottom of the dialog. It can take a string and an array of objects\n     *\n     * @param {string|string[]|Element|Element[]} content - A string or an HTML element , or an array of strings and elements\n     * @example\n     * ```javascript\n     * var dialog = new Jodi.modules.Dialog(parent);\n     * dialog.setTitle('Hello world');\n     * dialog.setContent('<form><input id=\"someText\" type=\"text\" /></form>');\n     * dialog.setFooter([\n     *  $('<a class=\"jodit_button\">OK</a>').click(function () {\n     *      alert($('someText').val())\n     *      dialog.close();\n     *  })\n     * ]);\n     * dialog.open();\n     * ```\n     */",
      "meta": {
        "range": [
          148272,
          148449
        ],
        "filename": "jodit.js",
        "lineno": 3989,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015614",
          "name": "Dialog.prototype.setFooter",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "content"
          ]
        }
      },
      "description": "Sets the bottom of the dialog. It can take a string and an array of objects",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Array.<string>",
              "Element",
              "Array.<Element>"
            ]
          },
          "description": "A string or an HTML element , or an array of strings and elements",
          "name": "content"
        }
      ],
      "examples": [
        "```javascript\nvar dialog = new Jodi.modules.Dialog(parent);\ndialog.setTitle('Hello world');\ndialog.setContent('<form><input id=\"someText\" type=\"text\" /></form>');\ndialog.setFooter([\n $('<a class=\"jodit_button\">OK</a>').click(function () {\n     alert($('someText').val())\n     dialog.close();\n })\n]);\ndialog.open();\n```"
      ],
      "name": "setFooter",
      "longname": "<anonymous>~Dialog#setFooter",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001109",
      "___s": true
    },
    {
      "comment": "/**\n     * Return current Z-index\n     * @return {number}\n     */",
      "meta": {
        "range": [
          148525,
          148638
        ],
        "filename": "jodit.js",
        "lineno": 3997,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015646",
          "name": "Dialog.prototype.getZIndex",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Return current Z-index",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "getZIndex",
      "longname": "<anonymous>~Dialog#getZIndex",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001110",
      "___s": true
    },
    {
      "comment": "/**\n     * Get dialog instance with maximum z-index displaying it on top of all the dialog boxes\n     *\n     * @return {Dialog}\n     */",
      "meta": {
        "range": [
          148784,
          149264
        ],
        "filename": "jodit.js",
        "lineno": 4005,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015668",
          "name": "Dialog.prototype.getMaxZIndexDialog",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "maxzi": "<anonymous>~Dialog#getMaxZIndexDialog~maxzi",
          "dlg": "<anonymous>~Dialog#getMaxZIndexDialog~dlg",
          "zIndex": "<anonymous>~Dialog#getMaxZIndexDialog~zIndex",
          "res": "<anonymous>~Dialog#getMaxZIndexDialog~res",
          "": null
        }
      },
      "description": "Get dialog instance with maximum z-index displaying it on top of all the dialog boxes",
      "returns": [
        {
          "type": {
            "names": [
              "Dialog"
            ]
          }
        }
      ],
      "name": "getMaxZIndexDialog",
      "longname": "<anonymous>~Dialog#getMaxZIndexDialog",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001111",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the maximum z-index dialog box, displaying it on top of all the dialog boxes\n     */",
      "meta": {
        "range": [
          149375,
          149769
        ],
        "filename": "jodit.js",
        "lineno": 4020,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015746",
          "name": "Dialog.prototype.setMaxZIndex",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "maxzi": "<anonymous>~Dialog#setMaxZIndex~maxzi",
          "zIndex": "<anonymous>~Dialog#setMaxZIndex~zIndex",
          "": null,
          "this.container.style.zIndex": "<anonymous>~Dialog#setMaxZIndex#container.style.zIndex"
        }
      },
      "description": "Sets the maximum z-index dialog box, displaying it on top of all the dialog boxes",
      "name": "setMaxZIndex",
      "longname": "<anonymous>~Dialog#setMaxZIndex",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001120",
      "___s": true
    },
    {
      "comment": "/**\n     * Expands the dialog on full browser window\n     *\n     * @param {boolean} condition true - fullsize\n     * @return {boolean} true - fullsize\n     */",
      "meta": {
        "range": [
          149938,
          150490
        ],
        "filename": "jodit.js",
        "lineno": 4035,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015818",
          "name": "Dialog.prototype.maximization",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "condition"
          ]
        },
        "vars": {
          "condition": "<anonymous>~Dialog#maximization~condition",
          "": null,
          "this.iSetMaximization": "<anonymous>~Dialog#maximization#iSetMaximization"
        }
      },
      "description": "Expands the dialog on full browser window",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "true - fullsize",
          "name": "condition"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "true - fullsize"
        }
      ],
      "name": "maximization",
      "longname": "<anonymous>~Dialog#maximization",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001126",
      "___s": true
    },
    {
      "comment": "/**\n     * It opens a dialog box to center it, and causes the two event.\n     *\n     * @param {string|string[]|Element|Element[]} [content]  specifies the contents of the dialog box. Can be false или undefined. see {@link Dialog~setContent|setContent}\n     * @param {string|string[]|Element|Element[]} [title]  specifies the title of the dialog box, @see setTitle\n     * @param {boolean} [destroyAfter] true - After closing the window , the destructor will be called. see {@link Dialog~destruct|destruct}\n     * @param {boolean} [modal] - true window will be opened in modal mode\n     * @fires {@link event:beforeOpen} id returns 'false' then the window will not open\n     * @fires {@link event:afterOpen}\n     */",
      "meta": {
        "range": [
          151214,
          152318
        ],
        "filename": "jodit.js",
        "lineno": 4057,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100015897",
          "name": "Dialog.prototype.open",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "content",
            "title",
            "destroyAfter",
            "modal"
          ]
        },
        "vars": {
          "this.destroyAfterClose": "<anonymous>~Dialog#open#destroyAfterClose"
        }
      },
      "description": "It opens a dialog box to center it, and causes the two event.",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "Array.<string>",
              "Element",
              "Array.<Element>"
            ]
          },
          "optional": true,
          "description": "specifies the contents of the dialog box. Can be false или undefined. see {@link Dialog~setContent|setContent}",
          "name": "content"
        },
        {
          "type": {
            "names": [
              "string",
              "Array.<string>",
              "Element",
              "Array.<Element>"
            ]
          },
          "optional": true,
          "description": "specifies the title of the dialog box, @see setTitle",
          "name": "title"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "true - After closing the window , the destructor will be called. see {@link Dialog~destruct|destruct}",
          "name": "destroyAfter"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "true window will be opened in modal mode",
          "name": "modal"
        }
      ],
      "fires": [
        "event:{@link event:beforeOpen} id returns 'false' then the window will not open",
        "event:{@link event:afterOpen}"
      ],
      "name": "open",
      "longname": "<anonymous>~Dialog#open",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001129",
      "___s": true
    },
    {
      "comment": "/**\n         * Called before the opening of the dialog box\n         *\n         * @event beforeOpen\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4058,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Called before the opening of the dialog box",
      "kind": "event",
      "name": "beforeOpen",
      "longname": "event:beforeOpen",
      "scope": "global",
      "___id": "T000002R001130",
      "___s": true
    },
    {
      "comment": "/**\n         * Called after the opening of the dialog box\n         *\n         * @event afterOpen\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4084,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Called after the opening of the dialog box",
      "kind": "event",
      "name": "afterOpen",
      "longname": "event:afterOpen",
      "scope": "global",
      "___id": "T000002R001132",
      "___s": true
    },
    {
      "comment": "/**\n     * Open if the current window\n     *\n     * @return {boolean} - true window open\n     */",
      "meta": {
        "range": [
          152425,
          152556
        ],
        "filename": "jodit.js",
        "lineno": 4098,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100016038",
          "name": "Dialog.prototype.isOpened",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Open if the current window",
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "- true window open"
        }
      ],
      "name": "isOpened",
      "longname": "<anonymous>~Dialog#isOpened",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001133",
      "___s": true
    },
    {
      "comment": "/**\n                 * Fired when dialog box is finished to resizing\n                 * @event endResize\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4107,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired when dialog box is finished to resizing",
      "kind": "event",
      "name": "endResize",
      "longname": "event:endResize",
      "scope": "global",
      "___id": "T000002R001137",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {MouseEvent} e\n     */",
      "meta": {
        "range": [
          153104,
          153857
        ],
        "filename": "jodit.js",
        "lineno": 4119,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100016119",
          "name": "Dialog.prototype.onHeaderMouseDown",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "e"
          ]
        },
        "vars": {
          "target": "<anonymous>~Dialog#onHeaderMouseDown~target",
          "this.draggable": "<anonymous>~Dialog#onHeaderMouseDown#draggable",
          "this.startX": "<anonymous>~Dialog#onHeaderMouseDown#startX",
          "this.startY": "<anonymous>~Dialog#onHeaderMouseDown#startY",
          "this.startPoint.x": "<anonymous>~Dialog#onHeaderMouseDown#startPoint.x",
          "this.startPoint.y": "<anonymous>~Dialog#onHeaderMouseDown#startPoint.y"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "MouseEvent"
            ]
          },
          "name": "e"
        }
      ],
      "name": "onHeaderMouseDown",
      "longname": "<anonymous>~Dialog#onHeaderMouseDown",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001138",
      "___s": true
    },
    {
      "comment": "/**\n             * Fired when dialog box is started moving\n             * @event startMove\n             */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4133,
        "columnno": 12,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired when dialog box is started moving",
      "kind": "event",
      "name": "startMove",
      "longname": "event:startMove",
      "scope": "global",
      "___id": "T000002R001145",
      "___s": true
    },
    {
      "comment": "/**\n                 * Fired when dialog box is moved\n                 * @event move\n                 * @param {int} dx Delta X\n                 * @param {int} dy Delta Y\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4144,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired when dialog box is moved",
      "kind": "event",
      "name": "move",
      "params": [
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Delta X",
          "name": "dx"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Delta Y",
          "name": "dy"
        }
      ],
      "longname": "event:move",
      "scope": "global",
      "___id": "T000002R001147",
      "___s": true
    },
    {
      "comment": "/**\n                 * Fired when dialog box is resized\n                 * @event resizeDialog\n                 * @param {int} dx Delta X\n                 * @param {int} dy Delta Y\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4158,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired when dialog box is resized",
      "kind": "event",
      "name": "resizeDialog",
      "params": [
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Delta X",
          "name": "dx"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Delta Y",
          "name": "dy"
        }
      ],
      "longname": "event:resizeDialog",
      "scope": "global",
      "___id": "T000002R001148",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {MouseEvent} e\n     */",
      "meta": {
        "range": [
          155258,
          155600
        ],
        "filename": "jodit.js",
        "lineno": 4174,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100016429",
          "name": "Dialog.prototype.onKeyDown",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "e"
          ]
        },
        "vars": {
          "me": "<anonymous>~Dialog#onKeyDown~me"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "MouseEvent"
            ]
          },
          "name": "e"
        }
      ],
      "name": "onKeyDown",
      "longname": "<anonymous>~Dialog#onKeyDown",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001149",
      "___s": true
    },
    {
      "comment": "/**\n     * It destroys all objects created for the windows and also includes all the handlers for the window object\n     */",
      "meta": {
        "range": [
          155935,
          156345
        ],
        "filename": "jodit.js",
        "lineno": 4194,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100016520",
          "name": "Dialog.prototype.destruct",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "this.__isDestructed": "<anonymous>~Dialog#destruct#__isDestructed"
        }
      },
      "description": "It destroys all objects created for the windows and also includes all the handlers for the window object",
      "name": "destruct",
      "longname": "<anonymous>~Dialog#destruct",
      "kind": "function",
      "memberof": "<anonymous>~Dialog",
      "scope": "instance",
      "___id": "T000002R001152",
      "___s": true
    },
    {
      "comment": "/**\n             * Fired when dialog box is started resizing\n             * @event startResize\n             */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4215,
        "columnno": 12,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired when dialog box is started resizing",
      "kind": "event",
      "name": "startResize",
      "longname": "event:startResize",
      "scope": "global",
      "___id": "T000002R001160",
      "___s": true
    },
    {
      "comment": "/**\n * Show `alert` dialog. Work without Jodit object\n *\n * @method Alert\n * @param {string} msg Message\n * @param {string|function} [title] Title or callback\n * @param {function} [callback] callback\n * @param {string} [className]\n * @example\n * ```javascript\n * Jodit.Alert(\"File was uploaded\");\n * Jodit.Alert(\"File was uploaded\", \"Message\");\n * Jodit.Alert(\"File was uploaded\", function() {\n *    $('form').hide();\n * });\n * Jodit.Alert(\"File wasn't uploaded\", \"Error\", function() {\n *    $('form').hide();\n * });\n * ```\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4225,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Show `alert` dialog. Work without Jodit object",
      "kind": "function",
      "name": "Alert",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Message",
          "name": "msg"
        },
        {
          "type": {
            "names": [
              "string",
              "function"
            ]
          },
          "optional": true,
          "description": "Title or callback",
          "name": "title"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "callback",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "name": "className"
        }
      ],
      "examples": [
        "```javascript\nJodit.Alert(\"File was uploaded\");\nJodit.Alert(\"File was uploaded\", \"Message\");\nJodit.Alert(\"File was uploaded\", function() {\n   $('form').hide();\n});\nJodit.Alert(\"File wasn't uploaded\", \"Error\", function() {\n   $('form').hide();\n});\n```"
      ],
      "longname": "Alert",
      "scope": "global",
      "___id": "T000002R001162",
      "___s": true
    },
    {
      "comment": "/**\n * Show `promt` dialog. Work without Jodit object\n *\n * @method Promt\n * @param {string} msg Message\n * @param {string|function} [title] Title or callback\n * @param {function} [callback] callback. The first argument is the value entered\n * @param {string} [placeholder] Placeholder for input\n * @example\n * ```javascript\n * Jodit.Promt(\"Enter your name\", \"Promt Dialog\", function (name) {\n *     if (name.length < 3) {\n *         Jodit.Alert(\"The name must be at least 3 letters\");\n *         return false;\n *     }\n *     // do something\n * });\n * ```\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4266,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Show `promt` dialog. Work without Jodit object",
      "kind": "function",
      "name": "Promt",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Message",
          "name": "msg"
        },
        {
          "type": {
            "names": [
              "string",
              "function"
            ]
          },
          "optional": true,
          "description": "Title or callback",
          "name": "title"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "callback. The first argument is the value entered",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "Placeholder for input",
          "name": "placeholder"
        }
      ],
      "examples": [
        "```javascript\nJodit.Promt(\"Enter your name\", \"Promt Dialog\", function (name) {\n    if (name.length < 3) {\n        Jodit.Alert(\"The name must be at least 3 letters\");\n        return false;\n    }\n    // do something\n});\n```"
      ],
      "longname": "Promt",
      "scope": "global",
      "___id": "T000002R001171",
      "___s": true
    },
    {
      "comment": "/**\n * Show `confirm` dialog. Work without Jodit object\n *\n * @method Confirm\n * @param {string} msg Message\n * @param {string|function} [title] Title or callback\n * @param {function} [callback] callback. The first argument is the value entered\n * @example\n * ```javascript\n * Jodit.Confirm(\"Are you shure?\", \"Confirm Dialog\", function (yes) {\n *     if (yes) {\n *         // do something\n *     }\n * });\n * ```\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4317,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Show `confirm` dialog. Work without Jodit object",
      "kind": "function",
      "name": "Confirm",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Message",
          "name": "msg"
        },
        {
          "type": {
            "names": [
              "string",
              "function"
            ]
          },
          "optional": true,
          "description": "Title or callback",
          "name": "title"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "callback. The first argument is the value entered",
          "name": "callback"
        }
      ],
      "examples": [
        "```javascript\nJodit.Confirm(\"Are you shure?\", \"Confirm Dialog\", function (yes) {\n    if (yes) {\n        // do something\n    }\n});\n```"
      ],
      "longname": "Confirm",
      "scope": "global",
      "___id": "T000002R001183",
      "___s": true
    },
    {
      "comment": "/**\n * Module for processing download documents and images by Drag and Drop\n *\n * @tutorial {@link http://xdsoft.net/jodit/doc/tutorial-uploader-settings.html|Uploader options and Drag and Drop files}\n * @module Uploader\n * @params {Object} parent Jodit main object\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4691,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Module for processing download documents and images by Drag and Drop",
      "tutorials": [
        "{@link http://xdsoft.net/jodit/doc/tutorial-uploader-settings.html|Uploader options and Drag and Drop files}"
      ],
      "kind": "module",
      "name": "Uploader",
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{Object} parent Jodit main object",
          "value": "{Object} parent Jodit main object"
        }
      ],
      "longname": "module:Uploader",
      "___id": "T000002R001322",
      "___s": true
    },
    {
      "comment": "/**\n * @property {boolean} enableDragAndDropFileToEditor=true Enable drag and drop file toWYSIWYG editor\n */",
      "meta": {
        "range": [
          175467,
          175529
        ],
        "filename": "jodit.js",
        "lineno": 4701,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100019046",
          "name": "Config_1.Config.prototype.enableDragAndDropFileToEditor",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": true,
          "description": "Enable drag and drop file toWYSIWYG editor",
          "name": "enableDragAndDropFileToEditor"
        }
      ],
      "name": "Config#enableDragAndDropFileToEditor",
      "longname": "<anonymous>~Config_1.Config#enableDragAndDropFileToEditor",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R001323",
      "___s": true
    },
    {
      "comment": "/**\n     * It sets the path for uploading files\n     * @method setPath\n     * @param {string} path\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4919,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "It sets the path for uploading files",
      "kind": "function",
      "name": "setPath",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "path"
        }
      ],
      "longname": "module:Uploader~setPath",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001405",
      "___s": true
    },
    {
      "comment": "/**\n     * It sets the source for connector\n     *\n     * @method setSource\n     * @param {string} source\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4927,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "It sets the source for connector",
      "kind": "function",
      "name": "setSource",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "source"
        }
      ],
      "longname": "module:Uploader~setSource",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001408",
      "___s": true
    },
    {
      "comment": "/**\n     * Convert dataURI to Blob\n     *\n     * @param {string} dataURI\n     * @return {Blob}\n     */",
      "meta": {
        "range": [
          185630,
          186388
        ],
        "filename": "jodit.js",
        "lineno": 4942,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100020382",
          "name": "Uploader.dataURItoBlob",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "dataURI"
          ]
        },
        "vars": {
          "byteString": "<anonymous>~Uploader.dataURItoBlob~byteString",
          "mimeString": "<anonymous>~Uploader.dataURItoBlob~mimeString",
          "ab": "<anonymous>~Uploader.dataURItoBlob~ab",
          "i": "module:Uploader~i",
          "ia": "<anonymous>~Uploader.dataURItoBlob~ia",
          "ia[undefined]": "<anonymous>~Uploader.dataURItoBlob~ia.undefined]"
        }
      },
      "description": "Convert dataURI to Blob",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "dataURI"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Blob"
            ]
          }
        }
      ],
      "name": "dataURItoBlob",
      "longname": "<anonymous>~Uploader.dataURItoBlob",
      "kind": "function",
      "memberof": "<anonymous>~Uploader",
      "scope": "static",
      "___id": "T000002R001411",
      "___s": true
    },
    {
      "comment": "/**\n     * Set the handlers Drag and Drop toWYSIWYG `$form`\n     *\n     * @method bind\n     * @param {HTMLElement} form Form or any Node on which you can drag and drop the file. In addition will be processed <code>&lt;input type=\"file\" &gt;</code>\n     * @param {function} [handlerSuccess] The function toWYSIWYG be called when a successful uploading files toWYSIWYG the server\n     * @param {function} [handlerError] The function that will be called during a failed download files toWYSIWYG a server\n     * @example\n     * ```javascript\n     * var $form = jQuery('<form><input type=\"text\" typpe=\"file\"></form>');\n     * jQuery('body').append($form);\n     * Jodit.editors.someidfoeditor.uploader.bind($form[0], function (files) {\n     *     var i;\n     *     for (i = 0; i < data.files.length; i += 1) {\n     *         parent.selection.insertImage(data.files[i])\n     *     }\n     * });\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 4956,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Set the handlers Drag and Drop toWYSIWYG `$form`",
      "kind": "function",
      "name": "bind",
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "description": "Form or any Node on which you can drag and drop the file. In addition will be processed <code>&lt;input type=\"file\" &gt;</code>",
          "name": "form"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function toWYSIWYG be called when a successful uploading files toWYSIWYG the server",
          "name": "handlerSuccess"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The function that will be called during a failed download files toWYSIWYG a server",
          "name": "handlerError"
        }
      ],
      "examples": [
        "```javascript\nvar $form = jQuery('<form><input type=\"text\" typpe=\"file\"></form>');\njQuery('body').append($form);\nJodit.editors.someidfoeditor.uploader.bind($form[0], function (files) {\n    var i;\n    for (i = 0; i < data.files.length; i += 1) {\n        parent.selection.insertImage(data.files[i])\n    }\n});\n```"
      ],
      "longname": "module:Uploader~bind",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001421",
      "___s": true
    },
    {
      "comment": "/**\n     * Upload images toWYSIWYG a server by its URL, making it through the connector server.\n     *\n     * @param {string} url\n     * @param {HandlerSuccess} [handlerSuccess]\n     * @param {HandlerError} [handlerError]\n     */",
      "meta": {
        "range": [
          192509,
          193511
        ],
        "filename": "jodit.js",
        "lineno": 5079,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100021127",
          "name": "Uploader.prototype.uploadRemoteImage",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "url",
            "handlerSuccess",
            "handlerError"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Uploader#uploadRemoteImage~_this",
          "uploader": "<anonymous>~Uploader#uploadRemoteImage~uploader",
          "": null
        }
      },
      "description": "Upload images toWYSIWYG a server by its URL, making it through the connector server.",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "url"
        },
        {
          "type": {
            "names": [
              "HandlerSuccess"
            ]
          },
          "optional": true,
          "name": "handlerSuccess"
        },
        {
          "type": {
            "names": [
              "HandlerError"
            ]
          },
          "optional": true,
          "name": "handlerError"
        }
      ],
      "name": "uploadRemoteImage",
      "longname": "<anonymous>~Uploader#uploadRemoteImage",
      "kind": "function",
      "memberof": "<anonymous>~Uploader",
      "scope": "instance",
      "___id": "T000002R001445",
      "___s": true
    },
    {
      "comment": "/**\n     * Build color picker\n     *\n     * @param {Jodit} editor\n     * @param {function} callback Callback 'function (color) {}'\n     * @param {string} [coldColor] Color value ex. #fff or rgb(123, 123, 123) or rgba(123, 123, 123, 1)\n     * @example\n     * ```javascript\n     * $tabs = TabsWidget(editor, {\n     *    'Text' : ColorPickerWidget(editor, function (color) {\n     *         box.style.color = color;\n     *     }, box.style.color),\n     *     'Background' : ColorPickerWidget(editor, function (color) {\n     *         box.style.backgroundColor = color;\n     *     }, box.style.backgroundColor),\n     * });\n     * ```\n     */",
      "meta": {
        "range": [
          194729,
          197733
        ],
        "filename": "jodit.js",
        "lineno": 5143,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100021310",
          "name": "Widget.ColorPickerWidget",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "editor",
            "callback",
            "coldColor"
          ]
        },
        "vars": {
          "valueHex": "<anonymous>~Widget.ColorPickerWidget~valueHex",
          "form": "<anonymous>~Widget.ColorPickerWidget~form",
          "iconEye": "<anonymous>~Widget.ColorPickerWidget~iconEye",
          "iconEraser": "<anonymous>~Widget.ColorPickerWidget~iconEraser",
          "eachColor": "<anonymous>~Widget.ColorPickerWidget~eachColor",
          "": null
        }
      },
      "description": "Build color picker",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Callback 'function (color) {}'",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "Color value ex. #fff or rgb(123, 123, 123) or rgba(123, 123, 123, 1)",
          "name": "coldColor"
        }
      ],
      "examples": [
        "```javascript\n$tabs = TabsWidget(editor, {\n   'Text' : ColorPickerWidget(editor, function (color) {\n        box.style.color = color;\n    }, box.style.color),\n    'Background' : ColorPickerWidget(editor, function (color) {\n        box.style.backgroundColor = color;\n    }, box.style.backgroundColor),\n});\n```"
      ],
      "name": "ColorPickerWidget",
      "longname": "<anonymous>~Widget.ColorPickerWidget",
      "kind": "function",
      "memberof": "<anonymous>~Widget",
      "scope": "static",
      "___id": "T000002R001457",
      "___s": true
    },
    {
      "comment": "/**\n     * Build tabs system\n     *\n     * @param {Jodit} editor\n     * @param {object} tabs PlainObject where 'key' will be tab's Title and `value` is tab's content\n     * @param {object} state You can use for this param any HTML element for remembering active tab\n     * @param {string} state.activeTab\n     *\n     * @example\n     * ```javascript\n     * let tabs = widget.create('Tabs', {\n     *    'Images': '<div>Images</div>',\n     *    'Title 2': editor.helper.dom('<div>Some content</div>'),\n     *    'Color Picker': ColorPickerWidget(editor, function (color) {\n     *         box.style.color = color;\n     *     }, box.style.color),\n     * });\n     * ```\n     */",
      "meta": {
        "range": [
          198415,
          201059
        ],
        "filename": "jodit.js",
        "lineno": 5216,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100021747",
          "name": "Widget.TabsWidget",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "editor",
            "tabs",
            "state"
          ]
        },
        "vars": {
          "box": "<anonymous>~Widget.TabsWidget~box",
          "tabBox": "<anonymous>~Widget.TabsWidget~tabBox",
          "buttons": "<anonymous>~Widget.TabsWidget~buttons",
          "nameToTab": "<anonymous>~Widget.TabsWidget~nameToTab",
          "firstTab": "<anonymous>~Widget.TabsWidget~firstTab",
          "tabcount": "<anonymous>~Widget.TabsWidget~tabcount",
          "": null
        }
      },
      "description": "Build tabs system",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "PlainObject where 'key' will be tab's Title and `value` is tab's content",
          "name": "tabs"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "You can use for this param any HTML element for remembering active tab",
          "name": "state"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "state.activeTab"
        }
      ],
      "examples": [
        "```javascript\nlet tabs = widget.create('Tabs', {\n   'Images': '<div>Images</div>',\n   'Title 2': editor.helper.dom('<div>Some content</div>'),\n   'Color Picker': ColorPickerWidget(editor, function (color) {\n        box.style.color = color;\n    }, box.style.color),\n});\n```"
      ],
      "name": "TabsWidget",
      "longname": "<anonymous>~Widget.TabsWidget",
      "kind": "function",
      "memberof": "<anonymous>~Widget",
      "scope": "static",
      "___id": "T000002R001472",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {Jodit} editor\n     * @param {Widget.ImageSelectorCallbacks} callbacks\n     * @param {HTMLElement} elm\n     * @param {Function} close Close popup\n     * @param {boolean} isImage\n     * @return {HTMLDivElement}\n     * @constructor\n     */",
      "meta": {
        "range": [
          201332,
          205536
        ],
        "filename": "jodit.js",
        "lineno": 5284,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100022121",
          "name": "Widget.FileSelectorWidget",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "editor",
            "callbacks",
            "elm",
            "close",
            "isImage"
          ]
        },
        "vars": {
          "isImage": "module:Uploader~isImage",
          "currentImage": "module:Uploader~currentImage",
          "tabs": "<anonymous>~Widget.FileSelectorWidget~tabs",
          "dragbox": "<anonymous>~Widget.FileSelectorWidget~dragbox",
          "": null,
          "icon": "<anonymous>~Widget.FileSelectorWidget~icon",
          "tabs[undefined]": "<anonymous>~Widget.FileSelectorWidget~tabs.undefined]",
          "form_1": "<anonymous>~Widget.FileSelectorWidget~form_1",
          "button": "<anonymous>~Widget.FileSelectorWidget~button",
          "url_1": "<anonymous>~Widget.FileSelectorWidget~url_1",
          "button.innerText": "<anonymous>~Widget.FileSelectorWidget~button.innerText"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        },
        {
          "type": {
            "names": [
              "Widget.ImageSelectorCallbacks"
            ]
          },
          "name": "callbacks"
        },
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Close popup",
          "name": "close"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "isImage"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HTMLDivElement"
            ]
          }
        }
      ],
      "kind": "class",
      "name": "FileSelectorWidget",
      "longname": "<anonymous>~Widget.FileSelectorWidget",
      "memberof": "<anonymous>~Widget",
      "scope": "static",
      "___id": "T000002R001489",
      "___s": true
    },
    {
      "comment": "/**\n         * Get current event name\n         *\n         * @example\n         * ```javascript\n         * parent.events.on('openDialog closeDialog', function () {\n         *     if (parent.events.current === 'closeDialog') {\n         *         alert('Dialog was closed');\n         *     } else {\n         *         alert('Dialog was opened');\n         *     }\n         * });\n         * ```\n         */",
      "meta": {
        "range": [
          208147,
          208164
        ],
        "filename": "jodit.js",
        "lineno": 5435,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100022985",
          "name": "this.current",
          "type": "ArrayExpression",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "Get current event name",
      "examples": [
        "```javascript\nparent.events.on('openDialog closeDialog', function () {\n    if (parent.events.current === 'closeDialog') {\n        alert('Dialog was closed');\n    } else {\n        alert('Dialog was opened');\n    }\n});\n```"
      ],
      "name": "current",
      "longname": "<anonymous>~EventsNative#current",
      "kind": "member",
      "memberof": "<anonymous>~EventsNative",
      "scope": "instance",
      "___id": "T000002R001532",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the handler for the specified event ( Event List ) for a given element .\n     *\n     * @param {object|string} subjectOrEvents - The object for which toWYSIWYG set an event handler\n     * @param {string|Function} eventsOrCallback - List of events , separated by a space or comma\n     * @param {function} [handlerOrSelector] - The event handler\n     * @param {selector} [selector] - Selector for capturing\n     * @param {Boolean} [onTop=false] - Set handler in first\n     *\n     * @example\n     * ```javascript\n     * // set global handler\n     * parent.on('beforeCommand', function (command) {\n     *     alert('command');\n     * });\n     * ```\n     * * @example\n     * ```javascript\n     * // set global handler\n     * parent.on(document.body, 'click', function (e) {\n     *     alert(this.href);\n     * }, 'a');\n     * ```\n     */",
      "meta": {
        "range": [
          211179,
          214357
        ],
        "filename": "jodit.js",
        "lineno": 5514,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100023274",
          "name": "EventsNative.prototype.on",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "subjectOrEvents",
            "eventsOrCallback",
            "handlerOrSelector",
            "selector",
            "onTop"
          ]
        },
        "vars": {
          "_this": "<anonymous>~EventsNative#on~_this",
          "onTop": "module:Uploader~onTop",
          "subject": "<anonymous>~EventsNative#on~subject",
          "events": "<anonymous>~EventsNative#on~events",
          "callback": "module:Uploader~callback",
          "store": "<anonymous>~EventsNative#on~store",
          "": null,
          "isDOMElement": "<anonymous>~EventsNative#on~isDOMElement",
          "self": "<anonymous>~EventsNative#on~self",
          "syntheticCallback": "module:Uploader~syntheticCallback"
        }
      },
      "description": "Sets the handler for the specified event ( Event List ) for a given element .",
      "params": [
        {
          "type": {
            "names": [
              "object",
              "string"
            ]
          },
          "description": "The object for which toWYSIWYG set an event handler",
          "name": "subjectOrEvents"
        },
        {
          "type": {
            "names": [
              "string",
              "function"
            ]
          },
          "description": "List of events , separated by a space or comma",
          "name": "eventsOrCallback"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "The event handler",
          "name": "handlerOrSelector"
        },
        {
          "type": {
            "names": [
              "selector"
            ]
          },
          "optional": true,
          "description": "Selector for capturing",
          "name": "selector"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Set handler in first",
          "name": "onTop"
        }
      ],
      "examples": [
        "```javascript\n// set global handler\nparent.on('beforeCommand', function (command) {\n    alert('command');\n});\n```\n* @example\n```javascript\n// set global handler\nparent.on(document.body, 'click', function (e) {\n    alert(this.href);\n}, 'a');\n```"
      ],
      "name": "on",
      "longname": "<anonymous>~EventsNative#on",
      "kind": "function",
      "memberof": "<anonymous>~EventsNative",
      "scope": "instance",
      "___id": "T000002R001556",
      "___s": true
    },
    {
      "comment": "/**\n     * Disable all handlers specified event ( Event List ) for a given element. Either a specific event handler.\n     *\n     * @param {object} subjectOrEvents - The object which is disabled handlers\n     * @param {string|Function} [eventsOrCallback] - List of events, separated by a space or comma , which is necessary toWYSIWYG disable the handlers for a given object\n     * @param {function} [handler] - Specific event handler toWYSIWYG be removed\n     *\n     * @example\n     * ```javascript\n     * var a = {name: \"Anton\"};\n     * parent.events.on(a, 'open', function () {\n     *     alert(this.name);\n     * });\n     *\n     * parent.events.fire(a, 'open');\n     * parent.events.off(a, 'open');\n     * var b = {name: \"Ivan\"}, hndlr = function () {\n     *  alert(this.name);\n     * };\n     * parent.events.on(b, 'open close', hndlr);\n     * parent.events.fire(a, 'open');\n     * parent.events.off(a, 'open', hndlr);\n     * parent.events.fire(a, 'close');\n     * parent.events.on('someGlobalEvents', function () {\n     *   console.log(this); // parent\n     * });\n     * parent.events.fire('someGlobalEvents');\n     * parent.events.off('someGlobalEvents');\n     * ```\n     */",
      "meta": {
        "range": [
          215546,
          218148
        ],
        "filename": "jodit.js",
        "lineno": 5620,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100023601",
          "name": "EventsNative.prototype.off",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "subjectOrEvents",
            "eventsOrCallback",
            "handler"
          ]
        },
        "vars": {
          "_this": "<anonymous>~EventsNative#off~_this",
          "subject": "<anonymous>~EventsNative#off~subject",
          "events": "<anonymous>~EventsNative#off~events",
          "store": "<anonymous>~EventsNative#off~store",
          "callback": "module:Uploader~callback",
          "": null,
          "isDOMElement": "<anonymous>~EventsNative#off~isDOMElement",
          "removeEventListener": "<anonymous>~EventsNative#off~removeEventListener",
          "removeCallbackFromNameSpace": "<anonymous>~EventsNative#off~removeCallbackFromNameSpace"
        }
      },
      "description": "Disable all handlers specified event ( Event List ) for a given element. Either a specific event handler.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "The object which is disabled handlers",
          "name": "subjectOrEvents"
        },
        {
          "type": {
            "names": [
              "string",
              "function"
            ]
          },
          "optional": true,
          "description": "List of events, separated by a space or comma , which is necessary toWYSIWYG disable the handlers for a given object",
          "name": "eventsOrCallback"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "Specific event handler toWYSIWYG be removed",
          "name": "handler"
        }
      ],
      "examples": [
        "```javascript\nvar a = {name: \"Anton\"};\nparent.events.on(a, 'open', function () {\n    alert(this.name);\n});\n\nparent.events.fire(a, 'open');\nparent.events.off(a, 'open');\nvar b = {name: \"Ivan\"}, hndlr = function () {\n alert(this.name);\n};\nparent.events.on(b, 'open close', hndlr);\nparent.events.fire(a, 'open');\nparent.events.off(a, 'open', hndlr);\nparent.events.fire(a, 'close');\nparent.events.on('someGlobalEvents', function () {\n  console.log(this); // parent\n});\nparent.events.fire('someGlobalEvents');\nparent.events.off('someGlobalEvents');\n```"
      ],
      "name": "off",
      "longname": "<anonymous>~EventsNative#off",
      "kind": "function",
      "memberof": "<anonymous>~EventsNative",
      "scope": "instance",
      "___id": "T000002R001578",
      "___s": true
    },
    {
      "comment": "/**\n     * Sets the handler for the specified event (Event List) for a given element .\n     *\n     * @param {object|string} subjectOrEvents - The object which is caused by certain events\n     * @param {string|Array} eventsList - List of events , separated by a space or comma\n     * @param {Array} [args] - Options for the event handler\n     * @return {boolean} `false` if one of the handlers return `false`\n     * @example\n     * ```javascript\n     * var dialog = new Jodit.modules.Dialog();\n     * parent.events.on('afterClose', function () {\n     *     dialog.destruct(); // will be removed from DOM\n     * });\n     * dialog.open('Hello world!!!');\n     * ```\n     *  or you can trigger native browser listener\n     *  ```javascript\n     *  var events = new Jodit.modules.EventsNative();\n     *  events.on(document.body, 'click',function (event) {\n     *      alert('click on ' + event.target.id );\n     *  });\n     *  events.fire(document.body.querySelector('div'), 'click');\n     *  ```\n     *\n     */",
      "meta": {
        "range": [
          220966,
          223733
        ],
        "filename": "jodit.js",
        "lineno": 5745,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100024124",
          "name": "EventsNative.prototype.fire",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "subjectOrEvents",
            "eventsList"
          ]
        },
        "vars": {
          "_this": "<anonymous>~EventsNative#fire~_this",
          "args": "<anonymous>~EventsNative#fire~args",
          "_i": "<anonymous>~EventsNative#fire~_i",
          "args[undefined]": "<anonymous>~EventsNative#fire~args.undefined]",
          "result": "<anonymous>~EventsNative#fire~result",
          "result_value": "<anonymous>~EventsNative#fire~result_value",
          "subject": "<anonymous>~EventsNative#fire~subject",
          "events": "<anonymous>~EventsNative#fire~events",
          "argumentsList": "<anonymous>~EventsNative#fire~argumentsList",
          "isDOMElement": "<anonymous>~EventsNative#fire~isDOMElement",
          "store": "<anonymous>~EventsNative#fire~store",
          "": null
        }
      },
      "description": "Sets the handler for the specified event (Event List) for a given element .",
      "params": [
        {
          "type": {
            "names": [
              "object",
              "string"
            ]
          },
          "description": "The object which is caused by certain events",
          "name": "subjectOrEvents"
        },
        {
          "type": {
            "names": [
              "string",
              "Array"
            ]
          },
          "description": "List of events , separated by a space or comma",
          "name": "eventsList"
        },
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "optional": true,
          "description": "Options for the event handler",
          "name": "args"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "description": "`false` if one of the handlers return `false`"
        }
      ],
      "examples": [
        "```javascript\nvar dialog = new Jodit.modules.Dialog();\nparent.events.on('afterClose', function () {\n    dialog.destruct(); // will be removed from DOM\n});\ndialog.open('Hello world!!!');\n```\n or you can trigger native browser listener\n ```javascript\n var events = new Jodit.modules.EventsNative();\n events.on(document.body, 'click',function (event) {\n     alert('click on ' + event.target.id );\n });\n events.fire(document.body.querySelector('div'), 'click');\n ```"
      ],
      "name": "fire",
      "longname": "<anonymous>~EventsNative#fire",
      "kind": "function",
      "memberof": "<anonymous>~EventsNative",
      "scope": "instance",
      "___id": "T000002R001609",
      "___s": true
    },
    {
      "comment": "/**\n                 * Fired after calling `button.exec` function\n                 * @event afterExec\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 5888,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired after calling `button.exec` function",
      "kind": "event",
      "name": "afterExec",
      "longname": "event:afterExec",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001662",
      "___s": true
    },
    {
      "comment": "/**\n                 * Fired after popup was opened for some control button\n                 * @event after{CONTROLNAME}OpenPopup\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 5900,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired after popup was opened for some control button",
      "kind": "event",
      "name": "after{CONTROLNAME}OpenPopup",
      "longname": "event:after{CONTROLNAME}OpenPopup",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001665",
      "___s": true
    },
    {
      "comment": "/**\n                 * Close all opened popups\n                 *\n                 * @event closeAllPopups\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 5904,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Close all opened popups",
      "kind": "event",
      "name": "closeAllPopups",
      "longname": "event:closeAllPopups",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001666",
      "___s": true
    },
    {
      "comment": "/**\n             * You can emulate click on some button\n             *\n             * @event click-%buttonName%-btn\n             * @example\n             * ```javascript\n             * var editor = new Jodit('#editor');\n             * editor.events.fire('click-image-btn'); // will open Image popup\n             * ```\n             */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 5951,
        "columnno": 12,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "You can emulate click on some button",
      "kind": "event",
      "name": "click-%buttonName%-btn",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor');\neditor.events.fire('click-image-btn'); // will open Image popup\n```"
      ],
      "longname": "event:click-%buttonName%-btn",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001674",
      "___s": true
    },
    {
      "comment": "/**\n     * @param {HTMLElement} content\n     * @param {boolean} [rightAlign=false] Open popup on right side\n     * @param {boolean} [noStandartActions=false] No call standarts action\n     */",
      "meta": {
        "range": [
          241433,
          242358
        ],
        "filename": "jodit.js",
        "lineno": 6212,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100026651",
          "name": "ToolbarPopup.prototype.open",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "content",
            "rightAlign",
            "noStandartActions"
          ]
        },
        "vars": {
          "noStandartActions": "module:Uploader~noStandartActions",
          "this.isOpened": "<anonymous>~ToolbarPopup#open#isOpened"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "name": "content"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Open popup on right side",
          "name": "rightAlign"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "No call standarts action",
          "name": "noStandartActions"
        }
      ],
      "name": "open",
      "longname": "<anonymous>~ToolbarPopup#open",
      "kind": "function",
      "memberof": "<anonymous>~ToolbarPopup",
      "scope": "instance",
      "___id": "T000002R001748",
      "___s": true
    },
    {
      "comment": "/**\n         * Set focus in editor\n         */",
      "meta": {
        "range": [
          247044,
          248031
        ],
        "filename": "jodit.js",
        "lineno": 6348,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100027496",
          "name": "_this.focus",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>~Select",
          "paramnames": []
        },
        "vars": {
          "jodit": "<anonymous>~Select~_this.focus~jodit",
          "start": "<anonymous>~Select~_this.focus~start",
          "sel": "<anonymous>~Select~_this.focus~sel",
          "range": "<anonymous>~Select~_this.focus~range"
        }
      },
      "description": "Set focus in editor",
      "name": "focus",
      "longname": "<anonymous>~Select~_this.focus",
      "kind": "function",
      "memberof": "<anonymous>~Select~_this",
      "scope": "static",
      "___id": "T000002R001823",
      "___s": true
    },
    {
      "comment": "/**\n         * Apply some css rules for all selections. It method wraps selections in nodeName tag.\n         *\n         * @param {object} cssRules\n         * @param {string} nodeName\n         * @param {object} options\n         */",
      "meta": {
        "range": [
          250214,
          258948
        ],
        "filename": "jodit.js",
        "lineno": 6413,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100027903",
          "name": "_this.applyCSS",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>~Select",
          "paramnames": [
            "cssRules",
            "nodeName",
            "options"
          ]
        },
        "vars": {
          "nodeName": "module:Uploader~nodeName",
          "WRAP": "<anonymous>~Select~_this.applyCSS~WRAP",
          "UNWRAP": "<anonymous>~Select~_this.applyCSS~UNWRAP",
          "mode": "<anonymous>~Select~_this.applyCSS~mode",
          "defaultTag": "<anonymous>~Select~_this.applyCSS~defaultTag",
          "FONT": "<anonymous>~Select~_this.applyCSS~FONT",
          "findNextCondition": "<anonymous>~Select~_this.applyCSS~findNextCondition",
          "": null,
          "checkCssRulesFor": "<anonymous>~Select~_this.applyCSS~checkCssRulesFor",
          "isSuitElement": "<anonymous>~Select~_this.applyCSS~isSuitElement",
          "toggleStyles": "<anonymous>~Select~_this.applyCSS~toggleStyles",
          "selInfo": "<anonymous>~Select~_this.applyCSS~selInfo",
          "clearStyle": "module:Uploader~clearStyle",
          "closest": "<anonymous>~Select~_this.applyCSS~closest",
          "node": "<anonymous>~Select~_this.applyCSS~node"
        }
      },
      "description": "Apply some css rules for all selections. It method wraps selections in nodeName tag.",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "cssRules"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "nodeName"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "options"
        }
      ],
      "name": "applyCSS",
      "longname": "<anonymous>~Select~_this.applyCSS",
      "kind": "function",
      "memberof": "<anonymous>~Select~_this",
      "scope": "static",
      "___id": "T000002R001840",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove all selected content\n     */",
      "meta": {
        "range": [
          259033,
          259369
        ],
        "filename": "jodit.js",
        "lineno": 6565,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100028914",
          "name": "Select.prototype.remove",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "sel": "<anonymous>~Select#remove~sel",
          "current": "<anonymous>~Select#remove~current",
          "i": "module:Uploader~i"
        }
      },
      "description": "Remove all selected content",
      "name": "remove",
      "longname": "<anonymous>~Select#remove",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001871",
      "___s": true
    },
    {
      "comment": "/**\n     * Insert the cursor toWYSIWYG any point x, y\n     *\n     * @method insertAtPoint\n     * @param {int} x Coordinate by horizontal\n     * @param {int} y Coordinate by vertical\n     * @return boolean Something went wrong\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 6574,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Insert the cursor toWYSIWYG any point x, y",
      "kind": "function",
      "name": "insertAtPoint",
      "params": [
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Coordinate by horizontal",
          "name": "x"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "Coordinate by vertical",
          "name": "y"
        }
      ],
      "returns": [
        {
          "description": "boolean Something went wrong"
        }
      ],
      "longname": "module:Uploader~insertAtPoint",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001876",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove all markers\n     */",
      "meta": {
        "range": [
          261038,
          261318
        ],
        "filename": "jodit.js",
        "lineno": 6621,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100029172",
          "name": "Select.prototype.removeMarkers",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "": null
        }
      },
      "description": "Remove all markers",
      "name": "removeMarkers",
      "longname": "<anonymous>~Select#removeMarkers",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001888",
      "___s": true
    },
    {
      "comment": "/**\n     * Restores user selections using marker invisible elements in the DOM.\n     *\n     * @param {markerInfo[]|null} selectionInfo\n     */",
      "meta": {
        "range": [
          261471,
          263165
        ],
        "filename": "jodit.js",
        "lineno": 6633,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100029217",
          "name": "Select.prototype.restore",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "selectionInfo"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Select#restore~_this",
          "selectionInfo": "module:Uploader~selectionInfo",
          "sel_1": "<anonymous>~Select#restore~sel_1",
          "": null
        }
      },
      "description": "Restores user selections using marker invisible elements in the DOM.",
      "params": [
        {
          "type": {
            "names": [
              "Array.<markerInfo>",
              "null"
            ]
          },
          "name": "selectionInfo"
        }
      ],
      "name": "restore",
      "longname": "<anonymous>~Select#restore",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001889",
      "___s": true
    },
    {
      "comment": "/**\n     * Saves selections using marker invisible elements in the DOM.\n     *\n     * @return markerInfo[]\n     */",
      "meta": {
        "range": [
          263290,
          265190
        ],
        "filename": "jodit.js",
        "lineno": 6676,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100029430",
          "name": "Select.prototype.save",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "sel": "<anonymous>~Select#save~sel",
          "info": "<anonymous>~Select#save~info",
          "length": "<anonymous>~Select#save~length",
          "i": "module:Uploader~i",
          "start": "module:Uploader~start",
          "end": "module:Uploader~end",
          "ranges": "<anonymous>~Select#save~ranges",
          "ranges[undefined]": "<anonymous>~Select#save~ranges.undefined]",
          "info[undefined]": "<anonymous>~Select#save~info.undefined]",
          "start_1": "<anonymous>~Select#save~start_1",
          "end_2": "<anonymous>~Select#save~end_2"
        }
      },
      "description": "Saves selections using marker invisible elements in the DOM.",
      "returns": [
        {
          "description": "markerInfo[]"
        }
      ],
      "name": "save",
      "longname": "<anonymous>~Select#save",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001897",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks whether the current selection is something or just set the cursor is\n     *\n     * @return boolean true Selection does't have content\n     */",
      "meta": {
        "range": [
          265360,
          265644
        ],
        "filename": "jodit.js",
        "lineno": 6735,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100029696",
          "name": "Select.prototype.isCollapsed",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "sel": "<anonymous>~Select#isCollapsed~sel",
          "r": "module:Uploader~r"
        }
      },
      "description": "Checks whether the current selection is something or just set the cursor is",
      "returns": [
        {
          "description": "boolean true Selection does't have content"
        }
      ],
      "name": "isCollapsed",
      "longname": "<anonymous>~Select#isCollapsed",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001924",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks whether the editor currently in focus\n     *\n     * @return boolean\n     */",
      "meta": {
        "range": [
          265748,
          265954
        ],
        "filename": "jodit.js",
        "lineno": 6749,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100029745",
          "name": "Select.prototype.isFocused",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "description": "Checks whether the editor currently in focus",
      "returns": [
        {
          "description": "boolean"
        }
      ],
      "name": "isFocused",
      "longname": "<anonymous>~Select#isFocused",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001929",
      "___s": true
    },
    {
      "comment": "/**\n     * Returns the current element under the cursor inside editor\n     *\n     * @return false|Node The element under the cursor or false if undefined or not in editor\n     */",
      "meta": {
        "range": [
          266143,
          268727
        ],
        "filename": "jodit.js",
        "lineno": 6757,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100029785",
          "name": "Select.prototype.current",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "checkChild"
          ]
        },
        "vars": {
          "checkChild": "module:Uploader~checkChild",
          "sel": "<anonymous>~Select#current~sel",
          "range": "<anonymous>~Select#current~range",
          "node": "module:Uploader~node",
          "rightMode_1": "module:Uploader~rightMode_1",
          "child": "<anonymous>~Select#current~child",
          "": null,
          "current": "module:Uploader~current",
          "leftChild": "module:Uploader~leftChild",
          "rightChild": "module:Uploader~rightChild"
        }
      },
      "description": "Returns the current element under the cursor inside editor",
      "returns": [
        {
          "description": "false|Node The element under the cursor or false if undefined or not in editor"
        }
      ],
      "name": "current",
      "longname": "<anonymous>~Select#current",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001930",
      "___s": true
    },
    {
      "comment": "/**\n     * Insert element in editor\n     *\n     * @param {Node} node\n     * @param {Boolean} [insertCursorAfter=true] After insert, cursor will move after element\n     * @param {Boolean} [fireChange=true] After insert, editor fire change event. You can prevent this behavior\n     */",
      "meta": {
        "range": [
          269020,
          270503
        ],
        "filename": "jodit.js",
        "lineno": 6812,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100030081",
          "name": "Select.prototype.insertNode",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "insertCursorAfter",
            "fireChange"
          ]
        },
        "vars": {
          "insertCursorAfter": "module:Uploader~insertCursorAfter",
          "fireChange": "module:Uploader~fireChange",
          "sel": "<anonymous>~Select#insertNode~sel",
          "range": "<anonymous>~Select#insertNode~range"
        }
      },
      "description": "Insert element in editor",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "After insert, cursor will move after element",
          "name": "insertCursorAfter"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "After insert, editor fire change event. You can prevent this behavior",
          "name": "fireChange"
        }
      ],
      "name": "insertNode",
      "longname": "<anonymous>~Select#insertNode",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001949",
      "___s": true
    },
    {
      "comment": "/**\n     * Inserts in the current cursor position some HTML snippet\n     *\n     * @param  {string} html HTML The text toWYSIWYG be inserted into the document\n     * @example\n     * ```javascript\n     * parent.selection.insertHTML('<img src=\"image.png\"/>');\n     * ```\n     */",
      "meta": {
        "range": [
          270789,
          272535
        ],
        "filename": "jodit.js",
        "lineno": 6860,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100030282",
          "name": "Select.prototype.insertHTML",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "html"
          ]
        },
        "vars": {
          "node": "<anonymous>~Select#insertHTML~node",
          "fragment": "<anonymous>~Select#insertHTML~fragment",
          "lastChild": "module:Uploader~lastChild",
          "lastEditorElement": "module:Uploader~lastEditorElement",
          "node.innerHTML": "<anonymous>~Select#insertHTML~node.innerHTML"
        }
      },
      "description": "Inserts in the current cursor position some HTML snippet",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "HTML The text toWYSIWYG be inserted into the document",
          "name": "html"
        }
      ],
      "examples": [
        "```javascript\nparent.selection.insertHTML('<img src=\"image.png\"/>');\n```"
      ],
      "name": "insertHTML",
      "longname": "<anonymous>~Select#insertHTML",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001954",
      "___s": true
    },
    {
      "comment": "/**\n     * Insert image in editor\n     *\n     * @param  {string|HTMLImageElement} url URL for image, or HTMLImageElement\n     * @param  {string} [styles] If specified, it will be applied <code>$(image).css(styles)</code>\n     *\n     * @fired afterInsertImage\n     */",
      "meta": {
        "range": [
          272812,
          274592
        ],
        "filename": "jodit.js",
        "lineno": 6909,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100030543",
          "name": "Select.prototype.insertImage",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "url",
            "styles"
          ]
        },
        "vars": {
          "styles": "module:Uploader~styles",
          "image": "<anonymous>~Select#insertImage~image",
          "dw": "module:Uploader~dw",
          "styles.width": "module:Uploader~styles.width",
          "": null,
          "onload": "<anonymous>~Select#insertImage~onload"
        }
      },
      "description": "Insert image in editor",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "HTMLImageElement"
            ]
          },
          "description": "URL for image, or HTMLImageElement",
          "name": "url"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "If specified, it will be applied <code>$(image).css(styles)</code>",
          "name": "styles"
        }
      ],
      "tags": [
        {
          "originalTitle": "fired",
          "title": "fired",
          "text": "afterInsertImage",
          "value": "afterInsertImage"
        }
      ],
      "name": "insertImage",
      "longname": "<anonymous>~Select#insertImage",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001964",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered after image was inserted {@link Selection~insertImage|insertImage}. This method can executed from {@link FileBrowser|FileBrowser} or {@link Uploader|Uploader}\n         * @event afterInsertImage\n         * @param {HTMLImageElement} image\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('afterInsertImage', function (image) {\n         *     image.className = 'bloghead4';\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 6937,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered after image was inserted {@link Selection~insertImage|insertImage}. This method can executed from {@link FileBrowser|FileBrowser} or {@link Uploader|Uploader}",
      "kind": "event",
      "name": "afterInsertImage",
      "params": [
        {
          "type": {
            "names": [
              "HTMLImageElement"
            ]
          },
          "name": "image"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('afterInsertImage', function (image) {\n    image.className = 'bloghead4';\n});\n```"
      ],
      "longname": "event:afterInsertImage",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R001974",
      "___s": true
    },
    {
      "comment": "/**\n     * Set cursor after the node\n     *\n     * @param {Node} node\n     * @return {Node} fake invisible textnode. After insert it can be removed\n     */",
      "meta": {
        "range": [
          274758,
          275776
        ],
        "filename": "jodit.js",
        "lineno": 6957,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100030758",
          "name": "Select.prototype.setCursorAfter",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Select#setCursorAfter~_this",
          "": null,
          "range": "<anonymous>~Select#setCursorAfter~range",
          "fakeNode": "module:Uploader~fakeNode"
        }
      },
      "description": "Set cursor after the node",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "description": "fake invisible textnode. After insert it can be removed"
        }
      ],
      "name": "setCursorAfter",
      "longname": "<anonymous>~Select#setCursorAfter",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001975",
      "___s": true
    },
    {
      "comment": "/**\n     * Checks if the cursor is at the end(start) block\n     *\n     * @param  {boolean} start=false true - check whether the cursor is at the start block\n     * @param {HTMLElement} parentBlock - Find in this\n     *\n     * @return {boolean | null} true - the cursor is at the end(start) block, null - cursor somewhere outside\n     */",
      "meta": {
        "range": [
          276123,
          277867
        ],
        "filename": "jodit.js",
        "lineno": 6988,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100030919",
          "name": "Select.prototype.cursorInTheEdge",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "start",
            "parentBlock"
          ]
        },
        "vars": {
          "sel": "<anonymous>~Select#cursorInTheEdge~sel",
          "range": "<anonymous>~Select#cursorInTheEdge~range",
          "container": "<anonymous>~Select#cursorInTheEdge~container",
          "sibling": "<anonymous>~Select#cursorInTheEdge~sibling",
          "": null,
          "checkSiblings": "<anonymous>~Select#cursorInTheEdge~checkSiblings",
          "value": "<anonymous>~Select#cursorInTheEdge~value",
          "current": "<anonymous>~Select#cursorInTheEdge~current"
        }
      },
      "description": "Checks if the cursor is at the end(start) block",
      "params": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": false,
          "description": "true - check whether the cursor is at the start block",
          "name": "start"
        },
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "description": "Find in this",
          "name": "parentBlock"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean",
              "null"
            ]
          },
          "description": "true - the cursor is at the end(start) block, null - cursor somewhere outside"
        }
      ],
      "name": "cursorInTheEdge",
      "longname": "<anonymous>~Select#cursorInTheEdge",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001980",
      "___s": true
    },
    {
      "comment": "/**\n     * Set cursor before the node\n     *\n     * @param {Node} node\n     * @return {Text} fake invisible textnode. After insert it can be removed\n     */",
      "meta": {
        "range": [
          278034,
          279089
        ],
        "filename": "jodit.js",
        "lineno": 7033,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100031173",
          "name": "Select.prototype.setCursorBefore",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Select#setCursorBefore~_this",
          "": null,
          "range": "<anonymous>~Select#setCursorBefore~range",
          "fakeNode": "module:Uploader~fakeNode"
        }
      },
      "description": "Set cursor before the node",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Text"
            ]
          },
          "description": "fake invisible textnode. After insert it can be removed"
        }
      ],
      "name": "setCursorBefore",
      "longname": "<anonymous>~Select#setCursorBefore",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001989",
      "___s": true
    },
    {
      "comment": "/**\n     * Set cursor in the node\n     *\n     * @param {Node} node\n     * @param {boolean} [inStart=false] set cursor in start of element\n     */",
      "meta": {
        "range": [
          279245,
          280561
        ],
        "filename": "jodit.js",
        "lineno": 7063,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100031340",
          "name": "Select.prototype.setCursorIn",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "inStart"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Select#setCursorIn~_this",
          "inStart": "module:Uploader~inStart",
          "": null,
          "range": "<anonymous>~Select#setCursorIn~range",
          "start": "module:Uploader~start",
          "last": "module:Uploader~last",
          "fakeNode": "<anonymous>~Select#setCursorIn~fakeNode"
        }
      },
      "description": "Set cursor in the node",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "set cursor in start of element",
          "name": "inStart"
        }
      ],
      "name": "setCursorIn",
      "longname": "<anonymous>~Select#setCursorIn",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R001994",
      "___s": true
    },
    {
      "comment": "/**\n     * Set range selection\n     *\n     * @param range\n     * @fires changeSelection\n     */",
      "meta": {
        "range": [
          280667,
          281000
        ],
        "filename": "jodit.js",
        "lineno": 7102,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100031534",
          "name": "Select.prototype.selectRange",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "range"
          ]
        },
        "vars": {
          "sel": "<anonymous>~Select#selectRange~sel"
        }
      },
      "description": "Set range selection",
      "params": [
        {
          "name": "range"
        }
      ],
      "fires": [
        "event:changeSelection"
      ],
      "name": "selectRange",
      "longname": "<anonymous>~Select#selectRange",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R002005",
      "___s": true
    },
    {
      "comment": "/**\n         * Fired after change selection\n         *\n         * @event changeSelection\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 7106,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired after change selection",
      "kind": "event",
      "name": "changeSelection",
      "longname": "event:changeSelection",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R002007",
      "___s": true
    },
    {
      "comment": "/**\n     * Select node\n     *\n     * @param {Node} node\n     * @param {boolean} [inward=false] select all inside\n     */",
      "meta": {
        "range": [
          281131,
          281805
        ],
        "filename": "jodit.js",
        "lineno": 7119,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100031576",
          "name": "Select.prototype.select",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "node",
            "inward"
          ]
        },
        "vars": {
          "_this": "<anonymous>~Select#select~_this",
          "inward": "module:Uploader~inward",
          "": null,
          "range": "<anonymous>~Select#select~range"
        }
      },
      "description": "Select node",
      "params": [
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "name": "node"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "select all inside",
          "name": "inward"
        }
      ],
      "name": "select",
      "longname": "<anonymous>~Select#select",
      "kind": "function",
      "memberof": "<anonymous>~Select",
      "scope": "instance",
      "___id": "T000002R002008",
      "___s": true
    },
    {
      "comment": "/**\n * Module for working with tables . Delete, insert , merger, division of cells , rows and columns. When creating elements such as <table> for each of them\n * creates a new instance Jodit.modules.TableProcessor and it can be accessed via $('table').data('table-processor')\n *\n * @module Table\n * @param {Object} parent Jodit main object\n * @param {HTMLTableElement} table Table for which to create a module\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 7390,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Module for working with tables . Delete, insert , merger, division of cells , rows and columns. When creating elements such as <table> for each of them\ncreates a new instance Jodit.modules.TableProcessor and it can be accessed via $('table').data('table-processor')",
      "kind": "module",
      "name": "Table",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Jodit main object",
          "name": "parent"
        },
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "description": "Table for which to create a module",
          "name": "table"
        }
      ],
      "longname": "module:Table",
      "scope": "inner",
      "memberof": "module:Uploader",
      "___id": "T000002R002121",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {HTMLTableElement} table\n     * @return {HTMLTableCellElement[]}\n     */",
      "meta": {
        "range": [
          292219,
          292415
        ],
        "filename": "jodit.js",
        "lineno": 7415,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033115",
          "name": "Table.getAllSelectedCells",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<HTMLTableCellElement>"
            ]
          }
        }
      ],
      "name": "getAllSelectedCells",
      "longname": "<anonymous>~Table.getAllSelectedCells",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002129",
      "___s": true
    },
    {
      "comment": "/**\n     * @param {HTMLTableElement} table\n     * @return {number}\n     */",
      "meta": {
        "range": [
          292500,
          292579
        ],
        "filename": "jodit.js",
        "lineno": 7422,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033145",
          "name": "Table.getRowsCount",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "getRowsCount",
      "longname": "<anonymous>~Table.getRowsCount",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002130",
      "___s": true
    },
    {
      "comment": "/**\n     * @param {HTMLTableElement} table\n     * @return {number}\n     */",
      "meta": {
        "range": [
          292664,
          292888
        ],
        "filename": "jodit.js",
        "lineno": 7429,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033159",
          "name": "Table.getColumnsCount",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        },
        "vars": {
          "matrix": "<anonymous>~Table.getColumnsCount~matrix",
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "getColumnsCount",
      "longname": "<anonymous>~Table.getColumnsCount",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002131",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {HTMLTableElement} table\n     * @param {function(HTMLTableCellElement, int, int, int, int):boolean} [callback] if return false cycle break\n     * @return {Array}\n     */",
      "meta": {
        "range": [
          293093,
          294426
        ],
        "filename": "jodit.js",
        "lineno": 7441,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033194",
          "name": "Table.formalMatrix",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "callback"
          ]
        },
        "vars": {
          "matrix": "<anonymous>~Table.formalMatrix~matrix",
          "rows": "<anonymous>~Table.formalMatrix~rows",
          "setCell": "<anonymous>~Table.formalMatrix~setCell",
          "": null,
          "i": "module:Table~i",
          "j": "module:Table~j",
          "cells": "<anonymous>~Table.formalMatrix~cells"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "optional": true,
          "description": "if return false cycle break",
          "name": "callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array"
            ]
          }
        }
      ],
      "name": "formalMatrix",
      "longname": "<anonymous>~Table.formalMatrix",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002133",
      "___s": true
    },
    {
      "comment": "/**\n     * Get cell coordinate in formal table (without colspan and rowspan)\n     */",
      "meta": {
        "range": [
          294521,
          295136
        ],
        "filename": "jodit.js",
        "lineno": 7477,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033402",
          "name": "Table.formalCoordinate",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "cell",
            "max"
          ]
        },
        "vars": {
          "max": "module:Table~max",
          "i": "<anonymous>~Table.formalCoordinate~i",
          "j": "<anonymous>~Table.formalCoordinate~j",
          "width": "<anonymous>~Table.formalCoordinate~width",
          "height": "<anonymous>~Table.formalCoordinate~height",
          "": null
        }
      },
      "description": "Get cell coordinate in formal table (without colspan and rowspan)",
      "name": "formalCoordinate",
      "longname": "<anonymous>~Table.formalCoordinate",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002156",
      "___s": true
    },
    {
      "comment": "/**\n     * Inserts a new line after row what contains the selected cell\n     *\n     * @param {HTMLTableElement} table\n     * @param {Boolean|HTMLTableRowElement} [line=false] Insert a new line after/before this line contains the selected cell\n     * @param {Boolean} [after=true] Insert a new line after line contains the selected cell\n     */",
      "meta": {
        "range": [
          295490,
          296259
        ],
        "filename": "jodit.js",
        "lineno": 7502,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033500",
          "name": "Table.appendRow",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "line",
            "after"
          ]
        },
        "vars": {
          "line": "module:Table~line",
          "after": "module:Table~after",
          "doc": "<anonymous>~Table.appendRow~doc",
          "columnsCount": "<anonymous>~Table.appendRow~columnsCount",
          "row": "<anonymous>~Table.appendRow~row",
          "j": "module:Table~j"
        }
      },
      "description": "Inserts a new line after row what contains the selected cell",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "Boolean",
              "HTMLTableRowElement"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Insert a new line after/before this line contains the selected cell",
          "name": "line"
        },
        {
          "type": {
            "names": [
              "Boolean"
            ]
          },
          "optional": true,
          "defaultvalue": true,
          "description": "Insert a new line after line contains the selected cell",
          "name": "after"
        }
      ],
      "name": "appendRow",
      "longname": "<anonymous>~Table.appendRow",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002168",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove row\n     *\n     * @param {HTMLTableElement} table\n     * @param {int} rowIndex\n     */",
      "meta": {
        "range": [
          296374,
          298115
        ],
        "filename": "jodit.js",
        "lineno": 7526,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033635",
          "name": "Table.removeRow",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "rowIndex"
          ]
        },
        "vars": {
          "box": "<anonymous>~Table.removeRow~box",
          "dec": "<anonymous>~Table.removeRow~dec",
          "row": "<anonymous>~Table.removeRow~row",
          "": null
        }
      },
      "description": "Remove row",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "name": "rowIndex"
        }
      ],
      "name": "removeRow",
      "longname": "<anonymous>~Table.removeRow",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002177",
      "___s": true
    },
    {
      "comment": "/**\n     * Insert column before / after all the columns containing the selected cells\n     *\n     */",
      "meta": {
        "range": [
          298226,
          299551
        ],
        "filename": "jodit.js",
        "lineno": 7572,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100033895",
          "name": "Table.appendColumn",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "j",
            "after"
          ]
        },
        "vars": {
          "after": "module:Table~after",
          "box": "<anonymous>~Table.appendColumn~box",
          "i": "module:Table~i",
          "j": "module:Table~j",
          "cell": "<anonymous>~Table.appendColumn~cell",
          "td": "<anonymous>~Table.appendColumn~td",
          "added": "module:Table~added"
        }
      },
      "description": "Insert column before / after all the columns containing the selected cells",
      "name": "appendColumn",
      "longname": "<anonymous>~Table.appendColumn",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002188",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove column by index\n     *\n     * @param {HTMLTableElement} table\n     * @param {int} [j]\n     */",
      "meta": {
        "range": [
          299673,
          300546
        ],
        "filename": "jodit.js",
        "lineno": 7611,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100034129",
          "name": "Table.removeColumn",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "j"
          ]
        },
        "vars": {
          "box": "<anonymous>~Table.removeColumn~box",
          "dec": "<anonymous>~Table.removeColumn~dec",
          "": null
        }
      },
      "description": "Remove column by index",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "optional": true,
          "name": "j"
        }
      ],
      "name": "removeColumn",
      "longname": "<anonymous>~Table.removeColumn",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002200",
      "___s": true
    },
    {
      "comment": "/**\n     * Define bound for selected cells\n     *\n     * @param {HTMLTableElement} table\n     * @param {Array.<HTMLTableCellElement>} selectedCells\n     * @return {number[][]}\n     */",
      "meta": {
        "range": [
          300740,
          302582
        ],
        "filename": "jodit.js",
        "lineno": 7644,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100034277",
          "name": "Table.getSelectedBound",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "selectedCells"
          ]
        },
        "vars": {
          "bound": "<anonymous>~Table.getSelectedBound~bound",
          "box": "<anonymous>~Table.getSelectedBound~box",
          "i": "module:Table~i",
          "j": "module:Table~j",
          "k": "module:Table~k",
          "bound[0][0]": "<anonymous>~Table.getSelectedBound~bound.0][0]",
          "bound[0][1]": "<anonymous>~Table.getSelectedBound~bound.0][1]",
          "bound[1][0]": "<anonymous>~Table.getSelectedBound~bound.1][0]",
          "bound[1][1]": "<anonymous>~Table.getSelectedBound~bound.1][1]"
        }
      },
      "description": "Define bound for selected cells",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "Array.<HTMLTableCellElement>"
            ]
          },
          "name": "selectedCells"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<Array.<number>>"
            ]
          }
        }
      ],
      "name": "getSelectedBound",
      "longname": "<anonymous>~Table.getSelectedBound",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002208",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {HTMLTableElement} table\n     */",
      "meta": {
        "range": [
          302650,
          305255
        ],
        "filename": "jodit.js",
        "lineno": 7691,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100034733",
          "name": "Table.normalizeTable",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        },
        "vars": {
          "i": "module:Table~i",
          "j": "module:Table~j",
          "min": "module:Table~min",
          "not": "module:Table~not",
          "__marked": "<anonymous>~Table.normalizeTable~__marked",
          "box": "<anonymous>~Table.normalizeTable~box"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        }
      ],
      "name": "normalizeTable",
      "longname": "<anonymous>~Table.normalizeTable",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002242",
      "___s": true
    },
    {
      "comment": "/**\n     * It combines all of the selected cells into one. The contents of the cells will also be combined\n     *\n     * @param {HTMLTableElement} table\n     *\n     */",
      "meta": {
        "range": [
          305433,
          308120
        ],
        "filename": "jodit.js",
        "lineno": 7765,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100035155",
          "name": "Table.mergeSelected",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        },
        "vars": {
          "bound": "<anonymous>~Table.mergeSelected~bound",
          "w": "<anonymous>~Table.mergeSelected~w",
          "first": "<anonymous>~Table.mergeSelected~first",
          "first_j": "<anonymous>~Table.mergeSelected~first_j",
          "td": "<anonymous>~Table.mergeSelected~td",
          "html": "<anonymous>~Table.mergeSelected~html",
          "cols": "module:Table~cols",
          "rows": "module:Table~rows",
          "__marked": "<anonymous>~Table.mergeSelected~__marked",
          "": null,
          "first.innerHTML": "<anonymous>~Table.mergeSelected~first.innerHTML"
        }
      },
      "description": "It combines all of the selected cells into one. The contents of the cells will also be combined",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        }
      ],
      "name": "mergeSelected",
      "longname": "<anonymous>~Table.mergeSelected",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002273",
      "___s": true
    },
    {
      "comment": "/**\n     * Divides all selected by `jodit_focused_cell` class table cell in 2 parts vertical. Those division into 2 columns\n     */",
      "meta": {
        "range": [
          308262,
          310053
        ],
        "filename": "jodit.js",
        "lineno": 7829,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100035542",
          "name": "Table.splitHorizontal",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        },
        "vars": {
          "coord": "<anonymous>~Table.splitHorizontal~coord",
          "td": "<anonymous>~Table.splitHorizontal~td",
          "tr": "<anonymous>~Table.splitHorizontal~tr",
          "parent": "<anonymous>~Table.splitHorizontal~parent",
          "after": "<anonymous>~Table.splitHorizontal~after",
          "__marked": "<anonymous>~Table.splitHorizontal~__marked",
          "doc": "<anonymous>~Table.splitHorizontal~doc",
          "": null
        }
      },
      "description": "Divides all selected by `jodit_focused_cell` class table cell in 2 parts vertical. Those division into 2 columns",
      "name": "splitHorizontal",
      "longname": "<anonymous>~Table.splitHorizontal",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002293",
      "___s": true
    },
    {
      "comment": "/**\n     * It splits all the selected cells into 2 parts horizontally. Those. are added new row\n     *\n     * @param {HTMLTableElement} table\n     */",
      "meta": {
        "range": [
          310213,
          311621
        ],
        "filename": "jodit.js",
        "lineno": 7877,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100035828",
          "name": "Table.splitVertical",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table"
          ]
        },
        "vars": {
          "coord": "<anonymous>~Table.splitVertical~coord",
          "td": "<anonymous>~Table.splitVertical~td",
          "percentage": "<anonymous>~Table.splitVertical~percentage",
          "__marked": "<anonymous>~Table.splitVertical~__marked",
          "doc": "<anonymous>~Table.splitVertical~doc",
          "": null
        }
      },
      "description": "It splits all the selected cells into 2 parts horizontally. Those. are added new row",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        }
      ],
      "name": "splitVertical",
      "longname": "<anonymous>~Table.splitVertical",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002306",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {HTMLTableCellElement} cell\n     * @param {string} key\n     * @param {string} value\n     * @param {HTMLTableCellElement[]} __marked\n     * @private\n     */",
      "meta": {
        "range": [
          311812,
          312062
        ],
        "filename": "jodit.js",
        "lineno": 7916,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100036055",
          "name": "Table.__mark",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "cell",
            "key",
            "value",
            "__marked"
          ]
        },
        "vars": {
          "cell['__marked_value']": "module:Table~cell.'__marked_value'",
          "cell['__marked_value'][undefined]": "module:Table~cell.'__marked_value'[undefined]"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableCellElement"
            ]
          },
          "name": "cell"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "key"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "value"
        },
        {
          "type": {
            "names": [
              "Array.<HTMLTableCellElement>"
            ]
          },
          "name": "__marked"
        }
      ],
      "access": "private",
      "name": "__mark",
      "longname": "<anonymous>~Table.__mark",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002316",
      "___s": true
    },
    {
      "comment": "/**\n     * Set column width used delta value\n     *\n     * @param {HTMLTableElement} table\n     * @param {int} j column\n     * @param {int} delta\n     * @param {boolean} noUnmark\n     * @param {HTMLTableCellElement[]} __marked\n     */",
      "meta": {
        "range": [
          313705,
          314176
        ],
        "filename": "jodit.js",
        "lineno": 7966,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100036214",
          "name": "Table.setColumnWidthByDelta",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "j",
            "delta",
            "noUnmark",
            "__marked"
          ]
        },
        "vars": {
          "i": "module:Table~i",
          "box": "<anonymous>~Table.setColumnWidthByDelta~box",
          "w": "module:Table~w",
          "percent": "module:Table~percent"
        }
      },
      "description": "Set column width used delta value",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "description": "column",
          "name": "j"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "name": "delta"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "name": "noUnmark"
        },
        {
          "type": {
            "names": [
              "Array.<HTMLTableCellElement>"
            ]
          },
          "name": "__marked"
        }
      ],
      "name": "setColumnWidthByDelta",
      "longname": "<anonymous>~Table.setColumnWidthByDelta",
      "kind": "function",
      "memberof": "<anonymous>~Table",
      "scope": "static",
      "___id": "T000002R002321",
      "___s": true
    },
    {
      "comment": "/**\n * Module to generate context menu\n *\n * @module ContextMenu\n * @param {Object} parent Jodit main object\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 8010,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Module to generate context menu",
      "kind": "module",
      "name": "ContextMenu",
      "params": [
        {
          "type": {
            "names": [
              "Object"
            ]
          },
          "description": "Jodit main object",
          "name": "parent"
        }
      ],
      "longname": "module:ContextMenu",
      "scope": "inner",
      "memberof": "module:Table",
      "___id": "T000002R002345",
      "___s": true
    },
    {
      "comment": "/**\n         * Hide context menu\n         *\n         * @method hide\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 8020,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Hide context menu",
      "kind": "function",
      "name": "hide",
      "longname": "module:ContextMenu~hide",
      "scope": "inner",
      "memberof": "module:ContextMenu",
      "___id": "T000002R002349",
      "___s": true
    },
    {
      "comment": "/**\n     * Generate and show context menu\n     *\n     * @method show\n     * @param {number} x Global coordinate by X\n     * @param {number} y Global coordinate by Y\n     * @param {Action[]} actions Array with plainobjects {icon: 'bin', title: 'Delete', exec: function () { do smth}}\n     * @example\n     * ```javascript\n     * parent.show(e.clientX, e.clientY, [{icon: 'bin', title: 'Delete', exec: function () { alert(1) }]);\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 8037,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Generate and show context menu",
      "kind": "function",
      "name": "show",
      "params": [
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Global coordinate by X",
          "name": "x"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "description": "Global coordinate by Y",
          "name": "y"
        },
        {
          "type": {
            "names": [
              "Array.<Action>"
            ]
          },
          "description": "Array with plainobjects {icon: 'bin', title: 'Delete', exec: function () { do smth}}",
          "name": "actions"
        }
      ],
      "examples": [
        "```javascript\nparent.show(e.clientX, e.clientY, [{icon: 'bin', title: 'Delete', exec: function () { alert(1) }]);\n```"
      ],
      "longname": "module:ContextMenu~show",
      "scope": "inner",
      "memberof": "module:ContextMenu",
      "___id": "T000002R002353",
      "___s": true
    },
    {
      "comment": "/**\n * The module monitors the status of the editor and creates / deletes the required number of Undo / Redo shots . To track changes in use {@link https://developer.mozilla.org/ru/docs/Web/API/MutationObserver|MutationObserver}\n *\n * @module Observer\n * @see {@link Snapshot|Snapshot}\n * @params {Jodit} parent Jodit main object\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 8175,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "The module monitors the status of the editor and creates / deletes the required number of Undo / Redo shots . To track changes in use {@link https://developer.mozilla.org/ru/docs/Web/API/MutationObserver|MutationObserver}",
      "kind": "module",
      "name": "Observer",
      "see": [
        "{@link Snapshot|Snapshot}"
      ],
      "tags": [
        {
          "originalTitle": "params",
          "title": "params",
          "text": "{Jodit} parent Jodit main object",
          "value": "{Jodit} parent Jodit main object"
        }
      ],
      "longname": "module:Observer",
      "scope": "inner",
      "memberof": "module:ContextMenu",
      "___id": "T000002R002405",
      "___s": true
    },
    {
      "comment": "/**\n     * Return state of the WYSIWYG editor to step back\n     */",
      "meta": {
        "range": [
          322728,
          322902
        ],
        "filename": "jodit.js",
        "lineno": 8218,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037401",
          "name": "Observer.prototype.redo",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "this.__startValue": "<anonymous>~Observer#redo#__startValue"
        }
      },
      "description": "Return state of the WYSIWYG editor to step back",
      "name": "redo",
      "longname": "<anonymous>~Observer#redo",
      "kind": "function",
      "memberof": "<anonymous>~Observer",
      "scope": "instance",
      "___id": "T000002R002417",
      "___s": true
    },
    {
      "comment": "/**\n     * Return the state of the WYSIWYG editor to step forward\n     */",
      "meta": {
        "range": [
          322986,
          323160
        ],
        "filename": "jodit.js",
        "lineno": 8227,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037434",
          "name": "Observer.prototype.undo",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "this.__startValue": "<anonymous>~Observer#undo#__startValue"
        }
      },
      "description": "Return the state of the WYSIWYG editor to step forward",
      "name": "undo",
      "longname": "<anonymous>~Observer#undo",
      "kind": "function",
      "memberof": "<anonymous>~Observer",
      "scope": "instance",
      "___id": "T000002R002419",
      "___s": true
    },
    {
      "comment": "/**\n * Module for creating snapshot of editor which includes html content and the current selection\n */",
      "meta": {
        "range": [
          324634,
          329955
        ],
        "filename": "jodit.js",
        "lineno": 8276,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037682",
          "name": "Snapshot",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Module for creating snapshot of editor which includes html content and the current selection",
      "name": "Snapshot",
      "longname": "<anonymous>~Snapshot",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R002438",
      "___s": true
    },
    {
      "comment": "/**\n     * Calc count element before some node in parentNode. All text nodes are joined\n     *\n     * @param {Node | null} elm\n     * @return {number}\n     */",
      "meta": {
        "range": [
          325045,
          325655
        ],
        "filename": "jodit.js",
        "lineno": 8289,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037720",
          "name": "Snapshot.countNodesBeforeInParent",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm"
          ]
        },
        "vars": {
          "elms": "<anonymous>~Snapshot.countNodesBeforeInParent~elms",
          "count": "module:Observer~count",
          "last": "module:Observer~last",
          "j": "module:Observer~j"
        }
      },
      "description": "Calc count element before some node in parentNode. All text nodes are joined",
      "params": [
        {
          "type": {
            "names": [
              "Node",
              "null"
            ]
          },
          "name": "elm"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "countNodesBeforeInParent",
      "longname": "<anonymous>~Snapshot.countNodesBeforeInParent",
      "kind": "function",
      "memberof": "<anonymous>~Snapshot",
      "scope": "static",
      "___id": "T000002R002442",
      "___s": true
    },
    {
      "comment": "/**\n     * Calc whole hierarchy path before some element in editor's tree\n     *\n     * @param {Node | null} elm\n     * @return {number[]}\n     * @private\n     */",
      "meta": {
        "range": [
          325828,
          326273
        ],
        "filename": "jodit.js",
        "lineno": 8313,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037827",
          "name": "Snapshot.prototype.calcHierarchyLadder",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm"
          ]
        },
        "vars": {
          "counts": "<anonymous>~Snapshot#calcHierarchyLadder~counts",
          "elm": "module:Observer~elm"
        }
      },
      "description": "Calc whole hierarchy path before some element in editor's tree",
      "params": [
        {
          "type": {
            "names": [
              "Node",
              "null"
            ]
          },
          "name": "elm"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Array.<number>"
            ]
          }
        }
      ],
      "access": "private",
      "name": "calcHierarchyLadder",
      "longname": "<anonymous>~Snapshot#calcHierarchyLadder",
      "kind": "function",
      "memberof": "<anonymous>~Snapshot",
      "scope": "instance",
      "___id": "T000002R002451",
      "___s": true
    },
    {
      "comment": "/**\n     * Calc normal offset in joined text nodes\n     *\n     * @param {Node | null} elm\n     * @param {number} offset\n     * @return {number}\n     */",
      "meta": {
        "range": [
          326435,
          326768
        ],
        "filename": "jodit.js",
        "lineno": 8333,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037901",
          "name": "Snapshot.strokeOffset",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "elm",
            "offset"
          ]
        },
        "vars": {
          "elm": "module:Observer~elm",
          "offset": "module:Observer~offset"
        }
      },
      "description": "Calc normal offset in joined text nodes",
      "params": [
        {
          "type": {
            "names": [
              "Node",
              "null"
            ]
          },
          "name": "elm"
        },
        {
          "type": {
            "names": [
              "number"
            ]
          },
          "name": "offset"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "strokeOffset",
      "longname": "<anonymous>~Snapshot.strokeOffset",
      "kind": "function",
      "memberof": "<anonymous>~Snapshot",
      "scope": "static",
      "___id": "T000002R002454",
      "___s": true
    },
    {
      "comment": "/**\n     * Creates object a snapshot of editor: html and the current selection. Current selection calculate by offset by start document\n     *\n     * @return {object} {html: string, range: {startContainer: int, startOffset: int, endContainer: int, endOffset: int}} или {html: string} при отсутствии выделения\n     */",
      "meta": {
        "range": [
          327095,
          328369
        ],
        "filename": "jodit.js",
        "lineno": 8347,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100037954",
          "name": "Snapshot.prototype.make",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        },
        "vars": {
          "snapshot": "<anonymous>~Snapshot#make~snapshot",
          "snapshot.html": "<anonymous>~Snapshot#make~snapshot.html",
          "sel": "<anonymous>~Snapshot#make~sel",
          "range": "<anonymous>~Snapshot#make~range",
          "startContainer": "<anonymous>~Snapshot#make~startContainer",
          "startOffset": "module:Observer~startOffset",
          "endContainer": "<anonymous>~Snapshot#make~endContainer",
          "endOffset": "module:Observer~endOffset",
          "snapshot.range": "<anonymous>~Snapshot#make~snapshot.range"
        }
      },
      "description": "Creates object a snapshot of editor: html and the current selection. Current selection calculate by offset by start document",
      "returns": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "{html: string, range: {startContainer: int, startOffset: int, endContainer: int, endOffset: int}} или {html: string} при отсутствии выделения"
        }
      ],
      "name": "make",
      "longname": "<anonymous>~Snapshot#make",
      "kind": "function",
      "memberof": "<anonymous>~Snapshot",
      "scope": "instance",
      "___id": "T000002R002457",
      "___s": true
    },
    {
      "comment": "/**\n     * Compare two snapshotes, if and htmls and selections match, then return true\n     *\n     * @param {SnapshotType} first - the first snapshote\n     * @param {SnapshotType} second - second shot\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          328845,
          329001
        ],
        "filename": "jodit.js",
        "lineno": 8391,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100038162",
          "name": "Snapshot.equal",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "first",
            "second"
          ]
        }
      },
      "description": "Compare two snapshotes, if and htmls and selections match, then return true",
      "params": [
        {
          "type": {
            "names": [
              "SnapshotType"
            ]
          },
          "description": "the first snapshote",
          "name": "first"
        },
        {
          "type": {
            "names": [
              "SnapshotType"
            ]
          },
          "description": "second shot",
          "name": "second"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "equal",
      "longname": "<anonymous>~Snapshot.equal",
      "kind": "function",
      "memberof": "<anonymous>~Snapshot",
      "scope": "static",
      "___id": "T000002R002485",
      "___s": true
    },
    {
      "comment": "/**\n     * Restores the state of the editor of the snapshot. Rebounding is not only html but selected text\n     *\n     * @param {object} snapshot - snapshot of editor resulting from the `{@link Snapshot~make|make}`\n     * @see make\n     */",
      "meta": {
        "range": [
          329251,
          329907
        ],
        "filename": "jodit.js",
        "lineno": 8400,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100038195",
          "name": "Snapshot.prototype.restore",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "snapshot"
          ]
        },
        "vars": {
          "this.isBlocked": "<anonymous>~Snapshot#restore#isBlocked",
          "range": "<anonymous>~Snapshot#restore~range"
        }
      },
      "description": "Restores the state of the editor of the snapshot. Rebounding is not only html but selected text",
      "params": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "snapshot of editor resulting from the `{@link Snapshot~make|make}`",
          "name": "snapshot"
        }
      ],
      "see": [
        "make"
      ],
      "name": "restore",
      "longname": "<anonymous>~Snapshot#restore",
      "kind": "function",
      "memberof": "<anonymous>~Snapshot",
      "scope": "instance",
      "___id": "T000002R002486",
      "___s": true
    },
    {
      "comment": "/**\n  `Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  @method resolve\n  @static\n  @param {Any} value value that the returned promise will be resolved with\n  Useful for tooling.\n  @return {Promise} a promise that will become fulfilled with the given\n  `value`\n*/",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9020,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "`Promise.resolve` returns a promise that will become resolved with the\n  passed `value`. It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    resolve(1);\n  });\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.resolve(1);\n\n  promise.then(function(value){\n    // value === 1\n  });\n  ```",
      "kind": "function",
      "name": "resolve",
      "scope": "static",
      "params": [
        {
          "type": {
            "names": [
              "Any"
            ]
          },
          "description": "value that the returned promise will be resolved with\n  Useful for tooling.",
          "name": "value"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "a promise that will become fulfilled with the given\n  `value`"
        }
      ],
      "longname": "module:Observer.resolve",
      "memberof": "module:Observer",
      "___id": "T000002R002666",
      "___s": true
    },
    {
      "comment": "/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```\n\n  @method all\n  @static\n  @param {Array} entries array of promises\n  @param {String} label optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9413,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "`Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error(\"2\"));\n  let promise3 = reject(new Error(\"3\"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === \"2\"\n  });\n  ```",
      "kind": "function",
      "name": "all",
      "scope": "static",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "array of promises",
          "name": "entries"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "description": "optional string for labeling the promise.\n  Useful for tooling.",
          "name": "label"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected."
        }
      ],
      "longname": "module:Observer.all",
      "memberof": "module:Observer",
      "___id": "T000002R002762",
      "___s": true
    },
    {
      "comment": "/**\n  `Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```\n\n  @method race\n  @static\n  @param {Array} promises array of promises to observe\n  Useful for tooling.\n  @return {Promise} a promise which settles in the same way as the first passed\n  promise to settle.\n*/",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9464,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "`Promise.race` returns a new promise which is settled in the same way as the\n  first passed promise to settle.\n\n  Example:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 2');\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // result === 'promise 2' because it was resolved before promise1\n    // was resolved.\n  });\n  ```\n\n  `Promise.race` is deterministic in that only the state of the first\n  settled promise matters. For example, even if other promises given to the\n  `promises` array argument are resolved, but the first settled promise has\n  become rejected before the other promises became fulfilled, the returned\n  promise will become rejected:\n\n  ```javascript\n  let promise1 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      resolve('promise 1');\n    }, 200);\n  });\n\n  let promise2 = new Promise(function(resolve, reject){\n    setTimeout(function(){\n      reject(new Error('promise 2'));\n    }, 100);\n  });\n\n  Promise.race([promise1, promise2]).then(function(result){\n    // Code here never runs\n  }, function(reason){\n    // reason.message === 'promise 2' because promise 2 became rejected before\n    // promise 1 became fulfilled\n  });\n  ```\n\n  An example real-world use case is implementing timeouts:\n\n  ```javascript\n  Promise.race([ajax('foo.json'), timeout(5000)])\n  ```",
      "kind": "function",
      "name": "race",
      "scope": "static",
      "params": [
        {
          "type": {
            "names": [
              "Array"
            ]
          },
          "description": "array of promises to observe\n  Useful for tooling.",
          "name": "promises"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "a promise which settles in the same way as the first passed\n  promise to settle."
        }
      ],
      "longname": "module:Observer.race",
      "memberof": "module:Observer",
      "___id": "T000002R002764",
      "___s": true
    },
    {
      "comment": "/**\n  `Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  @method reject\n  @static\n  @param {Any} reason value that the returned promise will be rejected with.\n  Useful for tooling.\n  @return {Promise} a promise rejected with the given `reason`.\n*/",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9547,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "`Promise.reject` returns a promise rejected with the passed `reason`.\n  It is shorthand for the following:\n\n  ```javascript\n  let promise = new Promise(function(resolve, reject){\n    reject(new Error('WHOOPS'));\n  });\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```\n\n  Instead of writing the above, your code now simply becomes the following:\n\n  ```javascript\n  let promise = Promise.reject(new Error('WHOOPS'));\n\n  promise.then(function(value){\n    // Code here doesn't run because the promise is rejected!\n  }, function(reason){\n    // reason.message === 'WHOOPS'\n  });\n  ```",
      "kind": "function",
      "name": "reject",
      "scope": "static",
      "params": [
        {
          "type": {
            "names": [
              "Any"
            ]
          },
          "description": "value that the returned promise will be rejected with.\n  Useful for tooling.",
          "name": "reason"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          },
          "description": "a promise rejected with the given `reason`."
        }
      ],
      "longname": "module:Observer.reject",
      "memberof": "module:Observer",
      "___id": "T000002R002769",
      "___s": true
    },
    {
      "comment": "/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @param {Function} resolver\n  Useful for tooling.\n  @constructor\n*/",
      "meta": {
        "range": [
          362303,
          368810
        ],
        "filename": "jodit.js",
        "lineno": 9701,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100041694",
          "name": "Promise$1",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promise's eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```",
      "kind": "class",
      "classdesc": "Promise",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Useful for tooling.",
          "name": "resolver"
        }
      ],
      "name": "Promise$1",
      "longname": "<anonymous>~Promise$1",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R002775",
      "___s": true
    },
    {
      "comment": "/**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n   @method then\n  @param {Function} onFulfilled\n  @param {Function} onRejected\n  Useful for tooling.\n  @return {Promise}\n  */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9713,
        "columnno": 2,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n   ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n   Chaining\n  --------\n   The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n   ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n   findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we're unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n   ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n   Assimilation\n  ------------\n   Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n   If the assimliated promise rejects, then the downstream promise will also reject.\n   ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n   Simple Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let result;\n   try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n   Advanced Example\n  --------------\n   Synchronous Example\n   ```javascript\n  let author, books;\n   try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n   Errback Example\n   ```js\n   function foundBooks(books) {\n   }\n   function failure(reason) {\n   }\n   findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n   Promise Example;\n   ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```",
      "kind": "function",
      "name": "then",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "onFulfilled"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Useful for tooling.",
          "name": "onRejected"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "longname": "module:Observer~then",
      "scope": "inner",
      "memberof": "module:Observer",
      "___id": "T000002R002781",
      "___s": true
    },
    {
      "comment": "/**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```\n  @method catch\n  @param {Function} onRejection\n  Useful for tooling.\n  @return {Promise}\n  */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9874,
        "columnno": 2,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n  ```js\n  function findAuthor(){\n  throw new Error('couldn't find that author');\n  }\n  // synchronous\n  try {\n  findAuthor();\n  } catch(reason) {\n  // something went wrong\n  }\n  // async with promises\n  findAuthor().catch(function(reason){\n  // something went wrong\n  });\n  ```",
      "kind": "function",
      "name": "catch",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "Useful for tooling.",
          "name": "onRejection"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "longname": "module:Observer~catch",
      "scope": "inner",
      "memberof": "module:Observer",
      "___id": "T000002R002782",
      "___s": true
    },
    {
      "comment": "/**\n    `finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```\n  \n    @method finally\n    @param {Function} callback\n    @return {Promise}\n  */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 9903,
        "columnno": 2,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "`finally` will be invoked regardless of the promise's fate just as native\n    try/catch/finally behaves\n  \n    Synchronous example:\n  \n    ```js\n    findAuthor() {\n      if (Math.random() > 0.5) {\n        throw new Error();\n      }\n      return new Author();\n    }\n  \n    try {\n      return findAuthor(); // succeed or fail\n    } catch(error) {\n      return findOtherAuther();\n    } finally {\n      // always runs\n      // doesn't affect the return value\n    }\n    ```\n  \n    Asynchronous example:\n  \n    ```js\n    findAuthor().catch(function(reason){\n      return findOtherAuther();\n    }).finally(function(){\n      // author was either found, or not\n    });\n    ```",
      "kind": "function",
      "name": "finally",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "callback"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "longname": "module:Observer~finally",
      "scope": "inner",
      "memberof": "module:Observer",
      "___id": "T000002R002784",
      "___s": true
    },
    {
      "comment": "/**\n * Class create tooltip for buttons in toolbar\n */",
      "meta": {
        "range": [
          378815,
          380426
        ],
        "filename": "jodit.js",
        "lineno": 10318,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100043039",
          "name": "Tooltip",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Class create tooltip for buttons in toolbar",
      "name": "Tooltip",
      "longname": "<anonymous>~Tooltip",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R002903",
      "___s": true
    },
    {
      "comment": "/**\n * Create helper\n * @type {boolean}\n */",
      "meta": {
        "range": [
          391480,
          391523
        ],
        "filename": "jodit.js",
        "lineno": 10641,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100044914",
          "name": "Config_1.Config.prototype.addNewLine",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "description": "Create helper",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "Config#addNewLine",
      "longname": "<anonymous>~Config_1.Config#addNewLine",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003087",
      "___s": true
    },
    {
      "comment": "/**\n * On dbl click on empty space of editor it add new P element\n * @type {boolean}\n */",
      "meta": {
        "range": [
          391614,
          391667
        ],
        "filename": "jodit.js",
        "lineno": 10646,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100044924",
          "name": "Config_1.Config.prototype.addNewLineOnDBLClick",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "description": "On dbl click on empty space of editor it add new P element",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "Config#addNewLineOnDBLClick",
      "longname": "<anonymous>~Config_1.Config#addNewLineOnDBLClick",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003088",
      "___s": true
    },
    {
      "comment": "/**\n * Whar kind of tags it will be impact\n * @type {string[]}\n */",
      "meta": {
        "range": [
          391736,
          391828
        ],
        "filename": "jodit.js",
        "lineno": 10651,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100044934",
          "name": "Config_1.Config.prototype.addNewLineTagsTriggers",
          "type": "ArrayExpression",
          "funcscope": "<anonymous>",
          "value": "[\"table\",\"iframe\",\"img\",\"hr\",\"jodit\"]",
          "paramnames": []
        }
      },
      "description": "Whar kind of tags it will be impact",
      "type": {
        "names": [
          "Array.<string>"
        ]
      },
      "name": "Config#addNewLineTagsTriggers",
      "longname": "<anonymous>~Config_1.Config#addNewLineTagsTriggers",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003089",
      "___s": true
    },
    {
      "comment": "/**\n * Create helper for adding new paragraph(Jodit.defaultOptions.enter tag) before iframe, table or image\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          391970,
          398065
        ],
        "filename": "jodit.js",
        "lineno": 10657,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100044948",
          "name": "addNewLine",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "line": "<anonymous>~addNewLine~line",
          "delta": "<anonymous>~addNewLine~delta",
          "isMatchedTag": "<anonymous>~addNewLine~isMatchedTag",
          "timeout": "<anonymous>~addNewLine~timeout",
          "hidden": "<anonymous>~addNewLine~hidden",
          "preview": "<anonymous>~addNewLine~preview",
          "current": "<anonymous>~addNewLine~current",
          "lineInFocus": "<anonymous>~addNewLine~lineInFocus",
          "show": "<anonymous>~addNewLine~show",
          "": null,
          "hideForce": "<anonymous>~addNewLine~hideForce",
          "canGetFocus": "<anonymous>~addNewLine~canGetFocus",
          "hide": "<anonymous>~addNewLine~hide"
        }
      },
      "description": "Create helper for adding new paragraph(Jodit.defaultOptions.enter tag) before iframe, table or image",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "addNewLine",
      "longname": "<anonymous>~addNewLine",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003090",
      "___s": true
    },
    {
      "comment": "/**\n * @property{boolean} autofocus=false true After loading the page into the editor once the focus is set\n */",
      "meta": {
        "range": [
          398612,
          398655
        ],
        "filename": "jodit.js",
        "lineno": 10822,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100045885",
          "name": "Config_1.Config.prototype.autofocus",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": false,
          "paramnames": []
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "autofocus=false true After loading the page into the editor once the focus is set",
          "value": "autofocus=false true After loading the page into the editor once the focus is set"
        }
      ],
      "name": "Config#autofocus",
      "longname": "<anonymous>~Config_1.Config#autofocus",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003136",
      "___s": true
    },
    {
      "comment": "/**\n * Autofocus plugin - set focus inside the editor after reload\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          398756,
          399563
        ],
        "filename": "jodit.js",
        "lineno": 10828,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100045894",
          "name": "autofocus",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "timeout": "<anonymous>~autofocus~timeout",
          "": null
        }
      },
      "description": "Autofocus plugin - set focus inside the editor after reload",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "autofocus",
      "longname": "<anonymous>~autofocus",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003137",
      "___s": true
    },
    {
      "comment": "/**\n * Plug-in process entering Backspace key\n *\n * @module backspace\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 10874,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Plug-in process entering Backspace key",
      "kind": "module",
      "name": "backspace",
      "longname": "module:backspace",
      "scope": "inner",
      "memberof": "module:Observer",
      "___id": "T000002R003146",
      "___s": true
    },
    {
      "comment": "/**\n * Bold plugin - change B to Strong, i to Em\n */",
      "meta": {
        "range": [
          413347,
          414283
        ],
        "filename": "jodit.js",
        "lineno": 11194,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100047811",
          "name": "bold",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "callBack": "<anonymous>~bold~callBack",
          "": null
        }
      },
      "description": "Bold plugin - change B to Strong, i to Em",
      "name": "bold",
      "longname": "<anonymous>~bold",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R003250",
      "___s": true
    },
    {
      "comment": "/**\n * Clean HTML after removeFormat and insertHorizontalRule command\n */",
      "meta": {
        "range": [
          415288,
          426634
        ],
        "filename": "jodit.js",
        "lineno": 11261,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100048053",
          "name": "cleanHtml",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "": null,
          "attributesReg": "<anonymous>~cleanHtml~attributesReg",
          "seperator": "<anonymous>~cleanHtml~seperator",
          "attrReg": "<anonymous>~cleanHtml~attrReg",
          "getHash": "<anonymous>~cleanHtml~getHash",
          "current": "<anonymous>~cleanHtml~current",
          "allowTagsHash": "<anonymous>~cleanHtml~allowTagsHash",
          "denyTagsHash": "<anonymous>~cleanHtml~denyTagsHash",
          "hasNotEmptyTextSibling": "<anonymous>~cleanHtml~hasNotEmptyTextSibling",
          "isRemovableNode": "<anonymous>~cleanHtml~isRemovableNode"
        }
      },
      "description": "Clean HTML after removeFormat and insertHorizontalRule command",
      "name": "cleanHtml",
      "longname": "<anonymous>~cleanHtml",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R003284",
      "___s": true
    },
    {
      "comment": "/**\n * Process commands `background` and `forecolor`\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          429962,
          430637
        ],
        "filename": "jodit.js",
        "lineno": 11588,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100049787",
          "name": "color",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "callback": "<anonymous>~color~callback",
          "": null
        }
      },
      "description": "Process commands `background` and `forecolor`",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "color",
      "longname": "<anonymous>~color",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003377",
      "___s": true
    },
    {
      "comment": "/**\n * Plug-in copy and paste formatting from elements\n *\n * @module copyformat\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 11628,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Plug-in copy and paste formatting from elements",
      "kind": "module",
      "name": "copyformat",
      "longname": "module:copyformat",
      "scope": "inner",
      "memberof": "module:backspace",
      "___id": "T000002R003388",
      "___s": true
    },
    {
      "comment": "/**\n * Insert default paragraph\n *\n * @param {Jodit} editor\n * @param {Node} [fake]\n * @param {String} [wrapperTag]\n * @param {CSSStyleSheet} [style]\n * @return {HTMLElement}\n */",
      "meta": {
        "range": [
          434740,
          435632
        ],
        "filename": "jodit.js",
        "lineno": 11740,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100050324",
          "name": "exports.insertParagraph",
          "type": "FunctionExpression",
          "paramnames": [
            "editor",
            "fake",
            "wrapperTag",
            "style"
          ]
        },
        "vars": {
          "wrapperTag": "module:copyformat~wrapperTag",
          "p": "module:copyformat.insertParagraph~p",
          "helper_node": "module:copyformat.insertParagraph~helper_node",
          "range": "module:copyformat.insertParagraph~range"
        }
      },
      "description": "Insert default paragraph",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        },
        {
          "type": {
            "names": [
              "Node"
            ]
          },
          "optional": true,
          "name": "fake"
        },
        {
          "type": {
            "names": [
              "String"
            ]
          },
          "optional": true,
          "name": "wrapperTag"
        },
        {
          "type": {
            "names": [
              "CSSStyleSheet"
            ]
          },
          "optional": true,
          "name": "style"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          }
        }
      ],
      "name": "insertParagraph",
      "longname": "module:copyformat.insertParagraph",
      "kind": "function",
      "memberof": "module:copyformat",
      "scope": "static",
      "___id": "T000002R003416",
      "___s": true
    },
    {
      "comment": "/**\n * One of most important core plugins. It is responsible for all the browsers to have the same effect when the Enter button is pressed. By default, it should insert the <p>\n */",
      "meta": {
        "range": [
          435815,
          442743
        ],
        "filename": "jodit.js",
        "lineno": 11765,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100050478",
          "name": "enter",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "One of most important core plugins. It is responsible for all the browsers to have the same effect when the Enter button is pressed. By default, it should insert the <p>",
      "name": "enter",
      "longname": "<anonymous>~enter",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R003421",
      "___s": true
    },
    {
      "comment": "/**\n             * Fired on processing `Enter` key. If return some value, plugin `enter` will do nothing. if return false - prevent default Enter behavior\n             *\n             * @event beforeEnter\n             */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 11768,
        "columnno": 12,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Fired on processing `Enter` key. If return some value, plugin `enter` will do nothing. if return false - prevent default Enter behavior",
      "kind": "event",
      "name": "beforeEnter",
      "longname": "event:beforeEnter",
      "scope": "inner",
      "memberof": "module:copyformat",
      "___id": "T000002R003422",
      "___s": true
    },
    {
      "comment": "/**\n* @property{boolean} showMessageErrors=true\n*/",
      "meta": {
        "range": [
          443223,
          443273
        ],
        "filename": "jodit.js",
        "lineno": 11916,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100051338",
          "name": "Config_1.Config.prototype.showMessageErrors",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "showMessageErrors=true",
          "value": "showMessageErrors=true"
        }
      ],
      "name": "Config#showMessageErrors",
      "longname": "<anonymous>~Config_1.Config#showMessageErrors",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003456",
      "___s": true
    },
    {
      "comment": "/**\n* @property{int} showMessageErrorTime=3000 How long show messages\n*/",
      "meta": {
        "range": [
          443348,
          443401
        ],
        "filename": "jodit.js",
        "lineno": 11920,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100051348",
          "name": "Config_1.Config.prototype.showMessageErrorTime",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": 3000,
          "paramnames": []
        }
      },
      "tags": [
        {
          "originalTitle": "property{int}",
          "title": "property{int}",
          "text": "showMessageErrorTime=3000 How long show messages",
          "value": "showMessageErrorTime=3000 How long show messages"
        }
      ],
      "name": "Config#showMessageErrorTime",
      "longname": "<anonymous>~Config_1.Config#showMessageErrorTime",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003457",
      "___s": true
    },
    {
      "comment": "/**\n* @property{int} showMessageErrorOffsetPx=3 Offset fo message\n*/",
      "meta": {
        "range": [
          443472,
          443526
        ],
        "filename": "jodit.js",
        "lineno": 11924,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100051358",
          "name": "Config_1.Config.prototype.showMessageErrorOffsetPx",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": 3,
          "paramnames": []
        }
      },
      "tags": [
        {
          "originalTitle": "property{int}",
          "title": "property{int}",
          "text": "showMessageErrorOffsetPx=3 Offset fo message",
          "value": "showMessageErrorOffsetPx=3 Offset fo message"
        }
      ],
      "name": "Config#showMessageErrorOffsetPx",
      "longname": "<anonymous>~Config_1.Config#showMessageErrorOffsetPx",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003458",
      "___s": true
    },
    {
      "comment": "/**\n * Plugin toWYSIWYG display pop-up messages in the lower right corner of the editor\n */",
      "meta": {
        "range": [
          443620,
          445567
        ],
        "filename": "jodit.js",
        "lineno": 11928,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100051367",
          "name": "errorMessages",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "height_1": "<anonymous>~errorMessages~height_1",
          "messagesBox_1": "<anonymous>~errorMessages~messagesBox_1",
          "recalcOffsets_1": "<anonymous>~errorMessages~recalcOffsets_1",
          "": null
        }
      },
      "description": "Plugin toWYSIWYG display pop-up messages in the lower right corner of the editor",
      "name": "errorMessages",
      "longname": "<anonymous>~errorMessages",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R003459",
      "___s": true
    },
    {
      "comment": "/**\n         * Вывести всплывающее сообщение внизу редактора\n         *\n         * @event errorMessage\n         * @param {string} message  Сообщение\n         * @param {string} className Дополнительный класс собобщения. Допускаются info, error, success\n         * @param {string} timeout Сколько миллисекунд показывать. По умолчанию используется options.showMessageErrorTime = 2000\n         * @example\n         * ```javascript\n         * parent.events.fire('errorMessage', 'Error 123. File has not been upload');\n         * parent.events.fire('errorMessage', 'You can upload file', 'info', 4000);\n         * parent.events.fire('errorMessage', 'File was uploaded', 'success', 4000);\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 11939,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Вывести всплывающее сообщение внизу редактора",
      "kind": "event",
      "name": "errorMessage",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Сообщение",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Дополнительный класс собобщения. Допускаются info, error, success",
          "name": "className"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Сколько миллисекунд показывать. По умолчанию используется options.showMessageErrorTime = 2000",
          "name": "timeout"
        }
      ],
      "examples": [
        "```javascript\nparent.events.fire('errorMessage', 'Error 123. File has not been upload');\nparent.events.fire('errorMessage', 'You can upload file', 'info', 4000);\nparent.events.fire('errorMessage', 'File was uploaded', 'success', 4000);\n```"
      ],
      "longname": "event:errorMessage",
      "scope": "inner",
      "memberof": "module:copyformat",
      "___id": "T000002R003465",
      "___s": true
    },
    {
      "comment": "/**\n * Process commands `fontsize` and `fontname`\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          449540,
          450150
        ],
        "filename": "jodit.js",
        "lineno": 12061,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100052072",
          "name": "font",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "callback": "<anonymous>~font~callback",
          "": null
        }
      },
      "description": "Process commands `fontsize` and `fontname`",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "font",
      "longname": "<anonymous>~font",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003505",
      "___s": true
    },
    {
      "comment": "/**\n * Process command - `formatblock`\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          452976,
          454846
        ],
        "filename": "jodit.js",
        "lineno": 12160,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100052513",
          "name": "formatBlock",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Process command - `formatblock`",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "formatBlock",
      "longname": "<anonymous>~formatBlock",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003540",
      "___s": true
    },
    {
      "comment": "/**\n * Process `toggleFullSize` event, and behavior - set/unset fullsize mode\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          456162,
          458156
        ],
        "filename": "jodit.js",
        "lineno": 12244,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100052931",
          "name": "fullsize",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "shown": "<anonymous>~fullsize~shown",
          "oldHeight": "<anonymous>~fullsize~oldHeight",
          "oldWidth": "<anonymous>~fullsize~oldWidth",
          "wasToggled": "<anonymous>~fullsize~wasToggled",
          "resize": "<anonymous>~fullsize~resize",
          "": null,
          "toggle": "<anonymous>~fullsize~toggle"
        }
      },
      "description": "Process `toggleFullSize` event, and behavior - set/unset fullsize mode",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "fullsize",
      "longname": "<anonymous>~fullsize",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003564",
      "___s": true
    },
    {
      "comment": "/**\n * When this option is enabled, the editor's content will be placed in an iframe and isolated from the rest of the page.\n *\n * @example\n * ```javascript\n * new Jodit('#editor', {\n *    iframe = true;\n *    iframeStyle = 'html{margin: 0px;}body{padding:10px;background:transparent;color:#000;position:relative;z-index: 2;user-select:auto;margin:0px;overflow:hidden;}body:after{content:\"\";clear:both;display:block}';\n * });\n * ```\n */",
      "meta": {
        "range": [
          461420,
          461460
        ],
        "filename": "jodit.js",
        "lineno": 12361,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100053802",
          "name": "Config_1.Config.prototype.iframe",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": false,
          "paramnames": []
        }
      },
      "description": "When this option is enabled, the editor's content will be placed in an iframe and isolated from the rest of the page.",
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n   iframe = true;\n   iframeStyle = 'html{margin: 0px;}body{padding:10px;background:transparent;color:#000;position:relative;z-index: 2;user-select:auto;margin:0px;overflow:hidden;}body:after{content:\"\";clear:both;display:block}';\n});\n```"
      ],
      "name": "Config#iframe",
      "longname": "<anonymous>~Config_1.Config#iframe",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003636",
      "___s": true
    },
    {
      "comment": "/**\n * Base URL where the root directory for {@link Jodit.defaultOptions.iframe|iframe} mode\n *\n * @example\n * ```javascript\n * new Jodit('#editor', {\n *    iframe: true,\n *    iframeBaseUrl: 'http://xdsoft.net/jodit/docs/',\n * });\n * ```\n */",
      "meta": {
        "range": [
          461705,
          461749
        ],
        "filename": "jodit.js",
        "lineno": 12373,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100053812",
          "name": "Config_1.Config.prototype.iframeBaseUrl",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": "",
          "paramnames": []
        }
      },
      "description": "Base URL where the root directory for {@link Jodit.defaultOptions.iframe|iframe} mode",
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n   iframe: true,\n   iframeBaseUrl: 'http://xdsoft.net/jodit/docs/',\n});\n```"
      ],
      "name": "Config#iframeBaseUrl",
      "longname": "<anonymous>~Config_1.Config#iframeBaseUrl",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003637",
      "___s": true
    },
    {
      "comment": "/**\n * You can redefine default page\n *\n * @example\n * ```javascript\n * new Jodit('#editor', {\n *    iframe: true,\n *    iframeDefaultSrc: 'http://xdsoft.net/jodit/docs/',\n * });\n * ```\n */",
      "meta": {
        "range": [
          461941,
          461999
        ],
        "filename": "jodit.js",
        "lineno": 12385,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100053822",
          "name": "Config_1.Config.prototype.iframeDefaultSrc",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": "about:blank",
          "paramnames": []
        }
      },
      "description": "You can redefine default page",
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n   iframe: true,\n   iframeDefaultSrc: 'http://xdsoft.net/jodit/docs/',\n});\n```"
      ],
      "name": "Config#iframeDefaultSrc",
      "longname": "<anonymous>~Config_1.Config#iframeDefaultSrc",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003638",
      "___s": true
    },
    {
      "comment": "/**\n * Custom style toWYSIWYG be used inside the iframe toWYSIWYG display content.\n * @example\n * ```javascript\n * new Jodit('#editor', {\n *    iframe: true,\n *    iframeStyle: 'html{margin: 0px;}',\n * })\n * ```\n */",
      "meta": {
        "range": [
          462217,
          463812
        ],
        "filename": "jodit.js",
        "lineno": 12396,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100053832",
          "name": "Config_1.Config.prototype.iframeStyle",
          "type": "BinaryExpression",
          "funcscope": "<anonymous>",
          "value": "",
          "paramnames": []
        }
      },
      "description": "Custom style toWYSIWYG be used inside the iframe toWYSIWYG display content.",
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n   iframe: true,\n   iframeStyle: 'html{margin: 0px;}',\n})\n```"
      ],
      "name": "Config#iframeStyle",
      "longname": "<anonymous>~Config_1.Config#iframeStyle",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003639",
      "___s": true
    },
    {
      "comment": "/**\n * Custom stylesheet files toWYSIWYG be used inside the iframe toWYSIWYG display content.\n *\n * @example\n * ```javascript\n * new Jodit('#editor', {\n *    iframe: true,\n *    iframeCSSLinks: ['styles/default.css'],\n * })\n * ```\n */",
      "meta": {
        "range": [
          464049,
          464094
        ],
        "filename": "jodit.js",
        "lineno": 12473,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100053972",
          "name": "Config_1.Config.prototype.iframeCSSLinks",
          "type": "ArrayExpression",
          "funcscope": "<anonymous>",
          "value": "[]",
          "paramnames": []
        }
      },
      "description": "Custom stylesheet files toWYSIWYG be used inside the iframe toWYSIWYG display content.",
      "examples": [
        "```javascript\nnew Jodit('#editor', {\n   iframe: true,\n   iframeCSSLinks: ['styles/default.css'],\n})\n```"
      ],
      "name": "Config#iframeCSSLinks",
      "longname": "<anonymous>~Config_1.Config#iframeCSSLinks",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003640",
      "___s": true
    },
    {
      "comment": "/**\n * Iframe plugin - use `iframe` instead of DIV in editor. It can be need when you want attach custom styles in editor in backend of you system\n */",
      "meta": {
        "range": [
          464247,
          468977
        ],
        "filename": "jodit.js",
        "lineno": 12477,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100053981",
          "name": "iframe",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "_this": "<anonymous>~iframe~_this",
          "": null
        }
      },
      "description": "Iframe plugin - use `iframe` instead of DIV in editor. It can be need when you want attach custom styles in editor in backend of you system",
      "name": "iframe",
      "longname": "<anonymous>~iframe",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R003641",
      "___s": true
    },
    {
      "comment": "/**\n * The number of pixels to use for indenting the current line.\n * @type {number}\n */",
      "meta": {
        "range": [
          470101,
          470144
        ],
        "filename": "jodit.js",
        "lineno": 12597,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100054683",
          "name": "Config_1.Config.prototype.indentMargin",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": 10,
          "paramnames": []
        }
      },
      "description": "The number of pixels to use for indenting the current line.",
      "type": {
        "names": [
          "number"
        ]
      },
      "name": "Config#indentMargin",
      "longname": "<anonymous>~Config_1.Config#indentMargin",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R003672",
      "___s": true
    },
    {
      "comment": "/**\n * Indents the line containing the selection or insertion point.\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          470244,
          471723
        ],
        "filename": "jodit.js",
        "lineno": 12602,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100054692",
          "name": "indent",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "callback": "<anonymous>~indent~callback",
          "": null
        }
      },
      "description": "Indents the line containing the selection or insertion point.",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "indent",
      "longname": "<anonymous>~indent",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003673",
      "___s": true
    },
    {
      "comment": "/**\n * Change editor's size after load all images\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          472265,
          473173
        ],
        "filename": "jodit.js",
        "lineno": 12659,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100054935",
          "name": "imageProcessor",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Change editor's size after load all images",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "imageProcessor",
      "longname": "<anonymous>~imageProcessor",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003690",
      "___s": true
    },
    {
      "comment": "/**\n * Show dialog with image's options\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          474405,
          498207
        ],
        "filename": "jodit.js",
        "lineno": 12726,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100055174",
          "name": "imageProperties",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "open": "<anonymous>~imageProperties~open",
          "": null
        }
      },
      "description": "Show dialog with image's options",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "imageProperties",
      "longname": "<anonymous>~imageProperties",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003720",
      "___s": true
    },
    {
      "comment": "/**\n     * Open dialog editing image properties\n     *\n     * @example\n     * ```javascript\n     * var editor = new Jodit('#editor');\n     *     img = editor.editorDocument.createElement('img');\n     *\n     * img.setAttribute('src', 'images/someimage.png');\n     * editor.{@link Selection~select|select}(img);\n     * // open the properties of the editing window\n     * editor.plugins.image.open.call(img); // `this` must be HTMLImageElement\n     * ```\n     */",
      "meta": {
        "range": [
          474912,
          497701
        ],
        "filename": "jodit.js",
        "lineno": 12741,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100055179",
          "name": "open",
          "type": "FunctionExpression"
        },
        "vars": {
          "_this": "<anonymous>~imageProperties~open~_this",
          "image": "<anonymous>~imageProperties~open~image",
          "dialog": "<anonymous>~imageProperties~open~dialog",
          "cancel": "<anonymous>~imageProperties~open~cancel",
          "check": "<anonymous>~imageProperties~open~check",
          "buttons": "<anonymous>~imageProperties~open~buttons",
          "prop": "<anonymous>~imageProperties~open~prop",
          "positionTab": "<anonymous>~imageProperties~open~positionTab",
          "mainTab": "<anonymous>~imageProperties~open~mainTab",
          "ratio": "<anonymous>~imageProperties~open~ratio",
          "$w": "<anonymous>~imageProperties~open~$w",
          "$h": "<anonymous>~imageProperties~open~$h",
          "updateAlign": "<anonymous>~imageProperties~open~updateAlign",
          "": null,
          "updateBorderRadius": "<anonymous>~imageProperties~open~updateBorderRadius",
          "updateId": "<anonymous>~imageProperties~open~updateId",
          "updateStyle": "<anonymous>~imageProperties~open~updateStyle",
          "updateClasses": "<anonymous>~imageProperties~open~updateClasses",
          "updateMargins": "<anonymous>~imageProperties~open~updateMargins",
          "updateSizes": "<anonymous>~imageProperties~open~updateSizes",
          "updateText": "<anonymous>~imageProperties~open~updateText",
          "updateSrc": "<anonymous>~imageProperties~open~updateSrc",
          "update": "<anonymous>~imageProperties~open~update",
          "timer": "<anonymous>~imageProperties~open~timer",
          "lockSize": "<anonymous>~imageProperties~open~lockSize",
          "lockMargin": "<anonymous>~imageProperties~open~lockMargin",
          "tabs": "<anonymous>~imageProperties~open~tabs",
          "tabsbox": "<anonymous>~imageProperties~open~tabsbox",
          "tabs[undefined]": "<anonymous>~imageProperties~open~tabs.undefined]",
          "jodit_lock_size": "<anonymous>~imageProperties~open~jodit_lock_size",
          "jodit_lock_margin": "<anonymous>~imageProperties~open~jodit_lock_margin",
          "changeSizes": "<anonymous>~imageProperties~open~changeSizes"
        }
      },
      "description": "Open dialog editing image properties",
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor');\n    img = editor.editorDocument.createElement('img');\n\nimg.setAttribute('src', 'images/someimage.png');\neditor.{@link Selection~select|select}(img);\n// open the properties of the editing window\neditor.plugins.image.open.call(img); // `this` must be HTMLImageElement\n```"
      ],
      "name": "open",
      "longname": "<anonymous>~imageProperties~open",
      "kind": "function",
      "memberof": "<anonymous>~imageProperties",
      "scope": "inner",
      "params": [],
      "___id": "T000002R003721",
      "___s": true
    },
    {
      "comment": "/**\n * Support inline toolbar\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          508397,
          518653
        ],
        "filename": "jodit.js",
        "lineno": 13486,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100059156",
          "name": "inlinePopup",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Support inline toolbar",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "inlinePopup",
      "longname": "<anonymous>~inlinePopup",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R003928",
      "___s": true
    },
    {
      "comment": "/**\n         * Popup was opened for some selection text (not for image or link)\n         * @type {boolean}\n         */",
      "meta": {
        "range": [
          513777,
          513807
        ],
        "filename": "jodit.js",
        "lineno": 13598,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100059932",
          "name": "_this.isSelectionPopup",
          "type": "Literal",
          "funcscope": "<anonymous>~inlinePopup",
          "value": false,
          "paramnames": []
        }
      },
      "description": "Popup was opened for some selection text (not for image or link)",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "isSelectionPopup",
      "longname": "<anonymous>~inlinePopup~_this.isSelectionPopup",
      "kind": "member",
      "memberof": "<anonymous>~inlinePopup~_this",
      "scope": "static",
      "___id": "T000002R003980",
      "___s": true
    },
    {
      "comment": "/**\n * Process commands: `justifyfull`, `justifyleft`, `justifyright`, `justifycenter`\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          521483,
          523253
        ],
        "filename": "jodit.js",
        "lineno": 13793,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100060999",
          "name": "justify",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "callback": "<anonymous>~justify~callback",
          "": null
        }
      },
      "description": "Process commands: `justifyfull`, `justifyleft`, `justifyright`, `justifycenter`",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "justify",
      "longname": "<anonymous>~justify",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R004048",
      "___s": true
    },
    {
      "comment": "/**\n * Process link. Insert, dbclick or remove format\n *\n * @module plugins/link\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 13975,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Process link. Insert, dbclick or remove format",
      "kind": "module",
      "name": "plugins/link",
      "longname": "module:plugins/link",
      "scope": "inner",
      "memberof": "module:copyformat",
      "___id": "T000002R004093",
      "___s": true
    },
    {
      "comment": "/**\n * @property {boolean | number} limitWords=false limit words count\n */",
      "meta": {
        "range": [
          531458,
          531502
        ],
        "filename": "jodit.js",
        "lineno": 14053,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062190",
          "name": "Config_1.Config.prototype.limitWords",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": false,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean",
              "number"
            ]
          },
          "defaultvalue": false,
          "description": "limit words count",
          "name": "limitWords"
        }
      ],
      "name": "Config#limitWords",
      "longname": "<anonymous>~Config_1.Config#limitWords",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004113",
      "___s": true
    },
    {
      "comment": "/**\n * @property {boolean | number} limitChars=false limit chars count\n */",
      "meta": {
        "range": [
          531579,
          531623
        ],
        "filename": "jodit.js",
        "lineno": 14057,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062200",
          "name": "Config_1.Config.prototype.limitChars",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": false,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean",
              "number"
            ]
          },
          "defaultvalue": false,
          "description": "limit chars count",
          "name": "limitChars"
        }
      ],
      "name": "Config#limitChars",
      "longname": "<anonymous>~Config_1.Config#limitChars",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004114",
      "___s": true
    },
    {
      "comment": "/**\n * @property {boolean} limitHTML=false limit html chars count\n */",
      "meta": {
        "range": [
          531695,
          531738
        ],
        "filename": "jodit.js",
        "lineno": 14061,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062210",
          "name": "Config_1.Config.prototype.limitHTML",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": false,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": false,
          "description": "limit html chars count",
          "name": "limitHTML"
        }
      ],
      "name": "Config#limitHTML",
      "longname": "<anonymous>~Config_1.Config#limitHTML",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004115",
      "___s": true
    },
    {
      "comment": "/**\n * @property {string} mediaFakeTag='jodit-media' Decorate media element with tag\n */",
      "meta": {
        "range": [
          534172,
          534226
        ],
        "filename": "jodit.js",
        "lineno": 14126,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062531",
          "name": "Config_1.Config.prototype.mediaFakeTag",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": "jodit-media",
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "defaultvalue": "'jodit-media'",
          "description": "Decorate media element with tag",
          "name": "mediaFakeTag"
        }
      ],
      "name": "Config#mediaFakeTag",
      "longname": "<anonymous>~Config_1.Config#mediaFakeTag",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004129",
      "___s": true
    },
    {
      "comment": "/**\n * @property {boolean} mediaInFakeBlock=true Decorate media elements\n */",
      "meta": {
        "range": [
          534305,
          534354
        ],
        "filename": "jodit.js",
        "lineno": 14130,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062541",
          "name": "Config_1.Config.prototype.mediaInFakeBlock",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": true,
          "description": "Decorate media elements",
          "name": "mediaInFakeBlock"
        }
      ],
      "name": "Config#mediaInFakeBlock",
      "longname": "<anonymous>~Config_1.Config#mediaInFakeBlock",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004130",
      "___s": true
    },
    {
      "comment": "/**\n * @property {string[]} mediaBlocks=['video', 'audio'] Media tags\n */",
      "meta": {
        "range": [
          534430,
          534488
        ],
        "filename": "jodit.js",
        "lineno": 14134,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062551",
          "name": "Config_1.Config.prototype.mediaBlocks",
          "type": "ArrayExpression",
          "funcscope": "<anonymous>",
          "value": "[\"video\",\"audio\"]",
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "Array.<string>"
            ]
          },
          "defaultvalue": "['video',",
          "description": "'audio'] Media tags",
          "name": "mediaBlocks"
        }
      ],
      "name": "Config#mediaBlocks",
      "longname": "<anonymous>~Config_1.Config#mediaBlocks",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004131",
      "___s": true
    },
    {
      "comment": "/**\n * After resize it will change buttons set for different sizes\n *\n * @type {boolean}\n */",
      "meta": {
        "range": [
          537211,
          537259
        ],
        "filename": "jodit.js",
        "lineno": 14202,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100062901",
          "name": "Config_1.Config.prototype.toolbarAdaptive",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "description": "After resize it will change buttons set for different sizes",
      "type": {
        "names": [
          "boolean"
        ]
      },
      "name": "Config#toolbarAdaptive",
      "longname": "<anonymous>~Config_1.Config#toolbarAdaptive",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004155",
      "___s": true
    },
    {
      "comment": "/**\n * Rebuild toolbar in depends of editor's width\n */",
      "meta": {
        "range": [
          538200,
          539976
        ],
        "filename": "jodit.js",
        "lineno": 14228,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100063028",
          "name": "mobile",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "timeout": "<anonymous>~mobile~timeout",
          "now": "<anonymous>~mobile~now",
          "store": "<anonymous>~mobile~store",
          "": null
        }
      },
      "description": "Rebuild toolbar in depends of editor's width",
      "name": "mobile",
      "longname": "<anonymous>~mobile",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R004167",
      "___s": true
    },
    {
      "comment": "/**\n * Process commands insertOrderedList and insertUnOrderedList\n */",
      "meta": {
        "range": [
          540787,
          541673
        ],
        "filename": "jodit.js",
        "lineno": 14305,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100063374",
          "name": "orderedlist",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Process commands insertOrderedList and insertUnOrderedList",
      "name": "orderedlist",
      "longname": "<anonymous>~orderedlist",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R004194",
      "___s": true
    },
    {
      "comment": "/**\n * Ask before paste HTML source\n *\n * @module insertHTML\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 14354,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Ask before paste HTML source",
      "kind": "module",
      "name": "insertHTML",
      "longname": "module:insertHTML",
      "scope": "inner",
      "memberof": "module:plugins/link",
      "___id": "T000002R004211",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered before pasting something into the Jodit Editor\n         *\n         * @event beforePaste\n         * @param {ClipboardEvent} event\n         * @return Returning false in the handler assigned toWYSIWYG the event will cancel the current action.\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('beforePaste', function (event) {\n             *     return false; // deny paste\n             * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 14478,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered before pasting something into the Jodit Editor",
      "kind": "event",
      "name": "beforePaste",
      "params": [
        {
          "type": {
            "names": [
              "ClipboardEvent"
            ]
          },
          "name": "event"
        }
      ],
      "returns": [
        {
          "description": "Returning false in the handler assigned toWYSIWYG the event will cancel the current action."
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('beforePaste', function (event) {\n    return false; // deny paste\n});\n```"
      ],
      "longname": "event:beforePaste",
      "scope": "inner",
      "memberof": "module:insertHTML",
      "___id": "T000002R004243",
      "___s": true
    },
    {
      "comment": "/**\n                 * Triggered after the content is pasted from the clipboard into the Jodit. If a string is returned the new string will be used as the pasted content.\n                 *\n                 * @event beforePaste\n                 * @param {ClipboardEvent} event\n                 * @return Return {string|undefined}\n                 * @example\n                 * ```javascript\n                 * var editor = new Jodit(\"#redactor\");\n             * editor.events.on('beforePaste', function (event) {\n                     *     return false; // deny paste\n                     * });\n                 * ```\n                 */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 14520,
        "columnno": 16,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered after the content is pasted from the clipboard into the Jodit. If a string is returned the new string will be used as the pasted content.",
      "kind": "event",
      "name": "beforePaste",
      "params": [
        {
          "type": {
            "names": [
              "ClipboardEvent"
            ]
          },
          "name": "event"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "undefined"
            ]
          },
          "description": "Return"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('beforePaste', function (event) {\n    return false; // deny paste\n});\n```"
      ],
      "longname": "event:beforePaste",
      "scope": "inner",
      "memberof": "module:insertHTML",
      "___id": "T000002R004256",
      "___s": true
    },
    {
      "comment": "/**\n         * Triggered after pasting something into the Jodit\n         *\n         * @event afterPaste\n         * @param {ClipboardEvent} event\n         * @return Return {string|undefined}\n         * @example\n         * ```javascript\n         * var editor = new Jodit(\"#redactor\");\n         * editor.events.on('afterPaste', function (event) {\n             *     return false; // deny paste\n             * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 14548,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Triggered after pasting something into the Jodit",
      "kind": "event",
      "name": "afterPaste",
      "params": [
        {
          "type": {
            "names": [
              "ClipboardEvent"
            ]
          },
          "name": "event"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string",
              "undefined"
            ]
          },
          "description": "Return"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit(\"#redactor\");\neditor.events.on('afterPaste', function (event) {\n    return false; // deny paste\n});\n```"
      ],
      "longname": "event:afterPaste",
      "scope": "inner",
      "memberof": "module:insertHTML",
      "___id": "T000002R004259",
      "___s": true
    },
    {
      "comment": "/**\n * @property {boolean} useInputsPlaceholder=true use a placeholder from original input field, if it was set\n * @example\n * ```javascript\n * //<textarea id=\"editor\" placeholder=\"start typing text ...\" cols=\"30\" rows=\"10\"></textarea>\n * var editor = new Jodit('#editor', {\n *    useInputsPlaceholder: true\n * });\n * ```\n */",
      "meta": {
        "range": [
          556667,
          556720
        ],
        "filename": "jodit.js",
        "lineno": 14675,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065026",
          "name": "Config_1.Config.prototype.useInputsPlaceholder",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": true,
          "description": "use a placeholder from original input field, if it was set",
          "name": "useInputsPlaceholder"
        }
      ],
      "examples": [
        "```javascript\n//<textarea id=\"editor\" placeholder=\"start typing text ...\" cols=\"30\" rows=\"10\"></textarea>\nvar editor = new Jodit('#editor', {\n   useInputsPlaceholder: true\n});\n```"
      ],
      "name": "Config#useInputsPlaceholder",
      "longname": "<anonymous>~Config_1.Config#useInputsPlaceholder",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004280",
      "___s": true
    },
    {
      "comment": "/**\n * @property {string} placeholder='Type something' Default placeholder\n * @example\n * ```javascript\n * var editor = new Jodit('#editor', {\n *    placeholder: 'start typing text ...'\n * });\n * ```\n */",
      "meta": {
        "range": [
          556926,
          556982
        ],
        "filename": "jodit.js",
        "lineno": 14685,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065036",
          "name": "Config_1.Config.prototype.placeholder",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": "Type something",
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "defaultvalue": "'Type",
          "description": "something' Default placeholder",
          "name": "placeholder"
        }
      ],
      "examples": [
        "```javascript\nvar editor = new Jodit('#editor', {\n   placeholder: 'start typing text ...'\n});\n```"
      ],
      "name": "Config#placeholder",
      "longname": "<anonymous>~Config_1.Config#placeholder",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004281",
      "___s": true
    },
    {
      "comment": "/**\n * Show placeholder inside empty editor\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          557060,
          560195
        ],
        "filename": "jodit.js",
        "lineno": 14691,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065045",
          "name": "placeholder",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "this.destruct": "<anonymous>~placeholder#destruct",
          "": null,
          "show": "<anonymous>~placeholder~show",
          "hide": "<anonymous>~placeholder~hide",
          "toggle": "<anonymous>~placeholder~toggle",
          "placeholder": "<anonymous>~placeholder~placeholder",
          "placeholder.style.right": "<anonymous>~placeholder~placeholder.style.right",
          "placeholder.style.direction": "<anonymous>~placeholder~placeholder.style.direction",
          "placeholder.innerHTML": "<anonymous>~placeholder~placeholder.innerHTML"
        }
      },
      "description": "Show placeholder inside empty editor",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "placeholder",
      "longname": "<anonymous>~placeholder",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R004282",
      "___s": true
    },
    {
      "comment": "/**\n * Custom process Redo and Undo functionality\n */",
      "meta": {
        "range": [
          561668,
          562392
        ],
        "filename": "jodit.js",
        "lineno": 14815,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065709",
          "name": "redoundo",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Custom process Redo and Undo functionality",
      "name": "redoundo",
      "longname": "<anonymous>~redoundo",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R004329",
      "___s": true
    },
    {
      "comment": "/**\n * @property{boolean} useTableResizer=true Use true frame for editing table size\n */",
      "meta": {
        "range": [
          563005,
          563053
        ],
        "filename": "jodit.js",
        "lineno": 14859,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065849",
          "name": "Config_1.Config.prototype.useTableResizer",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "useTableResizer=true Use true frame for editing table size",
          "value": "useTableResizer=true Use true frame for editing table size"
        }
      ],
      "name": "Config#useTableResizer",
      "longname": "<anonymous>~Config_1.Config#useTableResizer",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004343",
      "___s": true
    },
    {
      "comment": "/**\n * @property{boolean} useImageResizer=true Use true image editing frame size\n */",
      "meta": {
        "range": [
          563140,
          563188
        ],
        "filename": "jodit.js",
        "lineno": 14863,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065859",
          "name": "Config_1.Config.prototype.useImageResizer",
          "type": "Literal",
          "funcscope": "<anonymous>",
          "value": true,
          "paramnames": []
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "useImageResizer=true Use true image editing frame size",
          "value": "useImageResizer=true Use true image editing frame size"
        }
      ],
      "name": "Config#useImageResizer",
      "longname": "<anonymous>~Config_1.Config#useImageResizer",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004344",
      "___s": true
    },
    {
      "comment": "/**\n * @property {object} resizer\n * @property {int} resizer.min_width=10 The minimum width for the editable element\n * @property {int} resizer.min_height=10 The minimum height for the item being edited\n * @property {boolean} resizer.showSize=true Show size\n */",
      "meta": {
        "range": [
          563452,
          563576
        ],
        "filename": "jodit.js",
        "lineno": 14870,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065869",
          "name": "Config_1.Config.prototype.resizer",
          "type": "ObjectExpression",
          "funcscope": "<anonymous>",
          "value": "{\"showSize\":true,\"hideSizeTimeout\":1000,\"min_width\":10,\"min_height\":10}",
          "paramnames": []
        }
      },
      "properties": [
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "name": "resizer"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "defaultvalue": 10,
          "description": "The minimum width for the editable element",
          "name": "resizer.min_width"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "defaultvalue": 10,
          "description": "The minimum height for the item being edited",
          "name": "resizer.min_height"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "defaultvalue": true,
          "description": "Show size",
          "name": "resizer.showSize"
        }
      ],
      "name": "Config#resizer",
      "longname": "<anonymous>~Config_1.Config#resizer",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004345",
      "___s": true
    },
    {
      "comment": "/**\n * Resize table and img\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          563635,
          575691
        ],
        "filename": "jodit.js",
        "lineno": 14880,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100065886",
          "name": "resizer",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "LOCK_KEY": "<anonymous>~resizer~LOCK_KEY",
          "handle": "<anonymous>~resizer~handle",
          "currentElement": "<anonymous>~resizer~currentElement",
          "resizeElementClicked": "<anonymous>~resizer~resizeElementClicked",
          "isResizing": "<anonymous>~resizer~isResizing",
          "start_x": "<anonymous>~resizer~start_x",
          "start_y": "<anonymous>~resizer~start_y",
          "width": "<anonymous>~resizer~width",
          "height": "<anonymous>~resizer~height",
          "ratio": "<anonymous>~resizer~ratio",
          "new_h": "<anonymous>~resizer~new_h",
          "new_w": "<anonymous>~resizer~new_w",
          "diff_x": "<anonymous>~resizer~diff_x",
          "diff_y": "<anonymous>~resizer~diff_y",
          "resizerIsVisible": "<anonymous>~resizer~resizerIsVisible",
          "timeoutSizeViewer": "<anonymous>~resizer~timeoutSizeViewer",
          "resizer": "<anonymous>~resizer~resizer",
          "sizeViewer": "<anonymous>~resizer~sizeViewer",
          "hideResizer": "<anonymous>~resizer~hideResizer",
          "": null,
          "hideSizeViewer": "<anonymous>~resizer~hideSizeViewer",
          "showSizeViewer": "<anonymous>~resizer~showSizeViewer",
          "updateSize": "<anonymous>~resizer~updateSize",
          "showResizer": "<anonymous>~resizer~showResizer",
          "bind": "<anonymous>~resizer~bind"
        }
      },
      "description": "Resize table and img",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "resizer",
      "longname": "<anonymous>~resizer",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R004350",
      "___s": true
    },
    {
      "comment": "/**\n     * Bind an edit element toWYSIWYG element\n     * @param {HTMLElement} element The element that you want toWYSIWYG add a function toWYSIWYG resize\n     */",
      "meta": {
        "range": [
          567308,
          569956
        ],
        "filename": "jodit.js",
        "lineno": 14951,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100066335",
          "name": "bind",
          "type": "FunctionExpression"
        },
        "vars": {
          "wrapper": "module:insertHTML~wrapper",
          "iframe_1": "<anonymous>~resizer~bind~iframe_1",
          "element": "module:insertHTML~element",
          "wrapper.style.display": "module:insertHTML~wrapper.style.display",
          "wrapper.style.width": "module:insertHTML~wrapper.style.width",
          "wrapper.style.height": "module:insertHTML~wrapper.style.height",
          "": null,
          "timer": "<anonymous>~resizer~bind~timer"
        }
      },
      "description": "Bind an edit element toWYSIWYG element",
      "params": [
        {
          "type": {
            "names": [
              "HTMLElement"
            ]
          },
          "description": "The element that you want toWYSIWYG add a function toWYSIWYG resize",
          "name": "element"
        }
      ],
      "name": "bind",
      "longname": "<anonymous>~resizer~bind",
      "kind": "function",
      "memberof": "<anonymous>~resizer",
      "scope": "inner",
      "___id": "T000002R004397",
      "___s": true
    },
    {
      "comment": "/**\n * Resize editor\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          576269,
          580801
        ],
        "filename": "jodit.js",
        "lineno": 15174,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100067360",
          "name": "size",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "setHeight": "<anonymous>~size~setHeight",
          "": null,
          "setWidth": "<anonymous>~size~setWidth",
          "setHeightWorkPlace": "<anonymous>~size~setHeightWorkPlace",
          "handle_1": "<anonymous>~size~handle_1",
          "start_1": "<anonymous>~size~start_1",
          "isResized_1": "<anonymous>~size~isResized_1",
          "getNotWorkHeight": "<anonymous>~size~getNotWorkHeight",
          "calcMinHeightWorkspace": "<anonymous>~size~calcMinHeightWorkspace",
          "resizeWorkspaceImd": "<anonymous>~size~resizeWorkspaceImd",
          "resizeWorkspace": "<anonymous>~size~resizeWorkspace"
        }
      },
      "description": "Resize editor",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "size",
      "longname": "<anonymous>~size",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R004441",
      "___s": true
    },
    {
      "comment": "/**\n     * Show gutter\n     */",
      "meta": {
        "range": [
          582123,
          582139
        ],
        "filename": "jodit.js",
        "lineno": 15315,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100068192",
          "name": "showGutter",
          "type": "Literal",
          "value": true
        }
      },
      "description": "Show gutter",
      "name": "showGutter",
      "longname": "<anonymous>~Config_1.Config#sourceEditorNativeOptions.showGutter",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#sourceEditorNativeOptions",
      "scope": "static",
      "___id": "T000002R004492",
      "___s": true
    },
    {
      "comment": "/**\n     * Default theme\n     */",
      "meta": {
        "range": [
          582182,
          582213
        ],
        "filename": "jodit.js",
        "lineno": 15319,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100068194",
          "name": "theme",
          "type": "Literal",
          "value": "ace/theme/idle_fingers"
        }
      },
      "description": "Default theme",
      "name": "theme",
      "longname": "<anonymous>~Config_1.Config#sourceEditorNativeOptions.theme",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#sourceEditorNativeOptions",
      "scope": "static",
      "___id": "T000002R004493",
      "___s": true
    },
    {
      "comment": "/**\n     * Default mode\n     */",
      "meta": {
        "range": [
          582255,
          582276
        ],
        "filename": "jodit.js",
        "lineno": 15323,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100068196",
          "name": "mode",
          "type": "Literal",
          "value": "ace/mode/html"
        }
      },
      "description": "Default mode",
      "name": "mode",
      "longname": "<anonymous>~Config_1.Config#sourceEditorNativeOptions.mode",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#sourceEditorNativeOptions",
      "scope": "static",
      "___id": "T000002R004494",
      "___s": true
    },
    {
      "comment": "/**\n     * Wrap lines. Possible values - \"off\", 80-100..., true, \"free\"\n     */",
      "meta": {
        "range": [
          582366,
          582376
        ],
        "filename": "jodit.js",
        "lineno": 15327,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100068198",
          "name": "wrap",
          "type": "Literal",
          "value": true
        }
      },
      "description": "Wrap lines. Possible values - \"off\", 80-100..., true, \"free\"",
      "name": "wrap",
      "longname": "<anonymous>~Config_1.Config#sourceEditorNativeOptions.wrap",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#sourceEditorNativeOptions",
      "scope": "static",
      "___id": "T000002R004495",
      "___s": true
    },
    {
      "comment": "/**\n     * Highlight active line\n     */",
      "meta": {
        "range": [
          582427,
          582452
        ],
        "filename": "jodit.js",
        "lineno": 15331,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100068200",
          "name": "highlightActiveLine",
          "type": "Literal",
          "value": true
        }
      },
      "description": "Highlight active line",
      "name": "highlightActiveLine",
      "longname": "<anonymous>~Config_1.Config#sourceEditorNativeOptions.highlightActiveLine",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#sourceEditorNativeOptions",
      "scope": "static",
      "___id": "T000002R004496",
      "___s": true
    },
    {
      "comment": "/**\n * Plug-in change simple textarea on CodeMirror editor in Source code mode\n *\n * @module source\n */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 15350,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Plug-in change simple textarea on CodeMirror editor in Source code mode",
      "kind": "module",
      "name": "source",
      "longname": "module:source",
      "scope": "inner",
      "memberof": "module:insertHTML",
      "___id": "T000002R004504",
      "___s": true
    },
    {
      "comment": "/**\n * The plugin inserts characters that are not part of the standard keyboard.\n */",
      "meta": {
        "range": [
          605589,
          609780
        ],
        "filename": "jodit.js",
        "lineno": 15825,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100071128",
          "name": "symbols",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The plugin inserts characters that are not part of the standard keyboard.",
      "name": "symbols",
      "longname": "<anonymous>~symbols",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R004659",
      "___s": true
    },
    {
      "comment": "/**\n * You can redefine hotkeys for some command\n *\n * var jodit = new Jodit('#editor', {\n *  commandToHotkeys: {\n *      bold: 'ctrl+shift+b',\n *      italic: ['ctrl+i', 'ctrl+b'],\n *  }\n * })\n * @type {{}}\n */",
      "meta": {
        "range": [
          611053,
          611300
        ],
        "filename": "jodit.js",
        "lineno": 15943,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100071807",
          "name": "Config_1.Config.prototype.commandToHotkeys",
          "type": "ObjectExpression",
          "funcscope": "<anonymous>",
          "value": "{\"removeFormat\":\"\",\"insertOrderedList\":\"\",\"insertUnorderedList\":\"\",\"selectall\":\"\"}",
          "paramnames": []
        }
      },
      "description": "You can redefine hotkeys for some command\n\nvar jodit = new Jodit('#editor', {\n commandToHotkeys: {\n     bold: 'ctrl+shift+b',\n     italic: ['ctrl+i', 'ctrl+b'],\n }\n})",
      "type": {
        "names": [
          "Object"
        ]
      },
      "name": "Config#commandToHotkeys",
      "longname": "<anonymous>~Config_1.Config#commandToHotkeys",
      "kind": "member",
      "memberof": "<anonymous>~Config_1",
      "scope": "static",
      "___id": "T000002R004701",
      "___s": true
    },
    {
      "comment": "/**\n * Allow set hotkey for command or button\n */",
      "meta": {
        "range": [
          611356,
          614781
        ],
        "filename": "jodit.js",
        "lineno": 15952,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100071832",
          "name": "hotkeys",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Allow set hotkey for command or button",
      "name": "hotkeys",
      "longname": "<anonymous>~hotkeys",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R004706",
      "___s": true
    },
    {
      "comment": "/**\n * Process tables in editor\n */",
      "meta": {
        "range": [
          623075,
          639788
        ],
        "filename": "jodit.js",
        "lineno": 16246,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100073300",
          "name": "TableProcessor",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Process tables in editor",
      "name": "TableProcessor",
      "longname": "<anonymous>~TableProcessor",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R004875",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {Jodit} editor\n     */",
      "meta": {
        "range": [
          623222,
          633637
        ],
        "filename": "jodit.js",
        "lineno": 16252,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100073311",
          "name": "TableProcessor",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "_this": "<anonymous>~TableProcessor~_this",
          "_this.__key": "<anonymous>~TableProcessor~_this.__key",
          "_this.__selectMode": "<anonymous>~TableProcessor~_this.__selectMode",
          "_this.__resizerDelta": "<anonymous>~TableProcessor~_this.__resizerDelta",
          "_this.__drag": "<anonymous>~TableProcessor~_this.__drag",
          "_this.__addResizer": "<anonymous>~TableProcessor~_this.__addResizer",
          "": null,
          "_this.onExecCommand": "<anonymous>~TableProcessor~_this.onExecCommand"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "TableProcessor",
      "longname": "<anonymous>~TableProcessor",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R004876",
      "___s": true
    },
    {
      "comment": "/**\n         *\n         * @param {string} command\n         */",
      "meta": {
        "range": [
          626799,
          629129
        ],
        "filename": "jodit.js",
        "lineno": 16319,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100073725",
          "name": "_this.onExecCommand",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>~TableProcessor",
          "paramnames": [
            "command"
          ]
        },
        "vars": {
          "command": "module:source~command",
          "cells": "<anonymous>~TableProcessor~_this.onExecCommand~cells",
          "cell": "<anonymous>~TableProcessor~_this.onExecCommand~cell",
          "table": "<anonymous>~TableProcessor~_this.onExecCommand~table",
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "command"
        }
      ],
      "name": "onExecCommand",
      "longname": "<anonymous>~TableProcessor~_this.onExecCommand",
      "kind": "function",
      "memberof": "<anonymous>~TableProcessor~_this",
      "scope": "static",
      "___id": "T000002R004905",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {HTMLTableElement} [table]\n     * @param {HTMLTableCellElement} [current_cell]\n     * @private\n     */",
      "meta": {
        "range": [
          633774,
          634220
        ],
        "filename": "jodit.js",
        "lineno": 16456,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100074548",
          "name": "TableProcessor.prototype.__deSelectAll",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "current_cell"
          ]
        },
        "vars": {
          "cells": "<anonymous>~TableProcessor#__deSelectAll~cells",
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "optional": true,
          "name": "table"
        },
        {
          "type": {
            "names": [
              "HTMLTableCellElement"
            ]
          },
          "optional": true,
          "name": "current_cell"
        }
      ],
      "access": "private",
      "name": "__deSelectAll",
      "longname": "<anonymous>~TableProcessor#__deSelectAll",
      "kind": "function",
      "memberof": "<anonymous>~TableProcessor",
      "scope": "instance",
      "___id": "T000002R004928",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {HTMLTableCellElement} cell\n     * @param {boolean|null} [wholeTable=null] true - resize whole table by left side, false - resize whole table by right side, null - resize column\n     * @private\n     */",
      "meta": {
        "range": [
          634564,
          634902
        ],
        "filename": "jodit.js",
        "lineno": 16475,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100074631",
          "name": "TableProcessor.prototype.__setWorkCell",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "cell",
            "wholeTable"
          ]
        },
        "vars": {
          "wholeTable": "module:source~wholeTable",
          "this.__wholeTable": "<anonymous>~TableProcessor#__setWorkCell#__wholeTable",
          "this.__workCell": "<anonymous>~TableProcessor#__setWorkCell#__workCell",
          "this.__workTable": "<anonymous>~TableProcessor#__setWorkCell#__workTable",
          "": null
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableCellElement"
            ]
          },
          "name": "cell"
        },
        {
          "type": {
            "names": [
              "boolean",
              "null"
            ]
          },
          "optional": true,
          "defaultvalue": null,
          "description": "true - resize whole table by left side, false - resize whole table by right side, null - resize column",
          "name": "wholeTable"
        }
      ],
      "access": "private",
      "name": "__setWorkCell",
      "longname": "<anonymous>~TableProcessor#__setWorkCell",
      "kind": "function",
      "memberof": "<anonymous>~TableProcessor",
      "scope": "instance",
      "___id": "T000002R004931",
      "___s": true
    },
    {
      "comment": "/**\n     * Calc helper resizer position\n     *\n     * @param {HTMLTableElement} table\n     * @param {HTMLTableCellElement} cell\n     * @param {int} [offsetX=0]\n     * @param {int} [delta=0]\n     *\n     * @private\n     */",
      "meta": {
        "range": [
          635133,
          636529
        ],
        "filename": "jodit.js",
        "lineno": 16491,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100074692",
          "name": "TableProcessor.prototype.__calcResizerPosition",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "table",
            "cell",
            "offsetX",
            "delta"
          ]
        },
        "vars": {
          "offsetX": "module:source~offsetX",
          "delta": "module:source~delta",
          "box": "<anonymous>~TableProcessor#__calcResizerPosition~box",
          "parentBox": "<anonymous>~TableProcessor#__calcResizerPosition~parentBox",
          "this.__resizerHandler.style.left": "<anonymous>~TableProcessor#__calcResizerPosition#__resizerHandler.style.left",
          "this.__resizerHandler.style.height": "<anonymous>~TableProcessor#__calcResizerPosition#__resizerHandler.style.height",
          "this.__resizerHandler.style.top": "<anonymous>~TableProcessor#__calcResizerPosition#__resizerHandler.style.top",
          "this.__resizerHandler.style.display": "<anonymous>~TableProcessor#__calcResizerPosition#__resizerHandler.style.display",
          "prevTD": "<anonymous>~TableProcessor#__calcResizerPosition~prevTD",
          "nextTD": "<anonymous>~TableProcessor#__calcResizerPosition~nextTD"
        }
      },
      "description": "Calc helper resizer position",
      "params": [
        {
          "type": {
            "names": [
              "HTMLTableElement"
            ]
          },
          "name": "table"
        },
        {
          "type": {
            "names": [
              "HTMLTableCellElement"
            ]
          },
          "name": "cell"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "name": "offsetX"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "optional": true,
          "defaultvalue": 0,
          "name": "delta"
        }
      ],
      "access": "private",
      "name": "__calcResizerPosition",
      "longname": "<anonymous>~TableProcessor#__calcResizerPosition",
      "kind": "function",
      "memberof": "<anonymous>~TableProcessor",
      "scope": "instance",
      "___id": "T000002R004936",
      "___s": true
    },
    {
      "comment": "/**\n     * Set cookie value\n     *\n     * @method set\n     * @param {string|number} name\n     * @param {string|number} value\n     * @param {int} [days] if it value < 0 cookie removed\n     * @example\n     * ```javascript\n     * Jodit.modules.Cookie.set('somename', somevalue, 5);\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 16608,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Set cookie value",
      "kind": "function",
      "name": "set",
      "params": [
        {
          "type": {
            "names": [
              "string",
              "number"
            ]
          },
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string",
              "number"
            ]
          },
          "name": "value"
        },
        {
          "type": {
            "names": [
              "int"
            ]
          },
          "optional": true,
          "description": "if it value < 0 cookie removed",
          "name": "days"
        }
      ],
      "examples": [
        "```javascript\nJodit.modules.Cookie.set('somename', somevalue, 5);\n```"
      ],
      "longname": "module:source~set",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R004975",
      "___s": true
    },
    {
      "comment": "/**\n     * Get cookie value by key\n     *\n     * @method get\n     * @param {string} name\n     * @return {string}\n     * @example\n     * ```javascript\n     * console.log(Jodit.modules.Cookie.get('somename'));\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 16632,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Get cookie value by key",
      "kind": "function",
      "name": "get",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "name"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "string"
            ]
          }
        }
      ],
      "examples": [
        "```javascript\nconsole.log(Jodit.modules.Cookie.get('somename'));\n```"
      ],
      "longname": "module:source~get",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R004983",
      "___s": true
    },
    {
      "comment": "/**\n     * Remove cookie by key\n     *\n     * @method remove\n     * @param {string} name\n     * @example\n     * ```javascript\n     * Jodit.modules.Cookie.remove('somename');\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 16656,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Remove cookie by key",
      "kind": "function",
      "name": "remove",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "name"
        }
      ],
      "examples": [
        "```javascript\nJodit.modules.Cookie.remove('somename');\n```"
      ],
      "longname": "module:source~remove",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R004993",
      "___s": true
    },
    {
      "comment": "/**\n         * Container for set/get value\n         * @type {Storage}\n         */",
      "meta": {
        "range": [
          653531,
          653606
        ],
        "filename": "jodit.js",
        "lineno": 16983,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100077111",
          "name": "_this.storage",
          "type": "NewExpression",
          "funcscope": "<anonymous>~FileBrowser",
          "value": "",
          "paramnames": []
        }
      },
      "description": "Container for set/get value",
      "type": {
        "names": [
          "Storage"
        ]
      },
      "name": "storage",
      "longname": "<anonymous>~FileBrowser~_this.storage",
      "kind": "member",
      "memberof": "<anonymous>~FileBrowser~_this",
      "scope": "static",
      "___id": "T000002R005162",
      "___s": true
    },
    {
      "comment": "/**\n         * Get path by url. You can use this method in another modules\n         *\n         * @method getPathByUrl\n         * @param {string} url Full url\n         * @param {function} success\n         * @param {string} success.path path toWYSIWYG file from connector's root (without filename)\n         * @param {string} success.name filename\n         * @param {function} onFailed filename\n         * @param {string} onFailed.message\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 16989,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Get path by url. You can use this method in another modules",
      "kind": "function",
      "name": "getPathByUrl",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Full url",
          "name": "url"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "success"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "path toWYSIWYG file from connector's root (without filename)",
          "name": "success.path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "filename",
          "name": "success.name"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "filename",
          "name": "onFailed"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "onFailed.message"
        }
      ],
      "longname": "module:source~getPathByUrl",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005168",
      "___s": true
    },
    {
      "comment": "/**\n         * Create a directory on the server\n         *\n         * @method create\n         * @param {string} name Name the new folder\n         * @param {string} path Relative toWYSIWYG the directory in which you want toWYSIWYG create a folder\n         * @param {string} source Server source key\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17035,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Create a directory on the server",
      "kind": "function",
      "name": "create",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Name the new folder",
          "name": "name"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Relative toWYSIWYG the directory in which you want toWYSIWYG create a folder",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Server source key",
          "name": "source"
        }
      ],
      "longname": "module:source~create",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005180",
      "___s": true
    },
    {
      "comment": "/**\n         * Move a file / directory on the server\n         *\n         * @method move\n         * @param {string} filepath The relative path toWYSIWYG the file / folder source\n         * @param {string} path Relative toWYSIWYG the directory where you want toWYSIWYG move the file / folder\n         * @param {string} source Source\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17060,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Move a file / directory on the server",
      "kind": "function",
      "name": "move",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "The relative path toWYSIWYG the file / folder source",
          "name": "filepath"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Relative toWYSIWYG the directory where you want toWYSIWYG move the file / folder",
          "name": "path"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Source",
          "name": "source"
        }
      ],
      "longname": "module:source~move",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005187",
      "___s": true
    },
    {
      "comment": "/**\n         * Close dialog\n         * @method close\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17083,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Close dialog",
      "kind": "function",
      "name": "close",
      "longname": "module:source~close",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005192",
      "___s": true
    },
    {
      "comment": "/**\n         * It opens a web browser window\n         *\n         * @param {Function} callback The function that will be called after the file selection in the browser\n         * @param {boolean} [onlyImages=false] Show only images\n         * @example\n         * ```javascript\n         * var fb = new Jodit.modules.FileBrowser(parent);\n         * fb.open(function (data) {\n         *     var i;\n         *     for (i = 0;i < data.files.length; i += 1) {\n         *         parent.selection.insertImage(data.baseurl + data.files[i]);\n         *     }\n         * });\n         * ```\n         * @return Promise\n         */",
      "meta": {
        "range": [
          658501,
          660206
        ],
        "filename": "jodit.js",
        "lineno": 17108,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100077599",
          "name": "_this.open",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>~FileBrowser",
          "paramnames": [
            "callback",
            "onlyImages"
          ]
        },
        "vars": {
          "onlyImages": "module:source~onlyImages",
          "_this.onlyImages": "<anonymous>~FileBrowser~_this.onlyImages",
          "_this.buffer.fileBrowserOnlyImages": "<anonymous>~FileBrowser~_this.buffer.fileBrowserOnlyImages",
          "": null
        }
      },
      "description": "It opens a web browser window",
      "params": [
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "The function that will be called after the file selection in the browser",
          "name": "callback"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "defaultvalue": false,
          "description": "Show only images",
          "name": "onlyImages"
        }
      ],
      "examples": [
        "```javascript\nvar fb = new Jodit.modules.FileBrowser(parent);\nfb.open(function (data) {\n    var i;\n    for (i = 0;i < data.files.length; i += 1) {\n        parent.selection.insertImage(data.baseurl + data.files[i]);\n    }\n});\n```"
      ],
      "returns": [
        {
          "description": "Promise"
        }
      ],
      "name": "open",
      "longname": "<anonymous>~FileBrowser~_this.open",
      "kind": "function",
      "memberof": "<anonymous>~FileBrowser~_this",
      "scope": "static",
      "___id": "T000002R005195",
      "___s": true
    },
    {
      "comment": "/**\n         * Open Image Editor\n         *\n         * @method openImageEditor\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17152,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Open Image Editor",
      "kind": "function",
      "name": "openImageEditor",
      "longname": "module:source~openImageEditor",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005205",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @return {boolean}\n     */",
      "meta": {
        "range": [
          677781,
          677913
        ],
        "filename": "jodit.js",
        "lineno": 17460,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100080114",
          "name": "FileBrowser.prototype.isOpened",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": []
        }
      },
      "returns": [
        {
          "type": {
            "names": [
              "boolean"
            ]
          }
        }
      ],
      "name": "isOpened",
      "longname": "<anonymous>~FileBrowser#isOpened",
      "kind": "function",
      "memberof": "<anonymous>~FileBrowser",
      "scope": "instance",
      "___id": "T000002R005290",
      "___s": true
    },
    {
      "comment": "/**\n     * It displays a message in the status bar of filebrowser\n     *\n     * @method status\n     * @param {string} message Message\n     * @param {boolean} [success] true It will be shown a message light . If no option is specified , an error will be shown the red\n     * @example\n     * ```javascript\n     * parent.filebrowser.status('There was an error uploading file', false);\n     * ```\n     */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17463,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "It displays a message in the status bar of filebrowser",
      "kind": "function",
      "name": "status",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "Message",
          "name": "message"
        },
        {
          "type": {
            "names": [
              "boolean"
            ]
          },
          "optional": true,
          "description": "true It will be shown a message light . If no option is specified , an error will be shown the red",
          "name": "success"
        }
      ],
      "examples": [
        "```javascript\nparent.filebrowser.status('There was an error uploading file', false);\n```"
      ],
      "longname": "module:source~status",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005291",
      "___s": true
    },
    {
      "comment": "/**\n     *\n     * @param {string} name\n     * @param {Function} success\n     * @param {Function} error\n     * @return {Promise}\n     */",
      "meta": {
        "range": [
          682099,
          682557
        ],
        "filename": "jodit.js",
        "lineno": 17553,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100080645",
          "name": "FileBrowser.prototype.send",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "name",
            "success",
            "error"
          ]
        },
        "vars": {
          "opts": "<anonymous>~FileBrowser#send~opts",
          "opts.data": "<anonymous>~FileBrowser#send~opts.data",
          "ajax": "<anonymous>~FileBrowser#send~ajax"
        }
      },
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "name"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "success"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "error"
        }
      ],
      "returns": [
        {
          "type": {
            "names": [
              "Promise"
            ]
          }
        }
      ],
      "name": "send",
      "longname": "<anonymous>~FileBrowser#send",
      "kind": "function",
      "memberof": "<anonymous>~FileBrowser",
      "scope": "instance",
      "___id": "T000002R005309",
      "___s": true
    },
    {
      "comment": "/**\n     * Deleting a file\n     *\n     * @param path Relative path\n     * @param file The filename\n     * @param source Source\n     */",
      "meta": {
        "range": [
          685328,
          686141
        ],
        "filename": "jodit.js",
        "lineno": 17635,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081103",
          "name": "FileBrowser.prototype.fileRemove",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "path",
            "file",
            "source"
          ]
        },
        "vars": {
          "_this": "<anonymous>~FileBrowser#fileRemove~_this",
          "this.options.fileRemove.data.path": "<anonymous>~FileBrowser#fileRemove#options.fileRemove.data.path",
          "this.options.fileRemove.data.name": "<anonymous>~FileBrowser#fileRemove#options.fileRemove.data.name",
          "this.options.fileRemove.data.source": "<anonymous>~FileBrowser#fileRemove#options.fileRemove.data.source",
          "": null
        }
      },
      "description": "Deleting a file",
      "params": [
        {
          "description": "Relative path",
          "name": "path"
        },
        {
          "description": "The filename",
          "name": "file"
        },
        {
          "description": "Source",
          "name": "source"
        }
      ],
      "name": "fileRemove",
      "longname": "<anonymous>~FileBrowser#fileRemove",
      "kind": "function",
      "memberof": "<anonymous>~FileBrowser",
      "scope": "instance",
      "___id": "T000002R005332",
      "___s": true
    },
    {
      "comment": "/**\n     * Deleting a folder\n     *\n     * @param path Relative path\n     * @param file The filename\n     * @param source Source\n     */",
      "meta": {
        "range": [
          686288,
          687111
        ],
        "filename": "jodit.js",
        "lineno": 17663,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081240",
          "name": "FileBrowser.prototype.folderRemove",
          "type": "FunctionExpression",
          "funcscope": "<anonymous>",
          "paramnames": [
            "path",
            "file",
            "source"
          ]
        },
        "vars": {
          "_this": "<anonymous>~FileBrowser#folderRemove~_this",
          "this.options.folderRemove.data.path": "<anonymous>~FileBrowser#folderRemove#options.folderRemove.data.path",
          "this.options.folderRemove.data.name": "<anonymous>~FileBrowser#folderRemove#options.folderRemove.data.name",
          "this.options.folderRemove.data.source": "<anonymous>~FileBrowser#folderRemove#options.folderRemove.data.source",
          "": null
        }
      },
      "description": "Deleting a folder",
      "params": [
        {
          "description": "Relative path",
          "name": "path"
        },
        {
          "description": "The filename",
          "name": "file"
        },
        {
          "description": "Source",
          "name": "source"
        }
      ],
      "name": "folderRemove",
      "longname": "<anonymous>~FileBrowser#folderRemove",
      "kind": "function",
      "memberof": "<anonymous>~FileBrowser",
      "scope": "instance",
      "___id": "T000002R005338",
      "___s": true
    },
    {
      "comment": "/**\n         * Return default timeout period in milliseconds for some debounce or throttle functions. By default return {observer.timeout} options\n         *\n         * @return {number}\n         */",
      "meta": {
        "range": [
          688095,
          688232
        ],
        "filename": "jodit.js",
        "lineno": 17711,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081464",
          "name": "get",
          "type": "FunctionExpression"
        }
      },
      "description": "Return default timeout period in milliseconds for some debounce or throttle functions. By default return {observer.timeout} options",
      "returns": [
        {
          "type": {
            "names": [
              "number"
            ]
          }
        }
      ],
      "name": "get",
      "longname": "module:source~get",
      "kind": "function",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005351",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{boolean} imageeditor.closeAfterSave=false Close editor after save image\n     */",
      "meta": {
        "range": [
          689668,
          689689
        ],
        "filename": "jodit.js",
        "lineno": 17757,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081678",
          "name": "closeAfterSave",
          "type": "Literal",
          "value": false
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "imageeditor.closeAfterSave=false Close editor after save image",
          "value": "imageeditor.closeAfterSave=false Close editor after save image"
        }
      ],
      "name": "closeAfterSave",
      "longname": "<anonymous>~Config_1.Config#imageeditor.closeAfterSave",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005373",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{string|int} imageeditor.width=85% Default dialog width by screen\n     */",
      "meta": {
        "range": [
          689793,
          689805
        ],
        "filename": "jodit.js",
        "lineno": 17761,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081680",
          "name": "width",
          "type": "Literal",
          "value": "85%"
        }
      },
      "tags": [
        {
          "originalTitle": "property{string|int}",
          "title": "property{string|int}",
          "text": "imageeditor.width=85% Default dialog width by screen",
          "value": "imageeditor.width=85% Default dialog width by screen"
        }
      ],
      "name": "width",
      "longname": "<anonymous>~Config_1.Config#imageeditor.width",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005374",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{string|int} imageeditor.height=85% Default dialog height by screen\n     */",
      "meta": {
        "range": [
          689911,
          689924
        ],
        "filename": "jodit.js",
        "lineno": 17765,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081682",
          "name": "height",
          "type": "Literal",
          "value": "85%"
        }
      },
      "tags": [
        {
          "originalTitle": "property{string|int}",
          "title": "property{string|int}",
          "text": "imageeditor.height=85% Default dialog height by screen",
          "value": "imageeditor.height=85% Default dialog height by screen"
        }
      ],
      "name": "height",
      "longname": "<anonymous>~Config_1.Config#imageeditor.height",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005375",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{boolean} imageeditor.crop=true Show tab cropping\n     */",
      "meta": {
        "range": [
          690012,
          690022
        ],
        "filename": "jodit.js",
        "lineno": 17769,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081684",
          "name": "crop",
          "type": "Literal",
          "value": true
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "imageeditor.crop=true Show tab cropping",
          "value": "imageeditor.crop=true Show tab cropping"
        }
      ],
      "name": "crop",
      "longname": "<anonymous>~Config_1.Config#imageeditor.crop",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005376",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{boolean} imageeditor.resize=true Show tab resizing\n     */",
      "meta": {
        "range": [
          690112,
          690124
        ],
        "filename": "jodit.js",
        "lineno": 17773,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081686",
          "name": "resize",
          "type": "Literal",
          "value": true
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "imageeditor.resize=true Show tab resizing",
          "value": "imageeditor.resize=true Show tab resizing"
        }
      ],
      "name": "resize",
      "longname": "<anonymous>~Config_1.Config#imageeditor.resize",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005377",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{boolean} imageeditor.resizeUseRatio=true Keep aspect ratio on resize\n     */",
      "meta": {
        "range": [
          690232,
          690252
        ],
        "filename": "jodit.js",
        "lineno": 17777,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081688",
          "name": "resizeUseRatio",
          "type": "Literal",
          "value": true
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "imageeditor.resizeUseRatio=true Keep aspect ratio on resize",
          "value": "imageeditor.resizeUseRatio=true Keep aspect ratio on resize"
        }
      ],
      "name": "resizeUseRatio",
      "longname": "<anonymous>~Config_1.Config#imageeditor.resizeUseRatio",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005378",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{int} imageeditor.resizeMinWidth=20 minimal width on resize\n     */",
      "meta": {
        "range": [
          690350,
          690368
        ],
        "filename": "jodit.js",
        "lineno": 17781,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081690",
          "name": "resizeMinWidth",
          "type": "Literal",
          "value": 20
        }
      },
      "tags": [
        {
          "originalTitle": "property{int}",
          "title": "property{int}",
          "text": "imageeditor.resizeMinWidth=20 minimal width on resize",
          "value": "imageeditor.resizeMinWidth=20 minimal width on resize"
        }
      ],
      "name": "resizeMinWidth",
      "longname": "<anonymous>~Config_1.Config#imageeditor.resizeMinWidth",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005379",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{boolean} imageeditor.resizeMinHeight=20 minimal height on resize\n     */",
      "meta": {
        "range": [
          690472,
          690491
        ],
        "filename": "jodit.js",
        "lineno": 17785,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081692",
          "name": "resizeMinHeight",
          "type": "Literal",
          "value": 20
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "imageeditor.resizeMinHeight=20 minimal height on resize",
          "value": "imageeditor.resizeMinHeight=20 minimal height on resize"
        }
      ],
      "name": "resizeMinHeight",
      "longname": "<anonymous>~Config_1.Config#imageeditor.resizeMinHeight",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005380",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{boolean} imageeditor.cropUseRatio=true Keep aspect ratio on crop\n     */",
      "meta": {
        "range": [
          690595,
          690613
        ],
        "filename": "jodit.js",
        "lineno": 17789,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081694",
          "name": "cropUseRatio",
          "type": "Literal",
          "value": true
        }
      },
      "tags": [
        {
          "originalTitle": "property{boolean}",
          "title": "property{boolean}",
          "text": "imageeditor.cropUseRatio=true Keep aspect ratio on crop",
          "value": "imageeditor.cropUseRatio=true Keep aspect ratio on crop"
        }
      ],
      "name": "cropUseRatio",
      "longname": "<anonymous>~Config_1.Config#imageeditor.cropUseRatio",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005381",
      "___s": true
    },
    {
      "comment": "/**\n     * @property{string} imageeditor.cropDefaultWidth=70% In the tab, crop the image is displayed not in real size. Boxing default size for it\n     * @property{string} imageeditor.cropDefaultHeight=70%\n     */",
      "meta": {
        "range": [
          690837,
          690860
        ],
        "filename": "jodit.js",
        "lineno": 17794,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081696",
          "name": "cropDefaultWidth",
          "type": "Literal",
          "value": "70%"
        }
      },
      "tags": [
        {
          "originalTitle": "property{string}",
          "title": "property{string}",
          "text": "imageeditor.cropDefaultWidth=70% In the tab, crop the image is displayed not in real size. Boxing default size for it",
          "value": "imageeditor.cropDefaultWidth=70% In the tab, crop the image is displayed not in real size. Boxing default size for it"
        },
        {
          "originalTitle": "property{string}",
          "title": "property{string}",
          "text": "imageeditor.cropDefaultHeight=70%",
          "value": "imageeditor.cropDefaultHeight=70%"
        }
      ],
      "name": "cropDefaultWidth",
      "longname": "<anonymous>~Config_1.Config#imageeditor.cropDefaultWidth",
      "kind": "member",
      "memberof": "<anonymous>~Config_1.Config#imageeditor",
      "scope": "static",
      "___id": "T000002R005382",
      "___s": true
    },
    {
      "comment": "/**\n * The module allows you toWYSIWYG edit the image: resize or cut any part of it\n *\n */",
      "meta": {
        "range": [
          690990,
          718923
        ],
        "filename": "jodit.js",
        "lineno": 17801,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100081701",
          "name": "ImageEditor",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "The module allows you toWYSIWYG edit the image: resize or cut any part of it",
      "name": "ImageEditor",
      "longname": "<anonymous>~ImageEditor",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R005384",
      "___s": true
    },
    {
      "comment": "/**\n         * Hide image editor\n         *\n         * @method hide\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17809,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Hide image editor",
      "kind": "function",
      "name": "hide",
      "longname": "module:source~hide",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005391",
      "___s": true
    },
    {
      "comment": "/**\n         * Open image editor\n         *\n         * @method open\n         * @param {string} url\n         * @param {function} save\n         * @param {string} [save.name] new filename\n         * @param {object} save.data Bound box for resize and crop operation\n         * @param {string} save.data.action resize or crop\n         * @param {object} save.data.box Bound box\n         * @param {function} save.success called after success operation\n         * @param {function} save.failed called after failed operation\n         * @example\n         * ```javascript\n         * var jodit = new Jodit('.editor', {\n         *     imageeditor: {\n         *         crop: false,\n         *         closeAfterSave: true,\n         *         width: 500\n         *     }\n         * });\n         * jodit.imageeditor.open('http://xdsoft.net/jodit/images/test.png', function (name, data, success, failed) {\n         *     var img = jodit.node.create('img');\n         *     img.setAttribute('src', 'http://xdsoft.net/jodit/images/test.png');\n         *     if (box.action !== 'resize') {\n         *          return failed('Sorry it is work only in resize mode. For croping use FileBrowser');\n         *     }\n         *     img.style.width = data.w;\n         *     img.style.height = data.h;\n         *     jodit.selection.insertNode(img);\n         *     success();\n         * });\n         * ```\n         */",
      "meta": {
        "filename": "jodit.js",
        "lineno": 17896,
        "columnno": 8,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {}
      },
      "description": "Open image editor",
      "kind": "function",
      "name": "open",
      "params": [
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "name": "url"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "name": "save"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "optional": true,
          "description": "new filename",
          "name": "save.name"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Bound box for resize and crop operation",
          "name": "save.data"
        },
        {
          "type": {
            "names": [
              "string"
            ]
          },
          "description": "resize or crop",
          "name": "save.data.action"
        },
        {
          "type": {
            "names": [
              "object"
            ]
          },
          "description": "Bound box",
          "name": "save.data.box"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "called after success operation",
          "name": "save.success"
        },
        {
          "type": {
            "names": [
              "function"
            ]
          },
          "description": "called after failed operation",
          "name": "save.failed"
        }
      ],
      "examples": [
        "```javascript\nvar jodit = new Jodit('.editor', {\n    imageeditor: {\n        crop: false,\n        closeAfterSave: true,\n        width: 500\n    }\n});\njodit.imageeditor.open('http://xdsoft.net/jodit/images/test.png', function (name, data, success, failed) {\n    var img = jodit.node.create('img');\n    img.setAttribute('src', 'http://xdsoft.net/jodit/images/test.png');\n    if (box.action !== 'resize') {\n         return failed('Sorry it is work only in resize mode. For croping use FileBrowser');\n    }\n    img.style.width = data.w;\n    img.style.height = data.h;\n    jodit.selection.insertNode(img);\n    success();\n});\n```"
      ],
      "longname": "module:source~open",
      "scope": "inner",
      "memberof": "module:source",
      "___id": "T000002R005440",
      "___s": true
    },
    {
      "comment": "/**\n * Process navigate keypressing in table cell\n *\n * @param {Jodit} editor\n */",
      "meta": {
        "range": [
          719480,
          723438
        ],
        "filename": "jodit.js",
        "lineno": 18333,
        "columnno": 0,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100084947",
          "name": "tableKeyboardNavigation",
          "type": "FunctionDeclaration",
          "paramnames": [
            "editor"
          ]
        },
        "vars": {
          "": null
        }
      },
      "description": "Process navigate keypressing in table cell",
      "params": [
        {
          "type": {
            "names": [
              "Jodit"
            ]
          },
          "name": "editor"
        }
      ],
      "name": "tableKeyboardNavigation",
      "longname": "<anonymous>~tableKeyboardNavigation",
      "kind": "function",
      "memberof": "<anonymous>",
      "scope": "inner",
      "___id": "T000002R005547",
      "___s": true
    },
    {
      "comment": "/**\n * Search plugin. it is used for custom search in text\n * ![search](https://user-images.githubusercontent.com/794318/34545433-cd0a9220-f10e-11e7-8d26-7e22f66e266d.gif)\n *\n * @example\n * ```typescript\n * var jodit = new Jodit('#editor', {\n *  useSearch: false\n * });\n * // or\n * var jodit = new Jodit('#editor', {\n *  disablePlugins: 'search'\n * });\n * ```\n */",
      "meta": {
        "range": [
          725020,
          743215
        ],
        "filename": "jodit.js",
        "lineno": 18460,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100085725",
          "name": "search",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Search plugin. it is used for custom search in text\n![search](https://user-images.githubusercontent.com/794318/34545433-cd0a9220-f10e-11e7-8d26-7e22f66e266d.gif)",
      "examples": [
        "```typescript\nvar jodit = new Jodit('#editor', {\n useSearch: false\n});\n// or\nvar jodit = new Jodit('#editor', {\n disablePlugins: 'search'\n});\n```"
      ],
      "name": "search",
      "longname": "<anonymous>~search",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R005585",
      "___s": true
    },
    {
      "comment": "/**\n * Show stat data - words and chars count\n */",
      "meta": {
        "range": [
          748546,
          750007
        ],
        "filename": "jodit.js",
        "lineno": 18952,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100088785",
          "name": "stat",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Show stat data - words and chars count",
      "name": "stat",
      "longname": "<anonymous>~stat",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R005766",
      "___s": true
    },
    {
      "comment": "/**\n * Show path to current element in status bar\n */",
      "meta": {
        "range": [
          751847,
          756550
        ],
        "filename": "jodit.js",
        "lineno": 19039,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100089313",
          "name": "xpath",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Show path to current element in status bar",
      "name": "xpath",
      "longname": "<anonymous>~xpath",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R005808",
      "___s": true
    },
    {
      "comment": "/**\n * Process drag and drop image from FileBrowser and movev image inside the editor\n */",
      "meta": {
        "range": [
          757743,
          764135
        ],
        "filename": "jodit.js",
        "lineno": 19178,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100090119",
          "name": "DragAndDrop",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Process drag and drop image from FileBrowser and movev image inside the editor",
      "name": "DragAndDrop",
      "longname": "<anonymous>~DragAndDrop",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R005859",
      "___s": true
    },
    {
      "comment": "/**\n * Show dialog choose content to paste\n */",
      "meta": {
        "range": [
          765295,
          770786
        ],
        "filename": "jodit.js",
        "lineno": 19347,
        "columnno": 4,
        "path": "/Users/v-chupurnov/WebstormProjects/pet/jodit/build",
        "code": {
          "id": "astnode100091157",
          "name": "pasteStorage",
          "type": "CallExpression",
          "value": ""
        }
      },
      "description": "Show dialog choose content to paste",
      "name": "pasteStorage",
      "longname": "<anonymous>~pasteStorage",
      "kind": "member",
      "memberof": "<anonymous>",
      "scope": "inner",
      "params": [],
      "___id": "T000002R005929",
      "___s": true
    },
    {
      "kind": "package",
      "longname": "package:undefined",
      "files": [
        "/Users/v-chupurnov/WebstormProjects/pet/jodit/build/jodit.js"
      ],
      "___id": "T000002R007711",
      "___s": true
    }
  ]
}